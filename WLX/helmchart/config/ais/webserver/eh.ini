## Authentication Parameters
        ## no authentication
	authentication.mode = none

	## Allow entry from local host
	# authentication.mode = local
	
	## Use Header Authentication
	# authentication.mode = full
	# eh.authentication.header = authentication_token
	
	## Use NTLM Authentication
	# authentication.mode = NTLM
	# eh.authentication.ntlm.jcifs.domainController = 
	# eh.authentication.ntlm.jcifs.domain = 
	# eh.authentication.ntlm.jcifs.wins = 
	# jcifs.smb.client.username = 
	# jcifs.smb.client.password = 

## HeartBeat Parameters. Failure occurs when number of errors in windowSize>errorSize.
	eh.heartbeat.windowSize = 1000
	eh.heartbeat.errorSize = 500
	eh.heartbeat.countTimeOutAsError = true
## Heartbeat response returned by the AIS embedded web server
        eh.heartbeat.webserver.enable.OKResponse = true
## The EventHandler Error Handling Behavior:
## 1 = "Global Error Counter" mode - having one global error counter, affecting all heartbeats, and affected by all errors on all services
## 2 = "Error Counter per Service" mode - having different error counter per each service defined in mapping.ini. Notice:
##      i. For each service, can define its own windowSize and errorSize. The above values are default in case it is omitted
##      ii. Each heartbeat can be configured to be affected by different services (Thus, different error counters)
	eh.errorCounter.behavior = 2
# Support detailed error response in heartbeat checks:
# false = HTTP response with no information in case of error (Only 500 Internal Server Error)
# true = HTTP response with detailed information in case of error (500 Internal Server Error, and http body containing the failed error counters, failed connectors or failed processes)
	eh.heartbeat.supportDetailedResponse=true

# EH runtime configuration parameters
        # Maximum number of concurrent connections to AIS
	eh.poolSize = 5

       # Time out in milliseconds for AIS call
	eh.timeOut = 1000

        # Enabling Debug mode logs
	eh.logs.debugMode = false
    
       # The number of requests after which the EH statistics will be written to the log. 
       # To disable the statistics feature set the value to -1
	eh.numberOfRequestForStatistics =-1

    eh.logs.outputPath = ../logs
	eh.mapping.location = ./mapping.ini
	eh.authentication.location = 
	
# EH development configuration parameters
	# This where the descriptor.jar is generated in development mode
	# eh.jarLocation = 

# EH WSDL Control	
	# To replace service name (Default is EventHandlerService)
	# In order to be backward compatible with EH 1.0 you should use 'onlineFraudService'
	# eh.service.name = onlineFraudService 
	# To replace generated class name in descriptor jar (relevant if you use the jar for development)
	# This also defines the port-name in the WSDL. Default is EHProxy
	# eh.service.className = com.actimize.eh.OnlineFraudDetectionServicesImpl
	# Uncomment the following line to enable WSDL generation (Default is true)
	 eh.wsdl.generation.disabled = false

# Allow null values for primitivies in EH wsdl
	eh.nullPrimitivesAllowed = true	
# Suppres minoccurs attribute
	eh.suppressMinOccursAttribute = false

# Remove empty namespaces (xmlns="") from the SOAP response
        # eh.removeEmptyNamespaces=true
        
# Performance improvment
 	#eh.performance.ais.nullComplexTypeRefernce = <default value is false, in order to activate turn to true, will pass a null pointer in the dataType reference of a set/tuple data soap xml to the AIS>
    
# Service communication mode. When set to true (default) the service intercommunication is based on java objects marshaling. If set to false it works oldfashioned way by sending HTTP SOAP requests
eh.service.mode=true

# When set to true (false is default) the service returns addtional data for errors
eh.returnAdditionalDataOnErrors=false
