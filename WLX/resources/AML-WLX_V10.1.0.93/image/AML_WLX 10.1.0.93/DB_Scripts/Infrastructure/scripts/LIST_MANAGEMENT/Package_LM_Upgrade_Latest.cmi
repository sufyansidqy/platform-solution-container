version 3.0.0.0 ADD {

	/* ------------------------------------------------------------ */
	/*  List Management Script Versions (for CMI management)	*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LM_VERSIONS (
		ID 			@ustring@ (50) 	NOT NULL ,
		VERSION_CONTROL_LABEL 	@ustring@ (255) 	NOT NULL ,
		UPDATE_DATE 		@datetime@ 	NULL ,
		SCRIPT_FILE_NAME 	@ustring@ (255) 	NULL ,
		APP_TYPE 		@ustring@ (255) 	NULL
	)
	@storage_params_insert_only @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LM_VERSIONS add
		CONSTRAINT PK_WLF_LM_VERSIONS PRIMARY KEY
		(
			ID
		)
	@storage_primary_insert_only @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  INFRA_SEQ.CMI - Get Unique ID table			 	*/
	/*  	This table is managed by separate infra script 	 	*/
	/*  	Changes are made manually			 	*/
	/* ------------------------------------------------------------ */
	create table @env:lm_schema_name@.APP_SEQUENCES (
		SEQUENCE_ID @ustring@(50) not null,
		LATEST_VALUE @number@(10,0) not null
		)
[oracle
		pctfree     10
		initrans    8
		tablespace @env:tablespace_default@
		storage   (
			initial     65536
			minextents  1
			maxextents  2147483645
			buffer_pool default
		)
]
	@go@

	ALTER TABLE @env:lm_schema_name@.APP_SEQUENCES add
		CONSTRAINT APP_SEQUENCES_PK PRIMARY KEY
		(
			SEQUENCE_ID
		)
[oracle
		USING INDEX
			pctfree     10
			initrans    8
			tablespace @env:tablespace_index@
			storage   (
				initial     65536
				minextents  1
				maxextents  2147483645
				buffer_pool default
			)
]
	@go@

	insert into @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('alertId',0)
	@go@
	insert into @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('jobId',0)
	@go@



	/* ------------------------------------------------------------ */
	/*  INFRA_DBQ_EP.CMI - DBQ Structures for SSB Queuing    	 	*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_STAGING (
		UNIQUE_ID @ustring@(255) NOT NULL,
		CHUNK_ID  @int@ NOT NULL,
		CHUNK_DATA @ustring@(1000) NULL)
[oracle
		pctfree     10
		initrans    8
		tablespace @env:tablespace_default@
		storage   (
			initial     65536
			minextents  1
			maxextents  2147483645
			buffer_pool default
		)
]
	@go@

		ALTER TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_STAGING add
		CONSTRAINT PK_WLF_SELF_SERVICE_STAGING PRIMARY KEY
		(
			UNIQUE_ID, CHUNK_ID
		)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_JOBS (
		STAGING_UID @ustring@(255) NOT NULL,
		NAME @ustring@(255) NOT NULL,
		TYPE @ustring@(50) NOT NULL,
		CONFIG_ID @ustring@(255) NOT NULL,
		DELTA  @int@ NOT NULL,
		DELTA_AFTER_DATE @datetime@ NULL,
		GENERATE_ALERTS  @int@ NOT NULL,
		GENERATE_OUTPUTFILE  @int@ NOT NULL,
		PARTIES_COUNT  @int@ NOT NULL,
		CREATION_DATE @datetime@ NOT NULL,
		CREATED_BY @ustring@(255) NOT NULL,
		CREATED_BY_EMAIL @ustring@(255) NULL,
		STATUS @ustring@(255) NOT NULL,
		CANCELED_TIME @datetime@ NULL,
		CANCELED_BY @ustring@(255) NULL,
		CANCELED_BY_EMAIL @ustring@(255) NULL,
		FILENAME @ustring@(255) NULL,
		SUPPRESS_HITS @int@ NOT NULL,
		SOURCE_FILE_TYPE @ustring@(255) NULL,
		JOB_ID @ustring@(255) NULL)
[oracle
		pctfree     10
		initrans    8
		tablespace @env:tablespace_default@
		storage   (
			initial     65536
			minextents  1
			maxextents  2147483645
			buffer_pool default
		)
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_JOBS add
		CONSTRAINT PK_WLF_SELF_SERVICE_JOBS PRIMARY KEY
		(
			STAGING_UID
		)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.STAGING_UID_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20
	@go@
]
    	CREATE TABLE @env:lm_schema_name@.DB_QUEUE_EP (
		QUEUE_TYPE @ustring@(50) NOT NULL,
		QUEUE_ITEM_ID @ustring@(50) NOT NULL,
		INSERT_TIME_S @datetime@ NOT NULL,
		ASSIGNED_PROCESSOR_ID @ustring@(50) NULL,
		NUM_TRIES @int@ NOT NULL,
		LAST_TRY_TIME_S @datetime@ NULL,
		PROCESS_TYPE @ustring@(50) NULL,
		QUEUE_ITEM_CONTEXT_1 @ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_2 @ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_3 @ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_4 @ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_5 @ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_6 @ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_7 @ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_8 @ustring@(4000) NULL)
[oracle
		pctfree     10
		initrans    8
		tablespace @env:tablespace_default@
		storage   (
			initial     65536
			minextents  1
			maxextents  2147483645
			buffer_pool default
		)
]
	@go@


	ALTER TABLE @env:lm_schema_name@.DB_QUEUE_EP add
		CONSTRAINT PK_DB_QUEUE_EP PRIMARY KEY
		(
			QUEUE_ITEM_ID
		)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_OUTPUT_DATA(
		JOB_ID  @ustring@(255) NOT NULL,
		FILE_ID  @ustring@(255) NOT NULL,
		CHUNK_ID @int@ NOT NULL,
		CHUNK_DATA  @ustring@(1000) NULL
	)
[oracle
		pctfree     10
		initrans    8
		tablespace @env:tablespace_default@
		storage   (
			initial     65536
			minextents  1
			maxextents  2147483645
			buffer_pool default
		)
]
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_OUTPUT_DATA add
		CONSTRAINT PK_WLF_SS_OUTPUT_DATA PRIMARY KEY
		(
			JOB_ID, FILE_ID, CHUNK_ID
		)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_OUTPUT_FILES(
		JOB_ID  @ustring@(255) NOT NULL,
		FILE_ID  @ustring@(255) NOT NULL,
		STAGING_UID  @ustring@(255) NOT NULL,
		FILE_NAME  @ustring@(255) NOT NULL,
		FILE_CREATION_DATE @datetime@ NOT NULL,
		FILE_SIZE @int@ NOT NULL
	)
[oracle
		pctfree     10
		initrans    8
		tablespace @env:tablespace_default@
		storage   (
			initial     65536
			minextents  1
			maxextents  2147483645
			buffer_pool default
		)
]
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_OUTPUT_FILES add
		CONSTRAINT PK_WLF_SS_OUTPUT_FILES PRIMARY KEY
		(
			JOB_ID, FILE_ID, STAGING_UID
		)
	@go@


	/* ------------------------------------------------------------ */
	/*  List Definitions						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_DEFINITIONS (
		LIST_ID		@ustring@(50)	NOT NULL,
		NAME		@ustring@(255)	NOT NULL,
		TYPE		@ustring@(50)	NOT NULL,
		DESCRIPTION	@clob@	NULL,
		CREATION_DATE	@datetime@		NULL,
		CREATED_BY	@ustring@(255)	NULL,
		IS_DELETED  @tinyint@ NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_DEFINITIONS ADD
		CONSTRAINT PK_WLF_LIST_DEFINITIONS PRIMARY KEY @nonclustered@
		(
			LIST_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	insert into @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED ) values ( 'WC', 'WorldCheck', 'External', 'WorldCheck Watch List',  @now@, 'System',0)
	@go@
	insert into @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED ) values ( 'OFAC', 'OFAC', 'External', 'OFAC Watch List',  @now@, 'System',0)
	@go@

	/* ------------------------------------------------------------ */
	/*  List Versions						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		ENTRY_MIN_UPDATE_DATE	@datetime@		NULL,
		ENTRY_MAX_UPDATE_DATE	@datetime@		NULL,
		LIST_TYPE		@ustring@(50)	NOT NULL,
		IS_ACTIVATED		@tinyint@	NOT NULL,
		IS_DELETED		@tinyint@	NOT NULL,
		STATUS			@tinyint@	NOT NULL,
		LIST_COUNT		@int@	NULL,
		UPDATED_DATE		@datetime@		NULL,
		UPDATED_BY		@ustring@(255)	NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS ADD
		CONSTRAINT PK_WLF_LIST_VERSIONS PRIMARY KEY @nonclustered@
		(
			LIST_VERSION_IDENTIFIER,
			LIST_ID,
			VERSION
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
	CREATE  INDEX IX_WLF_LIST_VERSIONS ON @env:lm_schema_name@.WLF_LIST_VERSIONS(LIST_ID, LIST_TYPE, IS_ACTIVATED)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@
[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS CACHE
	@go@
]

	/* ------------------------------------------------------------ */
	/*  List Entries												*/
	/* ------------------------------------------------------------ */

[mssql
	/* ------------------------------------------------------------ */
	/*  Partition Function											*/
	/* ------------------------------------------------------------ */
	CREATE PARTITION FUNCTION list_partfunc (int)
		AS RANGE LEFT FOR VALUES (1)
	@go@

	/* ------------------------------------------------------------ */
	/*  Partition Scheme											*/
	/* ------------------------------------------------------------ */
	CREATE PARTITION SCHEME list_partscheme
		AS PARTITION list_partfunc ALL TO ([PRIMARY])
	@go@
]

	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES (
		LIST_VERSION_IDENTIFIER		@int@	NOT NULL,
		LIST_ID				@ustring@(50)	NOT NULL,
		VERSION				@int@	NOT NULL,
		LIST_ENTRY_KEY			@ustring@(255)	NOT NULL,
		ENTRY_UPDATE_DATE		@datetime@		NOT NULL,
		LIST_ENTRY_SORTER		@ustring@(255)	NOT NULL,
		IS_DELETED			@tinyint@	NOT NULL,
		ENTRY_TYPE			@ustring@(50)	NULL,
		ENTRY_FIRST_NAME		@ustring@(255)	NULL,
		ENTRY_MIDDLE_NAME		@ustring@(255)	NULL,
		ENTRY_LAST_NAME			@ustring@(255)	NULL,
		ENTRY_FULL_NAME			@ustring@(255)	NULL,
		ENTRY_MAIDEN_NAME		@ustring@(255)	NULL,
		IS_BROKEN			@tinyint@	NULL,
		CITIZENSHIP			@ustring@(255)	NULL,
		DECEASED			@tinyint@	NULL,
		DECEASED_DATE			@datetime@		NULL,
		GENDER				@ustring@(50)	NULL,
		TITLE				@ustring@(255)	NULL,
		POSITION			@ustring@(255)	NULL,
		ALIAS_SET			@clob@		NULL,
		ADDRESS_SET			@clob@		NULL,
		ID_SET				@clob@		NULL,
		NATIONALITY_COUNTRY_SET		@clob@		NULL,
		DATE_OF_BIRTH_SET		@clob@		NULL,
		PLACE_OF_BIRTH_SET		@clob@		NULL,
		KEYWORD_SET			@clob@		NULL,
		CATEGORY_SET			@clob@		NULL,
		ADD_INFO_SET			@clob@		NULL,
		CUSTOM_FIELD_1 		@ustring@(255)   NULL,
		CUSTOM_FIELD_2 		@ustring@(255)   NULL,
		CUSTOM_FIELD_3 		@ustring@(255)   NULL,
		CUSTOM_FIELD_4 		@ustring@(255)   NULL,
		CUSTOM_FIELD_5 		@ustring@(255)   NULL,
		CUSTOM_FIELD_6 		@tinyint@   NULL,
		CUSTOM_FIELD_7 		@tinyint@   NULL,
		CUSTOM_FIELD_8 		@tinyint@   NULL,
		CUSTOM_FIELD_9 		@tinyint@   NULL,
		CUSTOM_FIELD_10 		@tinyint@   NULL,
		CUSTOM_FIELD_11 		@datetime@   NULL,
		CUSTOM_FIELD_12 		@datetime@   NULL,
		CUSTOM_FIELD_13 		@datetime@   NULL,
		CUSTOM_FIELD_14 		@datetime@   NULL,
		CUSTOM_FIELD_15 		@datetime@   NULL
	)
[oracle
	PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		CONSTRAINT PK_WLF_LIST_ENTRIES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	CREATE  INDEX IX_WLF_LIST_ENTRIES ON @env:lm_schema_name@.WLF_LIST_ENTRIES(LIST_VERSION_IDENTIFIER, LIST_ID, LIST_ENTRY_KEY, LIST_ENTRY_SORTER)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

[oracle
	create index entry_type_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(upper(ENTRY_TYPE))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index entry_key_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(upper(LIST_ENTRY_KEY))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index entry_fn_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(upper(ENTRY_FULL_NAME))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index entry_cit_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(upper(CITIZENSHIP))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
[mssql
	create index entry_type_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(ENTRY_TYPE)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index entry_key_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(LIST_ENTRY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index entry_fn_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(ENTRY_FULL_NAME)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index entry_cit_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(CITIZENSHIP)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]

	/* ------------------------------------------------------------ */
	/*  List Aliases						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ALIASES (
		LIST_VERSION_IDENTIFIER		@int@	NOT NULL,
		LIST_ID				@ustring@(50)	NOT NULL,
		VERSION				@int@	NOT NULL,
		LIST_ENTRY_KEY			@ustring@(255)	NOT NULL,
		LIST_ENTRY_ALIAS_ID		@int@	NOT NULL,
		ALIAS_FIRST_NAME		@ustring@(255)	NULL,
		ALIAS_MIDDLE_NAME		@ustring@(255)	NULL,
		ALIAS_LAST_NAME			@ustring@(255)	NULL,
		ALIAS_FULL_NAME			@ustring@(255)	NULL,
		ALIAS_IS_BROKEN			@int@	NULL,
		ALIAS_MATCH_STRENGTH		@ustring@(255)	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES ADD
		CONSTRAINT PK_WLF_LIST_ALIASES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ALIAS_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

[oracle
	create index entry_alias_upper_idx on @env:lm_schema_name@.WLF_LIST_ALIASES(upper(ALIAS_FULL_NAME))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
[mssql
	create index entry_alias_upper_idx on @env:lm_schema_name@.WLF_LIST_ALIASES(ALIAS_FULL_NAME)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]

	/* ------------------------------------------------------------ */
	/*  List Addresses						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_ADDR_ID	@int@	NOT NULL,
		ADDR_STREET		@ustring@(255)	NULL,
		ADDR_STREET2		@ustring@(255)	NULL,
		ADDR_CITY		@ustring@(255)	NULL,
		ADDR_STATE		@ustring@(255)	NULL,
		ADDR_POSTAL_CODE	@ustring@(255)	NULL,
		ADDR_COUNTRY		@ustring@(255)	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

[oracle
	create index entry_addr_st1_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(upper(ADDR_STREET))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_st2_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(upper(ADDR_STREET2))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_city_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(upper(ADDR_CITY))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_st_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(upper(ADDR_STATE))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_zip_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(upper(ADDR_POSTAL_CODE))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_cty_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(upper(ADDR_COUNTRY))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
[mssql
	create index entry_addr_st1_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(ADDR_STREET)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_st2_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(ADDR_STREET2)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_city_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(ADDR_CITY)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_st_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(ADDR_STATE)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_zip_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(ADDR_POSTAL_CODE)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	create index entry_addr_cty_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(ADDR_COUNTRY)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES ADD
		CONSTRAINT PK_WLF_LIST_ADDRESSES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ADDR_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  List IDs						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_IDS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_ID_ID	@int@	NOT NULL,
		ID_TYPE			@ustring@(255)	NULL,
		ID_NUMBER		@ustring@(255)	NULL,
		ID_COUNTRY		@ustring@(255)	NULL
	)
[oracle
	PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_IDS ADD
		CONSTRAINT PK_WLF_LIST_IDS PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ID_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

[oracle
	create index entry_id_upper_idx on @env:lm_schema_name@.WLF_LIST_IDS(upper(ID_NUMBER))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index entry_id_cty_upper_idx on @env:lm_schema_name@.WLF_LIST_IDS(upper(ID_COUNTRY))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
[mssql
	create index entry_id_upper_idx on @env:lm_schema_name@.WLF_LIST_IDS(ID_NUMBER)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index entry_id_cty_upper_idx on @env:lm_schema_name@.WLF_LIST_IDS(ID_COUNTRY)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]

	/* ------------------------------------------------------------ */
	/*  List Birthdates						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_BIRTHDATES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_BD_ID	@int@	NOT NULL,
		BIRTHDATE_DOB		@ustring@(255)	NULL,
		BIRTHDATE_YOB		@int@	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_BIRTHDATES ADD
		CONSTRAINT PK_WLF_LIST_BIRTHDATES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_BD_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  List Birth Places						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_BIRTHPLACES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_BP_ID	@int@	NOT NULL,
		BIRTHPLACE_COUNTRY	@ustring@(255)	NULL,
		BIRTHPLACE_CITY		@ustring@(255)	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_BIRTHPLACES ADD
		CONSTRAINT PK_WLF_LIST_BIRTHPLACES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_BP_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

[oracle
	create index entry_bp_cty_upper_idx on @env:lm_schema_name@.WLF_LIST_BIRTHPLACES(upper(BIRTHPLACE_COUNTRY))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
[mssql
	create index entry_bp_cty_upper_idx on @env:lm_schema_name@.WLF_LIST_BIRTHPLACES(BIRTHPLACE_COUNTRY)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
	/* ------------------------------------------------------------ */
	/*  List Additional Information					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ADDINFO (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_AI_ID	@int@	NOT NULL,
		ADDINFO_TYPE		@ustring@(255)	NULL,
		ADDINFO_VALUE		@clob@		NULL
	)
[oracle
	PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDINFO ADD
		CONSTRAINT PK_WLF_LIST_ADDINFO PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_AI_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  List Keywords						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_KEYWORDS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_KW_ID	@int@	NOT NULL,
		KEYWORD_NAME		@ustring@(255)	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_KEYWORDS ADD
		CONSTRAINT PK_WLF_LIST_KEYWORDS PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_KW_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

[oracle
	create index entry_kw_upper_idx on @env:lm_schema_name@.WLF_LIST_KEYWORDS(upper(KEYWORD_NAME))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
[mssql
	create index entry_kw_upper_idx on @env:lm_schema_name@.WLF_LIST_KEYWORDS(KEYWORD_NAME)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
	/* ------------------------------------------------------------ */
	/*  List Keyword Data						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_KEYWORDS_DATA (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		KEYWORD_NAME		@ustring@(255)	NOT NULL,
		KEYWORD_COUNT		@int@	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_KEYWORDS_DATA ADD
		CONSTRAINT PK_WLF_KEYWORDS_DATA PRIMARY KEY @nonclustered@
		(
			KEYWORD_NAME,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	/* ------------------------------------------------------------ */
	/*  List Categories						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_CATEGORIES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_CAT_ID	@int@	NOT NULL,
		CATEGORY_NAME		@ustring@(255)	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_CATEGORIES ADD
		CONSTRAINT PK_WLF_LIST_CATEGORIES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_CAT_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

[oracle
	create index entry_cat_upper_idx on @env:lm_schema_name@.WLF_LIST_CATEGORIES(upper(CATEGORY_NAME))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
[mssql
	create index entry_cat_upper_idx on @env:lm_schema_name@.WLF_LIST_CATEGORIES(CATEGORY_NAME)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]

	/* ------------------------------------------------------------ */
	/*  List Categories Data					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_CATEGORIES_DATA (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		CATEGORY_NAME		@ustring@(255)	NOT NULL,
		CATEGORY_COUNT		@int@	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_CATEGORIES_DATA ADD
		CONSTRAINT PK_WLF_CATEGORIES_DATA PRIMARY KEY @nonclustered@
		(
			CATEGORY_NAME,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	/* ------------------------------------------------------------ */
	/*  List Nationality Country					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_NATIONALITY_CTRY (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_NC_ID	@int@	NOT NULL,
		NATIONALITY_COUNTRY	@ustring@(255)	NULL
	)
[oracle
	 PARTITION BY LIST (LIST_VERSION_IDENTIFIER)
	(
		PARTITION P1 values (1)
	)
]
[mssql
	ON list_partscheme (LIST_VERSION_IDENTIFIER)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_NATIONALITY_CTRY ADD
		CONSTRAINT PK_WLF_LIST_NATIONALITY_CTRY PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_NC_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

[oracle
	create index entry_nc_cty_upper_idx on @env:lm_schema_name@.WLF_LIST_NATIONALITY_CTRY(upper(NATIONALITY_COUNTRY))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
[mssql
	create index entry_nc_cty_upper_idx on @env:lm_schema_name@.WLF_LIST_NATIONALITY_CTRY(NATIONALITY_COUNTRY)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
]
	/* ------------------------------------------------------------ */
	/*  Internal List Staging					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_INTERNAL_LISTS_STAGING (
		LIST_ID			@ustring@(50)	NOT NULL,
		UNIQUE_ID		@ustring@(255)	NOT NULL,
		CHUNK_ID		@int@	NOT NULL,
		CHUNK_DATA		@clob@		NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_INTERNAL_LISTS_STAGING ADD
		CONSTRAINT PK_WLF_INTERNAL_LISTS_STAGING PRIMARY KEY @nonclustered@
		(
			LIST_ID,
			UNIQUE_ID,
			CHUNK_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  JOBS_LOG							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_JOBS_LOG (
		JOB_TYPE		@ustring@(50)	NOT NULL,
		JOB_ID			@ustring@(255)	NOT NULL,
		JOB_TIMESTAMP		@datetime@		NOT NULL,
		JOB_NAME		@ustring@(255)	NOT NULL,
		JOB_ROW_COUNT		@int@	NULL,
		STATUS			@ustring@(255)	NOT NULL,
		AIS_INSTANCE		@ustring@(255)	NULL,
		AIS_IP			@ustring@(50)	NULL,
		AIS_PORT		@ustring@(50)	NULL,
		AIS_PROCESS_NAME	@ustring@(255)	NULL,
		JOB_USER        @ustring@(255) NULL,
		JOB_COMPLETE_TIMESTAMP @datetime@ NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_JOBS_LOG ADD
		CONSTRAINT PK_WLF_JOBS_LOG PRIMARY KEY @nonclustered@
		(
			JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  JOB_CF_DETAILS							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_JOB_CF_DETAILS (
		JOB_ID			@ustring@(255)	NOT NULL,
		BUSINESS_UNIT		@ustring@(255)		NULL,
		SEARCH_CONFIG_ID		@ustring@(255)	NULL,
		SEARCH_CONFIG_NAME		@ustring@(255)	NULL,
		DELTA  @int@ NOT NULL,
		DELTA_AFTER_DATE @datetime@ NULL,
		GENERATE_ALERTS  @int@ NOT NULL,
		GENERATE_OUTPUTFILE  @int@ NOT NULL,
		GENERATE_TUNING_LOG @int@ NOT NULL,
		INPUT_FILENAME @ustring@(255) NULL,
		REGION @ustring@(255) NULL,
		NUMBER_OF_THREADS @int@ NOT NULL,
		RERUN @int@ NOT NULL,
		ALERTED_PARTIES_COUNT @int@ NOT NULL,
		TOTAL_PARTIES_COUNT @int@ NOT NULL,
		SUPPRESS_HITS @int@ NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_CF_DETAILS ADD
		CONSTRAINT PK_WLF_JOB_CF_DETAILS PRIMARY KEY @nonclustered@
		(
			JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  JOB_ETL_DETAILS							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_JOB_ETL_DETAILS (
		JOB_ID			@ustring@(255)	NOT NULL,
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_COUNT		@int@	NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_ETL_DETAILS ADD
		CONSTRAINT PK_WLF_JOB_ETL_DETAILS PRIMARY KEY @nonclustered@
		(
			JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  JOBS LOG DETAILS							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_JOBS_LOG_DETAILS (
[mssql
		ID				@int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID              @int@ NOT NULL,
]
		JOB_ID			@ustring@(255)	NOT NULL,
		LINE_TIMESTAMP		@datetime@		NOT NULL,
		TEXT			@clob@		NULL,
		JOB_COMMENT		@clob@		NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_JOBS_LOG_DETAILS ADD
		CONSTRAINT PK_WLF_JOBS_LOG_DETAILS PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
	/* ------------------------------------------------------------ */
	/*  DELTA JOB CONTROL 							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_DELTA_JOB_CONTROL (
		JOB_NAME		@ustring@(255)	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		LASTUPDATE_TIMESTAMP		@datetime@		NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_DELTA_JOB_CONTROL ADD
		CONSTRAINT PK_WLF_DELTA_JOB_CONTROL PRIMARY KEY @nonclustered@
		(
			JOB_NAME,
			LIST_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  JOB CONTROL 							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_JOB_CONTROL (
		JOB_ID			@ustring@(255)	NOT NULL,
		JOB_NAME		@ustring@(255)	NOT NULL,
		RUN_DATE		@datetime@	NOT NULL,
		STATUS			@ustring@(255)		NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_CONTROL ADD
		CONSTRAINT PK_WLF_JOB_CONTROL PRIMARY KEY @nonclustered@
		(
			JOB_NAME,
			RUN_DATE
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  WLF_AUDIT_COUNTER				 							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER(
		ID			@int@ NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	insert into @env:lm_schema_name@.WLF_AUDIT_COUNTER ( ID ) values ( 0 )
	@go@

	/* ------------------------------------------------------------ */
	/*  Sublist Keyword definition					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_SUBLIST_KEYWORD_DEF (
		LIST_ID			@ustring@(50)	NOT NULL,
		KEYWORD_NAME		@ustring@(255)	NOT NULL,
		DESCRIPTION		@clob@		NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SUBLIST_KEYWORD_DEF ADD
		CONSTRAINT PK_WLF_SUBLIST_KEYWORD_DEF PRIMARY KEY @nonclustered@
		(
			LIST_ID,
			KEYWORD_NAME
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Sublist Category definition					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_SUBLIST_CATEGORY_DEF (
		LIST_ID			@ustring@(50)	NOT NULL,
		CATEGORY_NAME		@ustring@(255)	NOT NULL,
		DESCRIPTION		@clob@		NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SUBLIST_CATEGORY_DEF ADD
		CONSTRAINT PK_WLF_SUBLIST_CATEGORY_DEF PRIMARY KEY @nonclustered@
		(
			LIST_ID,
			CATEGORY_NAME
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Excluded List Entries					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES (
		ID			@int@	NOT NULL, -- aka Entry ID
		LIST_ID			@ustring@(50)	NOT NULL,
		PARTY_KEY		@ustring@(255)	NOT NULL,
		PARTY_ID		@ustring@(255)	NULL,
		PARTY_ID_TYPE		@ustring@(50)	NULL,
		PARTY_NAME		@ustring@(255)	NULL,
		PARTY_CLASS		@ustring@(50)	NULL,
		EXPIRATION_DATE		@datetime@		NULL,
		IS_ACTIVE		@tinyint@	NULL,
		ENT_EXL_COMMENT		@clob@		NULL,
		UPDATE_TIMESTAMP	@datetime@		NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES ADD
		CONSTRAINT PK_WLF_ENTITY_EXCLUDE_ENTRIES PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
	/* ------------------------------------------------------------ */
	/*  Excluded Hits						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES (
		ID			@int@	NOT NULL,	-- AKA ENTRY ID
		LIST_ID			@ustring@(50)	NOT NULL,
		PARTY_KEY		@ustring@(255)	NOT NULL,
		PARTY_ID		@ustring@(255)	NULL,
		PARTY_ID_TYPE		@ustring@(50)	NULL,
		PARTY_NAME		@ustring@(255)	NULL,
		PARTY_CLASS		@ustring@(50)	NULL,
		REF_LIST_ID		@int@	NULL,
		REF_LIST_ENTRY_KEY	@int@	NULL,
		EXPIRATION_DATE		@datetime@		NULL,
		IS_ACTIVE		@tinyint@	NULL,
		HIT_EXL_COMMENT		@clob@		NULL,
		UPDATE_TIMESTAMP	@datetime@		NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES ADD
		CONSTRAINT PK_WLF_HIT_EXCLUDE_ENTRIES PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  WLF Hits table						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_HITS 	(
[mssql
		ID @int@ 		IDENTITY (1,1) NOT NULL,
]
[oracle
  		ID 				@int@	NOT NULL,
]
		HIT_HASH_KEY 	@ustring@(255),
		HIT_TIMESTAMP 	@datetime@,
		PARTY_KEY 		@ustring@(255),
		LIST_ID 		@ustring@(50),
		LIST_ENTRY_ID 	@ustring@(255),
		REGION 			@ustring@(255),
		ALERT_ID 		@ustring@(50),
		JOB_ID 			@ustring@(255)	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_HITS ADD
		CONSTRAINT PK_WLF_HITS PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.SEQ_WLF_HITS INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_HITS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_HITS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
  			SELECT @env:lm_schema_name@.SEQ_WLF_HITS.nextval INTO :new.id FROM dual;
  		END IF;
  	END;
	@go@

	CREATE SEQUENCE @env:lm_schema_name@.WLF_JOBS_LOG_DET_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_JOBS_LOG_DET
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_JOBS_LOG_DETAILS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_JOBS_LOG_DET_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  Archive tables Information					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO (
		LIVE_TABLE_NAME		@ustring@(30)	NOT NULL,
		TMP_TABLE_NAME		@ustring@(30)	NOT NULL,
		ARCHIVE_TABLE_NAME	@ustring@(30)	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO ADD
		CONSTRAINT PK_WLF_ARCHIVE_TABLES_INFO PRIMARY KEY @nonclustered@
		(
			LIVE_TABLE_NAME
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_VERSIONS', 'WLF_TMP_LIST_VERSIONS', 'WLF_ARC_LIST_VERSIONS')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_ENTRIES', 'WLF_TMP_LIST_ENTRIES', 'WLF_ARC_LIST_ENTRIES')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_ALIASES', 'WLF_TMP_LIST_ALIASES', 'WLF_ARC_LIST_ALIASES')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_ADDRESSES', 'WLF_TMP_LIST_ADDRESSES', 'WLF_ARC_LIST_ADDRESSES')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_IDS', 'WLF_TMP_LIST_IDS', 'WLF_ARC_LIST_IDS')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_BIRTHDATES', 'WLF_TMP_LIST_BIRTHDATES', 'WLF_ARC_LIST_BIRTHDATES')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_BIRTHPLACES', 'WLF_TMP_LIST_BIRTHPLACES', 'WLF_ARC_LIST_BIRTHPLACES')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_ADDINFO', 'WLF_TMP_LIST_ADDINFO', 'WLF_ARC_LIST_ADDINFO')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_KEYWORDS', 'WLF_TMP_LIST_KEYWORDS', 'WLF_ARC_LIST_KEYWORDS')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_KEYWORDS_DATA', 'WLF_TMP_KEYWORDS_DATA', 'WLF_ARC_KEYWORDS_DATA')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_CATEGORIES', 'WLF_TMP_LIST_CATEGORIES', 'WLF_ARC_LIST_CATEGORIES')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_CATEGORIES_DATA', 'WLF_TMP_CATEGORIES_DATA', 'WLF_ARC_CATEGORIES_DATA')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_ARCHIVE_TABLES_INFO VALUES ('WLF_LIST_NATIONALITY_CTRY', 'WLF_TMP_LIST_NATIONALITY_CTRY', 'WLF_ARC_LIST_NATIONALITY_CTRY')
	@go@

	/* ------------------------------------------------------------ */
	/*  Archive process monitor					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARCHIVE_PROCESS_MONITOR (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIVE_TABLE_NAME		@ustring@(30)	NOT NULL,
		STATUS			@int@	DEFAULT 0 NOT NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARCHIVE_PROCESS_MONITOR ADD
		CONSTRAINT PK_WLF_ARCHIVE_PROCESS_MON PRIMARY KEY @nonclustered@
		(
			LIST_VERSION_IDENTIFIER,
			LIVE_TABLE_NAME
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  Archive: List Versions					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSIONS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		ENTRY_MIN_UPDATE_DATE	@datetime@		NULL,
		ENTRY_MAX_UPDATE_DATE	@datetime@		NULL,
		LIST_TYPE		@ustring@(50)	NOT NULL,
		IS_ACTIVATED		@tinyint@	NOT NULL,
		IS_DELETED		@tinyint@	NOT NULL,
		STATUS			@tinyint@	NOT NULL,
		LIST_COUNT		@int@	NULL,
		UPDATED_DATE		@datetime@		NULL,
		UPDATED_BY		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSIONS ADD
		CONSTRAINT PK_WLF_ARC_LIST_VERSIONS PRIMARY KEY @nonclustered@
		(
			LIST_VERSION_IDENTIFIER,
			LIST_ID,
			VERSION
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Entries					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES (
		LIST_VERSION_IDENTIFIER		@int@	NOT NULL,
		LIST_ID				@ustring@(50)	NOT NULL,
		VERSION				@int@	NOT NULL,
		LIST_ENTRY_KEY			@ustring@(255)	NOT NULL,
		ENTRY_UPDATE_DATE		@datetime@		NOT NULL,
		LIST_ENTRY_SORTER		@ustring@(255)	NOT NULL,
		IS_DELETED			@tinyint@	NOT NULL,
		ENTRY_TYPE			@ustring@(50)	NULL,
		ENTRY_FIRST_NAME		@ustring@(255)	NULL,
		ENTRY_MIDDLE_NAME		@ustring@(255)	NULL,
		ENTRY_LAST_NAME			@ustring@(255)	NULL,
		ENTRY_FULL_NAME			@ustring@(255)	NULL,
		ENTRY_MAIDEN_NAME		@ustring@(255)	NULL,
		IS_BROKEN			@tinyint@	NULL,
		CITIZENSHIP			@ustring@(255)	NULL,
		DECEASED			@tinyint@	NULL,
		DECEASED_DATE			@datetime@		NULL,
		GENDER				@ustring@(50)	NULL,
		TITLE				@ustring@(255)	NULL,
		POSITION			@ustring@(255)	NULL,
		ALIAS_SET			@clob@		NULL,
		ADDRESS_SET			@clob@		NULL,
		ID_SET				@clob@		NULL,
		NATIONALITY_COUNTRY_SET		@clob@		NULL,
		DATE_OF_BIRTH_SET		@clob@		NULL,
		PLACE_OF_BIRTH_SET		@clob@		NULL,
		KEYWORD_SET			@clob@		NULL,
		CATEGORY_SET			@clob@		NULL,
		ADD_INFO_SET			@clob@		NULL,
		CUSTOM_FIELD_1 		@ustring@(255)   NULL,
		CUSTOM_FIELD_2 		@ustring@(255)   NULL,
		CUSTOM_FIELD_3 		@ustring@(255)   NULL,
		CUSTOM_FIELD_4 		@ustring@(255)   NULL,
		CUSTOM_FIELD_5 		@ustring@(255)   NULL,
		CUSTOM_FIELD_6 		@tinyint@   NULL,
		CUSTOM_FIELD_7 		@tinyint@   NULL,
		CUSTOM_FIELD_8 		@tinyint@   NULL,
		CUSTOM_FIELD_9 		@tinyint@   NULL,
		CUSTOM_FIELD_10 		@tinyint@   NULL,
		CUSTOM_FIELD_11 		@datetime@   NULL,
		CUSTOM_FIELD_12 		@datetime@   NULL,
		CUSTOM_FIELD_13 		@datetime@   NULL,
		CUSTOM_FIELD_14 		@datetime@   NULL,
		CUSTOM_FIELD_15 		@datetime@   NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		CONSTRAINT PK_WLF_ARC_LIST_ENTRIES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Aliases					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES (
		LIST_VERSION_IDENTIFIER		@int@	NOT NULL,
		LIST_ID				@ustring@(50)	NOT NULL,
		VERSION				@int@	NOT NULL,
		LIST_ENTRY_KEY			@ustring@(255)	NOT NULL,
		LIST_ENTRY_ALIAS_ID		@int@	NOT NULL,
		ALIAS_FIRST_NAME		@ustring@(255)	NULL,
		ALIAS_MIDDLE_NAME		@ustring@(255)	NULL,
		ALIAS_LAST_NAME			@ustring@(255)	NULL,
		ALIAS_FULL_NAME			@ustring@(255)	NULL,
		ALIAS_IS_BROKEN			@int@	NULL,
		ALIAS_MATCH_STRENGTH		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES ADD
		CONSTRAINT PK_WLF_ARC_LIST_ALIASES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ALIAS_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Addresses					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDRESSES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_ADDR_ID	@int@	NOT NULL,
		ADDR_STREET		@ustring@(255)	NULL,
		ADDR_STREET2		@ustring@(255)	NULL,
		ADDR_CITY		@ustring@(255)	NULL,
		ADDR_STATE		@ustring@(255)	NULL,
		ADDR_POSTAL_CODE	@ustring@(255)	NULL,
		ADDR_COUNTRY		@ustring@(255)	NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDRESSES ADD
		CONSTRAINT PK_WLF_ARC_LIST_ADDRESSES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ADDR_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List IDs						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_IDS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_ID_ID	@int@	NOT NULL,
		ID_TYPE			@ustring@(255)	NULL,
		ID_NUMBER		@ustring@(255)	NULL,
		ID_COUNTRY		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_IDS ADD
		CONSTRAINT PK_WLF_ARC_LIST_IDS PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ID_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Birthdates					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_BIRTHDATES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_BD_ID	@int@	NOT NULL,
		BIRTHDATE_DOB		@ustring@(255)	NULL,
		BIRTHDATE_YOB		@int@	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_BIRTHDATES ADD
		CONSTRAINT PK_WLF_ARC_LIST_BIRTHDATES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_BD_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Birth Places					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_BIRTHPLACES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_BP_ID	@int@	NOT NULL,
		BIRTHPLACE_COUNTRY	@ustring@(255)	NULL,
		BIRTHPLACE_CITY		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_BIRTHPLACES ADD
		CONSTRAINT PK_WLF_ARC_LIST_BIRTHPLACES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_BP_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Additional Information			*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDINFO (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_AI_ID	@int@	NOT NULL,
		ADDINFO_TYPE		@ustring@(255)	NULL,
		ADDINFO_VALUE		@clob@		NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDINFO ADD
		CONSTRAINT PK_WLF_ARC_LIST_ADDINFO PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_AI_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Keywords					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_KEYWORDS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_KW_ID	@int@	NOT NULL,
		KEYWORD_NAME		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_KEYWORDS ADD
		CONSTRAINT PK_WLF_ARC_LIST_KEYWORDS PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_KW_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Keyword Data					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_KEYWORDS_DATA (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		KEYWORD_NAME		@ustring@(255)	NOT NULL,
		KEYWORD_COUNT		@int@	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_KEYWORDS_DATA ADD
		CONSTRAINT PK_WLF_ARC_KEYWORDS_DATA PRIMARY KEY @nonclustered@
		(
			KEYWORD_NAME,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@




	/* ------------------------------------------------------------ */
	/*  Archive: List Categories					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_CATEGORIES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_CAT_ID	@int@	NOT NULL,
		CATEGORY_NAME		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_CATEGORIES ADD
		CONSTRAINT PK_WLF_ARC_LIST_CATEGORIES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_CAT_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Categories Data				*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_CATEGORIES_DATA (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		CATEGORY_NAME		@ustring@(255)	NOT NULL,
		CATEGORY_COUNT		@int@	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_CATEGORIES_DATA ADD
		CONSTRAINT PK_WLF_ARC_CATEGORIES_DATA PRIMARY KEY @nonclustered@
		(
			CATEGORY_NAME,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  Archive: List Nationality Country				*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_NATIONALITY_CTRY (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_NC_ID	@int@	NOT NULL,
		NATIONALITY_COUNTRY	@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_NATIONALITY_CTRY ADD
		CONSTRAINT PK_WLF_ARC_LIST_NAT_CTRY PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_NC_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@




	/* ---------------------------------------------------------------------------- */
	/*  TEMP Tables									*/
	/* ---------------------------------------------------------------------------- */


	/* ------------------------------------------------------------ */
	/*  TEMP: List Versions						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_VERSIONS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		ENTRY_MIN_UPDATE_DATE	@datetime@		NULL,
		ENTRY_MAX_UPDATE_DATE	@datetime@		NULL,
		LIST_TYPE		@ustring@(50)	NOT NULL,
		IS_ACTIVATED		@tinyint@	NOT NULL,
		IS_DELETED		@tinyint@	NOT NULL,
		STATUS			@tinyint@	NOT NULL,
		LIST_COUNT		@int@	NULL,
		UPDATED_DATE		@datetime@		NULL,
		UPDATED_BY		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_VERSIONS ADD
		CONSTRAINT PK_WLF_TMP_LIST_VERSIONS PRIMARY KEY @nonclustered@
		(
			LIST_VERSION_IDENTIFIER,
			LIST_ID,
			VERSION
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	CREATE INDEX IX_WLF_TMP_LIST_VERSIONS ON @env:lm_schema_name@.WLF_TMP_LIST_VERSIONS(LIST_ID, LIST_TYPE, IS_ACTIVATED)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@



	/* ------------------------------------------------------------ */
	/*  TEMP: List Entries						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES (
		LIST_VERSION_IDENTIFIER		@int@	NOT NULL,
		LIST_ID				@ustring@(50)	NOT NULL,
		VERSION				@int@	NOT NULL,
		LIST_ENTRY_KEY			@ustring@(255)	NOT NULL,
		ENTRY_UPDATE_DATE		@datetime@		NOT NULL,
		LIST_ENTRY_SORTER		@ustring@(255)	NOT NULL,
		IS_DELETED			@tinyint@	NOT NULL,
		ENTRY_TYPE			@ustring@(50)	NULL,
		ENTRY_FIRST_NAME		@ustring@(255)	NULL,
		ENTRY_MIDDLE_NAME		@ustring@(255)	NULL,
		ENTRY_LAST_NAME			@ustring@(255)	NULL,
		ENTRY_FULL_NAME			@ustring@(255)	NULL,
		ENTRY_MAIDEN_NAME		@ustring@(255)	NULL,
		IS_BROKEN			@tinyint@	NULL,
		CITIZENSHIP			@ustring@(255)	NULL,
		DECEASED			@tinyint@	NULL,
		DECEASED_DATE			@datetime@		NULL,
		GENDER				@ustring@(50)	NULL,
		TITLE				@ustring@(255)	NULL,
		POSITION			@ustring@(255)	NULL,
		ALIAS_SET			@clob@		NULL,
		ADDRESS_SET			@clob@		NULL,
		ID_SET				@clob@		NULL,
		NATIONALITY_COUNTRY_SET		@clob@		NULL,
		DATE_OF_BIRTH_SET		@clob@		NULL,
		PLACE_OF_BIRTH_SET		@clob@		NULL,
		KEYWORD_SET			@clob@		NULL,
		CATEGORY_SET			@clob@		NULL,
		ADD_INFO_SET			@clob@		NULL,
		CUSTOM_FIELD_1 		@ustring@(255)   NULL,
		CUSTOM_FIELD_2 		@ustring@(255)   NULL,
		CUSTOM_FIELD_3 		@ustring@(255)   NULL,
		CUSTOM_FIELD_4 		@ustring@(255)   NULL,
		CUSTOM_FIELD_5 		@ustring@(255)   NULL,
		CUSTOM_FIELD_6 		@tinyint@   NULL,
		CUSTOM_FIELD_7 		@tinyint@   NULL,
		CUSTOM_FIELD_8 		@tinyint@   NULL,
		CUSTOM_FIELD_9 		@tinyint@   NULL,
		CUSTOM_FIELD_10 		@tinyint@   NULL,
		CUSTOM_FIELD_11 		@datetime@   NULL,
		CUSTOM_FIELD_12 		@datetime@   NULL,
		CUSTOM_FIELD_13 		@datetime@   NULL,
		CUSTOM_FIELD_14 		@datetime@   NULL,
		CUSTOM_FIELD_15 		@datetime@   NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		CONSTRAINT PK_WLF_TMP_LIST_ENTRIES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	CREATE INDEX IX_WLF_TMP_LIST_ENTRIES ON @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(LIST_VERSION_IDENTIFIER, LIST_ID, LIST_ENTRY_KEY, LIST_ENTRY_SORTER)
	@go@

[oracle
	create index tmp_type_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(upper(ENTRY_TYPE))
	@go@

	create index tmp_key_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(upper(LIST_ENTRY_KEY))
	@go@

	create index tmp_fn_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(upper(ENTRY_FULL_NAME))
	@go@

	create index tmp_cit_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(upper(CITIZENSHIP))
	@go@
]
[mssql
	create index tmp_type_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(ENTRY_TYPE)
	@go@

	create index tmp_key_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(LIST_ENTRY_KEY)
	@go@

	create index tmp_fn_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(ENTRY_FULL_NAME)
	@go@

	create index tmp_cit_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(CITIZENSHIP)
	@go@
]

	/* ------------------------------------------------------------ */
	/*  TEMP: List Aliases						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES (
		LIST_VERSION_IDENTIFIER		@int@	NOT NULL,
		LIST_ID				@ustring@(50)	NOT NULL,
		VERSION				@int@	NOT NULL,
		LIST_ENTRY_KEY			@ustring@(255)	NOT NULL,
		LIST_ENTRY_ALIAS_ID		@int@	NOT NULL,
		ALIAS_FIRST_NAME		@ustring@(255)	NULL,
		ALIAS_MIDDLE_NAME		@ustring@(255)	NULL,
		ALIAS_LAST_NAME			@ustring@(255)	NULL,
		ALIAS_FULL_NAME			@ustring@(255)	NULL,
		ALIAS_IS_BROKEN			@int@	NULL,
		ALIAS_MATCH_STRENGTH		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES ADD
		CONSTRAINT PK_WLF_TMP_LIST_ALIASES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ALIAS_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	create index tmp_alias_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ALIASES(upper(ALIAS_FULL_NAME))
	@go@
]
[mssql
	create index tmp_alias_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ALIASES(ALIAS_FULL_NAME)
	@go@
]

	/* ------------------------------------------------------------ */
	/*  TEMP: List Addresses					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_ADDR_ID	@int@	NOT NULL,
		ADDR_STREET		@ustring@(255)	NULL,
		ADDR_STREET2		@ustring@(255)	NULL,
		ADDR_CITY		@ustring@(255)	NULL,
		ADDR_STATE		@ustring@(255)	NULL,
		ADDR_POSTAL_CODE	@ustring@(255)	NULL,
		ADDR_COUNTRY		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES ADD
		CONSTRAINT PK_WLF_TMP_LIST_ADDRESSES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ADDR_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	create index tmp_addr_st1_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(upper(ADDR_STREET))
	@go@
	create index tmp_addr_st2_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(upper(ADDR_STREET2))
	@go@
	create index tmp_addr_city_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(upper(ADDR_CITY))
	@go@
	create index tmp_addr_st_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(upper(ADDR_STATE))
	@go@
	create index tmp_addr_zip_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(upper(ADDR_POSTAL_CODE))
	@go@
	create index tmp_addr_cty_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(upper(ADDR_COUNTRY))
	@go@
]
[mssql
	create index tmp_addr_st1_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(ADDR_STREET)
	@go@
	create index tmp_addr_st2_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(ADDR_STREET2)
	@go@
	create index tmp_addr_city_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(ADDR_CITY)
	@go@
	create index tmp_addr_st_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(ADDR_STATE)
	@go@
	create index tmp_addr_zip_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(ADDR_POSTAL_CODE)
	@go@
	create index tmp_addr_cty_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(ADDR_COUNTRY)
	@go@
]


	/* ------------------------------------------------------------ */
	/*  TEMP: List IDs						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_IDS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_ID_ID	@int@	NOT NULL,
		ID_TYPE			@ustring@(255)	NULL,
		ID_NUMBER		@ustring@(255)	NULL,
		ID_COUNTRY		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_IDS ADD
		CONSTRAINT PK_WLF_TMP_LIST_IDS PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_ID_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	create index tmp_id_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_IDS(upper(ID_NUMBER))
	@go@

	create index tmp_id_cty_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_IDS(upper(ID_COUNTRY))
	@go@
]
[mssql
	create index tmp_id_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_IDS(ID_NUMBER)
	@go@

	create index tmp_id_cty_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_IDS(ID_COUNTRY)
	@go@
]

	/* ------------------------------------------------------------ */
	/*  TEMP: List Birthdates					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_BIRTHDATES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_BD_ID	@int@	NOT NULL,
		BIRTHDATE_DOB		@ustring@(255)	NULL,
		BIRTHDATE_YOB		@int@	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_BIRTHDATES ADD
		CONSTRAINT PK_WLF_TMP_LIST_BIRTHDATES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_BD_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  TEMP: List Birth Places					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_BIRTHPLACES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_BP_ID	@int@	NOT NULL,
		BIRTHPLACE_COUNTRY	@ustring@(255)	NULL,
		BIRTHPLACE_CITY		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_BIRTHPLACES ADD
		CONSTRAINT PK_WLF_TMP_LIST_BIRTHPLACES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_BP_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	create index tmp_bp_cty_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_BIRTHPLACES(upper(BIRTHPLACE_COUNTRY))
	@go@
]
[mssql
	create index tmp_bp_cty_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_BIRTHPLACES(BIRTHPLACE_COUNTRY)
	@go@
]

	/* ------------------------------------------------------------ */
	/*  TEMP: List Additional Information				*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDINFO (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_AI_ID	@int@	NOT NULL,
		ADDINFO_TYPE		@ustring@(255)	NULL,
		ADDINFO_VALUE		@clob@		NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDINFO ADD
		CONSTRAINT PK_WLF_TMP_LIST_ADDINFO PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_AI_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  TEMP: List Keywords						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_KEYWORDS (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_KW_ID	@int@	NOT NULL,
		KEYWORD_NAME		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_KEYWORDS ADD
		CONSTRAINT PK_WLF_TMP_LIST_KEYWORDS PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_KW_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	create index tmp_kw_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_KEYWORDS(upper(KEYWORD_NAME))
	@go@
]
[mssql
	create index tmp_kw_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_KEYWORDS(KEYWORD_NAME)
	@go@
]

	/* ------------------------------------------------------------ */
	/*  TEMP: List Keyword Data					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_KEYWORDS_DATA (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		KEYWORD_NAME		@ustring@(255)	NOT NULL,
		KEYWORD_COUNT		@int@	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_KEYWORDS_DATA ADD
		CONSTRAINT PK_WLF_TMP_KEYWORDS_DATA PRIMARY KEY @nonclustered@
		(
			KEYWORD_NAME,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@




	/* ------------------------------------------------------------ */
	/*  TEMP: List Categories					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_CAT_ID	@int@	NOT NULL,
		CATEGORY_NAME		@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES ADD
		CONSTRAINT PK_WLF_TMP_LIST_CATEGORIES PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_CAT_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	create index tmp_cat_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES(upper(CATEGORY_NAME))
	@go@
]
[mssql
	create index tmp_cat_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES(CATEGORY_NAME)
	@go@
]

	/* ------------------------------------------------------------ */
	/*  TEMP: List Categories Data					*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_CATEGORIES_DATA (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		CATEGORY_NAME		@ustring@(255)	NOT NULL,
		CATEGORY_COUNT		@int@	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_CATEGORIES_DATA ADD
		CONSTRAINT PK_WLF_TMP_CATEGORIES_DATA PRIMARY KEY @nonclustered@
		(
			CATEGORY_NAME,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  TEMP: List Nationality Country				*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LIST_NATIONALITY_CTRY (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		VERSION			@int@	NOT NULL,
		LIST_ENTRY_KEY		@ustring@(255)	NOT NULL,
		LIST_ENTRY_NC_ID	@int@	NOT NULL,
		NATIONALITY_COUNTRY	@ustring@(255)	NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_NATIONALITY_CTRY ADD
		CONSTRAINT PK_WLF_TMP_LIST_NAT_CTRY PRIMARY KEY @nonclustered@
		(
			LIST_ENTRY_KEY,
			LIST_ENTRY_NC_ID,
			LIST_VERSION_IDENTIFIER
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	create index tmp_nc_cty_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_NATIONALITY_CTRY(upper(NATIONALITY_COUNTRY))
	@go@
]
[mssql
	create index tmp_nc_cty_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_NATIONALITY_CTRY(NATIONALITY_COUNTRY)
	@go@
]
}

version 3.0.1.0 ADD {

	/* ------------------------------------------------------------ */
	/*  ID Types							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_DISPLAY_IDTYPES (
		IDTYPE		@ustring@(255)	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_DISPLAY_IDTYPES ADD
		CONSTRAINT PK_WLF_DISPLAY_IDTYPES PRIMARY KEY @nonclustered@
		(
			IDTYPE
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  Countries							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_DISPLAY_COUNTRIES (
		COUNTRY @ustring@(255)	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_DISPLAY_COUNTRIES ADD
		CONSTRAINT PK_WLF_DISPLAY_COUNTRIES PRIMARY KEY @nonclustered@
		(
			COUNTRY
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  Search Definition MetaData					*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA (
		ID  			@ustring@(255) NOT NULL,
		NAME 			@ustring@(255),
		DESCRIPTION 	@ustring@(1000),
		DISPLAY_ORDER	@int@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA  ADD
		CONSTRAINT PK_WLF_SRCHDEF_METADATA PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  Search Config MetaData					*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA (
		ID  			@ustring@(255) NOT NULL,
		NAME 			@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA  ADD
		CONSTRAINT PK_WLF_SRCHCONF_METADATA PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  Search Definition Business Units				*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_SRCHDEF_BU (
		SRCHDEF_ID		@ustring@(255) NOT NULL,
		BUSINESS_UNIT   @ustring@(255) NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_BU  ADD
		CONSTRAINT PK_WLF_SRCHDEF_BU PRIMARY KEY @nonclustered@
		(
			SRCHDEF_ID,
			BUSINESS_UNIT
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  List Entry Custom Fields					*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_CF(
		FIELD_ID		@ustring@(255) NOT NULL,
		CAPTION			@ustring@(255),
		DISPLAY_ORDER	@int@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_CF  ADD
		CONSTRAINT PK_WLF_LIST_ENTRY_CF PRIMARY KEY @nonclustered@
		(
			FIELD_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  Party Custom Fields						*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_PARTY_FIELDS_CF(
		FIELD_ID		@ustring@(255) NOT NULL,
		CAPTION			@ustring@(255),
		IN_HIGHLIGHTS	@int@,
		DATA_TYPE		@ustring@(20)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_PARTY_FIELDS_CF  ADD
		CONSTRAINT PK_WLF_PARTY_FIELDS_CF PRIMARY KEY @nonclustered@
		(
			FIELD_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  DBQ Table							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.DB_QUEUE(
		QUEUE_TYPE 				@ustring@(50) NOT NULL,
		QUEUE_ITEM_ID 			@ustring@(50) NOT NULL,
		INSERT_TIME_S 			@datetime@ NOT NULL,
		ASSIGNED_PROCESSOR_ID 	@ustring@(50) NULL,
		NUM_TRIES 				@int@ NOT NULL,
		LAST_TRY_TIME_S 		@datetime@ NULL,
		PROCESS_TYPE 			@ustring@(50) NULL,
		QUEUE_ITEM_CONTEXT_1 	@ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_2 	@ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_3 	@ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_4 	@ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_5	@ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_6 	@ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_7 	@ustring@(4000) NULL,
		QUEUE_ITEM_CONTEXT_8 	@ustring@(4000) NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.DB_QUEUE ADD
		CONSTRAINT PK_DB_QUEUE PRIMARY KEY @nonclustered@
		(
			QUEUE_ITEM_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	CREATE INDEX IDX_DB_QUEUE1 ON @env:lm_schema_name@.DB_QUEUE	(
		ASSIGNED_PROCESSOR_ID,
		PROCESS_TYPE,
		NUM_TRIES,
		QUEUE_ITEM_ID,
		INSERT_TIME_S
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  SEARCH LOG TABLE							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_SRCH_LOG(
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		JOB_ID			@ustring@(255) NOT NULL,
		JOB_NAME		@ustring@(255),
		JOB_TIMESTAMP	@datetime@,
		PARTY_KEY		@ustring@(255),
		PARTY_FULL_NAME		@ustring@(255),
		PARTY_IDS		@ustring@(255),
		PARTY_COUNTRIES		@ustring@(255),
		IS_PRE_FILTERED		@tinyint@,
		NUMBER_OF_HITS		@int@,
		IS_ALERT			@tinyint@,
		ACT_ALERT_SCORE		@int@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG ADD
		CONSTRAINT PK_SRCH_LOG PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_SRCH_LOG_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_SRCH_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_SRCH_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_SRCH_LOG_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  SUMMARY LOG TABLE							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG(
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		JOB_ID			@ustring@(255) NOT NULL,
		JOB_NAME		@ustring@(255),
		JOB_TIMESTAMP	@datetime@,
		PARTY_SOURCE	@ustring@(255),
		PARTY_SOURCE_ARGS	@ustring@(512),
		SEARCH_MODE		@ustring@(255),
		REGION  		@ustring@(255),
		BUSINESS_UNIT   @ustring@(255),
		SUPPRESS_HITS	@tinyint@,
		SRCHDEF_ID      @ustring@(255),
		SRCHCONF_ID     @ustring@(255),
		TUNING_CONF_ID  @ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG ADD
		CONSTRAINT PK_SUMMARY_LOG PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_SUMMARY_LOG_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_SUMMARY_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_SUMMARY_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_SUMMARY_LOG_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]
	/* ------------------------------------------------------------ */
	/*  CONF XML HISTORY TABLE							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_CONF_XML_HISTORY(
		CONF_ID			@ustring@(255) NOT NULL,
		CONF_TYPE		@ustring@(255) NOT NULL,
		CONF_TIMESTAMP	@datetime@ NOT NULL,
		XML_DATA    	@clob@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_CONF_XML_HISTORY ADD
		CONSTRAINT PK_CONF_XML_HISTORY PRIMARY KEY @nonclustered@
		(
			CONF_ID, CONF_TYPE, CONF_TIMESTAMP
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_PARTY (
		ID					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		JOB_ID				@ustring@(255),
		PROCESS_DATE		@datetime@,
		PARTY_KEY			@ustring@(255),
		PARTY_TYPE			@ustring@(255),
		PARTY_NAME		@ustring@(255),
		PARTY_DOB			@datetime@,
		PARTY_BIRTH_COUNTRY		@ustring@(255),
		GENDER					@ustring@(20),
		CUSTOM_FIELD1			@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY ADD
		CONSTRAINT PK_RL_PARTY PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_PARTY_SEQ INCREMENT BY 1 START WITH 1
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY ID							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_ID (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@,
		ID_TYPE			@ustring@(255),
		ID_NUMBER		@ustring@(255),
		ID_COUNTRY		@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID ADD
		CONSTRAINT PK_RL_ID PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ID_IX1 on @env:lm_schema_name@.WLF_RL_ID(PARTY_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_ID_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_ID
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_ID FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_ID_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY ALIAS							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_ALIAS (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@,
		ALIAS_FIRST_NAME		@ustring@(255),
		ALIAS_MIDDLE_NAME		@ustring@(255),
		ALIAS_MAIDEN_NAME		@ustring@(255),
		ALIAS_LAST_NAME			@ustring@(255),
		ALIAS_FULL_NAME			@ustring@(2000),
		ALIAS_IS_BROKEN_NAME	@tinyint@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ALIAS ADD
		CONSTRAINT PK_RL_ALIAS PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ALIAS_IX1 on @env:lm_schema_name@.WLF_RL_ALIAS(PARTY_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_ALIAS_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_ALIAS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_ALIAS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_ALIAS_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]
	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY ADDRESS							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_RL_ADDRESS (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@,
		ADDRESS1	@ustring@(255),
		ADDRESS2	@ustring@(255),
		CITY			@ustring@(255),
		ZIP_CODE		@ustring@(255),
		STATE_PROVIDENCE	@ustring@(255),
		COUNTRY				@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS ADD
		CONSTRAINT PK_RL_ADDRESS PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ADDR_IX1 on @env:lm_schema_name@.WLF_RL_ADDRESS(PARTY_ID)
	@go@

[oracle

	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_ADDRESS_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_ADDRESS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_ADDRESS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_ADDRESS_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY NATIONALITY							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@,
		COUNTRY_CODE	@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY ADD
		CONSTRAINT PK_RL_NATIONALITY PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_NAT_IX1 on @env:lm_schema_name@.WLF_RL_NATIONALITY(PARTY_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_NAT_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_NATIONALITY
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_NATIONALITY FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_NAT_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT (
		ID			@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@,
		LIST_ID			@ustring@(255),
		LIST_UPDATE_DATE	@datetime@,
		ENTRY_ID		@ustring@(255),
		ENTRY_UPDATE_DATE	@datetime@,
		TYPE			@ustring@(255),
		NAME			@ustring@(255),
		SCORE			@int@,
		GENDER			@ustring@(10),
		CUSTOM_FIELD1		@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@ustring@(4000),
		CUSTOM_FIELD17		@ustring@(4000),
		CUSTOM_FIELD18		@ustring@(4000)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT ADD
		CONSTRAINT PK_RL_HIT PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_IX1 on @env:lm_schema_name@.WLF_RL_HIT(PARTY_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_SEQ INCREMENT BY 1 START WITH 1
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT CATEGORY							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		CATEGORY	@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY ADD
		CONSTRAINT PK_RL_HIT_CATEGORY PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_CAT_IX1 on @env:lm_schema_name@.WLF_RL_HIT_CATEGORY(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_CAT_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_CATEGORY
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_CATEGORY FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_CAT_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT KEYWORD							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		KEYWORD		@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD ADD
		CONSTRAINT PK_RL_HIT_KEYWORD PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_KEY_IX1 on @env:lm_schema_name@.WLF_RL_HIT_KEYWORD(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_KEY_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_KEYWORD
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_KEYWORD FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_KEY_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]
	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT ALIAS							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		NAME		@ustring@(2000),
		MATCH_STRENGTH		@ustring@(20)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS ADD
		CONSTRAINT PK_RL_HIT_ALIAS PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ALIAS_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ALIAS(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_ALIAS_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ALIAS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_ALIAS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_ALIAS_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT NATIONALITY							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY(
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		COUNTRY		@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY ADD
		CONSTRAINT PK_RL_HIT_NATIONALITY PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_NAT_IX1 on @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_NAT_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
      		 SELECT @env:lm_schema_name@.WLF_RL_HIT_NAT_SEQ.nextval INTO :new.id FROM dual;
      	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT ID							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ID (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		ID_TYPE		@ustring@(255),
		ID_NUMBER	@ustring@(255),
		ID_COUNTRY	@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID ADD
		CONSTRAINT PK_RL_HIT_ID PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ID_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ID(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_ID_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ID
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_ID FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_ID_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT ADDRESS								*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		ADDRESS1		@ustring@(255),
		ADDRESS2		@ustring@(255),
		CITY			@ustring@(255),
		STATE_PROVINCE		@ustring@(255),
		POSTAL_CODE		@ustring@(255),
		COUNTRY			@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS ADD
		CONSTRAINT PK_RL_HIT_ADDRESS PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ADDR_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ADDRESS(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_ADDR_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ADDRESS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_ADDRESS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_ADDR_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT DOB							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		DOB			@ustring@(20),
		YOB			@ustring@(20)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB ADD
		CONSTRAINT PK_RL_HIT_DOB PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_DOB_IX1 on @env:lm_schema_name@.WLF_RL_HIT_DOB(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_DOB_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_DOB
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_DOB FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_DOB_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT POB							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_POB (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		PLACE		@ustring@(255),
		COUNTRY		@ustring@(255)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_POB ADD
		CONSTRAINT PK_RL_HIT_POB PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_POB_IX1 on @env:lm_schema_name@.WLF_RL_HIT_POB(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_POB_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_POB
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_POB FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_POB_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULTS LOG ADD INFO							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@,
		TYPE		@ustring@(255),
		VALUE		@clob@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO ADD
		CONSTRAINT PK_RL_HIT_ADDINFO PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ADDINFO_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ADDINFO(HIT_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ADDINFO
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_ADDINFO FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  APP SEQUENCES FOR RL TABLES							*/
	/* ------------------------------------------------------------ */
	insert into @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('rl_hitID',0)
	@go@
	insert into @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('rl_partyID',0)
	@go@

	/* ------------------------------------------------------------ */
	/*  MODIFY WLF_LIST_ALIASES	COLUMNS TO BE VARCHAR(2000)			*/
	/* ------------------------------------------------------------ */
[oracle
	DROP index entry_alias_upper_idx
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
	@modify@ ALIAS_FIRST_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
	@modify@ ALIAS_MIDDLE_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
	@modify@ ALIAS_LAST_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
	@modify@ ALIAS_FULL_NAME		@ustring@(2000)
	@go@

	create index entry_alias_upper_idx on @env:lm_schema_name@.WLF_LIST_ALIASES(upper(ALIAS_FULL_NAME))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	DROP index tmp_alias_upper_idx
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
	@modify@ ALIAS_FIRST_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
	@modify@ ALIAS_MIDDLE_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
	@modify@ ALIAS_LAST_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
	@modify@ ALIAS_FULL_NAME		@ustring@(2000)
	@go@

	create index tmp_alias_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ALIASES(upper(ALIAS_FULL_NAME))
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
	@modify@ ALIAS_FIRST_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
	@modify@ ALIAS_MIDDLE_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
	@modify@ ALIAS_LAST_NAME		@ustring@(2000)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
	@modify@ ALIAS_FULL_NAME		@ustring@(2000)
	@go@
]
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		CUSTOM_FIELD_16 		@ustring@(4000)   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		CUSTOM_FIELD_17 		@ustring@(4000)   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		CUSTOM_FIELD_18 		@ustring@(4000)   NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		CUSTOM_FIELD_16 		@ustring@(4000)   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		CUSTOM_FIELD_17		@ustring@(4000)   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		CUSTOM_FIELD_18 		@ustring@(4000)   NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		CUSTOM_FIELD_16 		@ustring@(4000)   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		CUSTOM_FIELD_17 		@ustring@(4000)   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		CUSTOM_FIELD_18 		@ustring@(4000)   NULL
	@go@

	/* ------------------------------------------------------------ */
	/*  FILE LAYOUTS												*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_FILE_LAYOUTS (
		ID						@ustring@(255)	NOT NULL,
		DISPLAY_NAME			@ustring@(255)	NOT	NULL,
		IS_VISIBLE				@tinyint@		NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_FILE_LAYOUTS ADD
		CONSTRAINT PK_FILE_LAYOUTS PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE1','File1',1)
	@go@
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE2','File2',1)
	@go@
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE3','File3',1)
	@go@
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE4','File4',1)
	@go@
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE5','File5',1)
	@go@

}

version 3.0.2.0 ADD {

}

version 3.0.2.1 ADD {

	ALTER TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER add
		CONSTRAINT PK_WLF_AUDIT_COUNTER PRIMARY KEY
		(
			ID
		)
	@storage_primary_insert_only @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  ALTER WLF_DELTA_JOB_CONTROL								*/
	/* ------------------------------------------------------------ */

	ALTER TABLE @env:lm_schema_name@.WLF_DELTA_JOB_CONTROL ADD
		INSTANCE_ID 		@ustring@(255) NOT NULL
	@go@

	UPDATE @env:lm_schema_name@.WLF_DELTA_JOB_CONTROL SET INSTANCE_ID = 1 WHERE INSTANCE_ID IS NULL OR INSTANCE_ID = 0
	@go@

	ALTER TABLE  @env:lm_schema_name@.WLF_DELTA_JOB_CONTROL
  	DROP CONSTRAINT PK_WLF_DELTA_JOB_CONTROL
[oracle
  	DROP INDEX
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_DELTA_JOB_CONTROL ADD
		CONSTRAINT PK_WLF_DELTA_JOB_CONTROL PRIMARY KEY @nonclustered@
		(
			JOB_NAME,
			LIST_ID,
			INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  ALTER WLF_JOB_CONTROL								*/
	/* ------------------------------------------------------------ */

	ALTER TABLE @env:lm_schema_name@.WLF_JOB_CONTROL ADD
		INSTANCE_ID 		@ustring@(255) NOT NULL
	@go@

	UPDATE @env:lm_schema_name@.WLF_JOB_CONTROL SET INSTANCE_ID = 1 WHERE INSTANCE_ID IS NULL OR INSTANCE_ID = 0
	@go@

	ALTER TABLE  @env:lm_schema_name@.WLF_JOB_CONTROL
  	DROP CONSTRAINT PK_WLF_JOB_CONTROL
[oracle
  	DROP INDEX
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_JOB_CONTROL ADD
		CONSTRAINT PK_WLF_JOB_CONTROL PRIMARY KEY @nonclustered@
		(
			JOB_NAME,
			RUN_DATE,
			INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  ALTER WLF_SUMMARY_LOG								*/
	/* ------------------------------------------------------------ */

	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG
	DROP CONSTRAINT PK_SUMMARY_LOG
[oracle
	DROP INDEX
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG ADD
		CONSTRAINT PK_SUMMARY_LOG PRIMARY KEY @nonclustered@
		(
			ID, JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  ALTER WLF_JOBS_LOG_DETAILS								*/
	/* ------------------------------------------------------------ */

	ALTER TABLE @env:lm_schema_name@.WLF_JOBS_LOG_DETAILS
	DROP CONSTRAINT PK_WLF_JOBS_LOG_DETAILS
[oracle
	DROP INDEX
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_JOBS_LOG_DETAILS ADD
		CONSTRAINT PK_WLF_JOBS_LOG_DETAILS PRIMARY KEY @nonclustered@
		(
			ID, JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  ALTER WLF_HITS										*/
	/* ------------------------------------------------------------ */

	ALTER TABLE @env:lm_schema_name@.WLF_HITS
	DROP CONSTRAINT PK_WLF_HITS
[oracle
	DROP INDEX
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_HITS ADD
		CONSTRAINT PK_WLF_HITS PRIMARY KEY @nonclustered@
		(
			ID, JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  ALTER WLF_SRCH_LOG										*/
	/* ------------------------------------------------------------ */

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
	DROP CONSTRAINT PK_SRCH_LOG
[oracle
	DROP INDEX
]
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG ADD
		CONSTRAINT PK_SRCH_LOG PRIMARY KEY @nonclustered@
		(
			ID, JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  WLF_DELTA_WIP_LIST_UPDATE_DATE 							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_DELTA_WIP_LIST_UPDATE_DATE (
		ID              @int@ NOT NULL,
		LIST_ID			@ustring@(50)	NOT NULL,
		LASTUPDATE_TIMESTAMP		@datetime@		NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_DELTA_WIP_LIST_UPDATE_DATE ADD
		CONSTRAINT PK_WLF_DELTA_WIP_LU_DATE PRIMARY KEY @nonclustered@
		(
			ID,
			LIST_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  WLF_DELTA_WIP 							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_DELTA_WIP (
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]

		JOB_NAME		@ustring@(255)	NOT NULL,
		JOB_TOKEN		@ustring@(255)	NOT NULL,
		STATUS			@ustring@(255)		NOT NULL,
		TOTAL_SEGMENTS  @int@  NOT NULL,
		SEGMENT_ID      @ustring@(255)   NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_DELTA_WIP ADD
		CONSTRAINT PK_WLF_DELTA_WIP PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_DELTA_WIP_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_DELTA_WIP
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_DELTA_WIP FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_DELTA_WIP_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  Search Config Business Units				*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_SRCHCONF_BU (
		SRCHCONF_ID		@ustring@(255) NOT NULL,
		BUSINESS_UNIT   @ustring@(255) NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_BU  ADD
		CONSTRAINT PK_WLF_SRCHCONF_BU PRIMARY KEY @nonclustered@
		(
			SRCHCONF_ID	,
			BUSINESS_UNIT
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  Plugin Settings	Table										*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_PLUGIN_SETTINGS (
		SETTING_ID		@ustring@(255) NOT NULL,
		MAX_REFRESH_COUNT   @int@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_PLUGIN_SETTINGS ADD
		CONSTRAINT PK_WLF_PLUGIN_SETTINGS PRIMARY KEY @nonclustered@
		(
			SETTING_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	insert into @env:lm_schema_name@.WLF_PLUGIN_SETTINGS (SETTING_ID,MAX_REFRESH_COUNT) values('JOB_MONITOR',50)
	@go@

	/* ------------------------------------------------------------ */
	/*  Add columns To WLF_SUMMARY_LOG Table	    				*/
	/* ------------------------------------------------------------ */
	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG add
		USER_ID		@ustring@(255)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG add
		JOB_TYPE	@ustring@(255)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG add
		NUM_OF_PARTIES @int@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG add
		NUM_OF_HITS @int@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG add
		NUM_OF_ALERTED_PARTIES @int@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG add
		NUM_OF_NON_ALERTED_PARTIES @int@
	@go@

	/* ------------------------------------------------------------ */
	/*  Add Segment ID, Number of Segments To WLF_JOB_CF_DETAILS Table	*/
	/* ------------------------------------------------------------ */
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_CF_DETAILS add
		TOTAL_SEGMENTS  @int@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_CF_DETAILS add
		SEGMENT_ID      @ustring@(255)
	@go@

[oracle

	/* ------------------------------------------------------------ */
	/*  Trigger updates  */
	/* ------------------------------------------------------------ */

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_HITS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_HITS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
  			SELECT @env:lm_schema_name@.SEQ_WLF_HITS.nextval INTO :new.id FROM dual;
  		END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_JOBS_LOG_DET
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_JOBS_LOG_DETAILS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_JOBS_LOG_DET_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_SRCH_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_SRCH_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_SRCH_LOG_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_SUMMARY_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_SUMMARY_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_SUMMARY_LOG_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_ID
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_ID FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_ID_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_ALIAS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_ALIAS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_ALIAS_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_ADDRESS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_ADDRESS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_ADDRESS_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_NATIONALITY
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_NATIONALITY FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_NAT_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_CATEGORY
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_CATEGORY FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_CAT_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_KEYWORD
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_KEYWORD FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_KEY_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ALIAS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_ALIAS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_ALIAS_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
      		 SELECT @env:lm_schema_name@.WLF_RL_HIT_NAT_SEQ.nextval INTO :new.id FROM dual;
      	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ID
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_ID FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_ID_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ADDRESS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_ADDRESS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_ADDR_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_DOB
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_DOB FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_DOB_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_POB
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_POB FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_POB_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ADDINFO
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_HIT_ADDINFO FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]
}

version 3.0.3.0 ADD {

	/* ------------------------------------------------------------ */
	/*  List Visibility Types Table									*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_VISIBILITY_TYPES (
		VISIBILITY_ID @ustring@(1) NOT NULL,
		VISIBILITY_NAME @ustring@(255) NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VISIBILITY_TYPES ADD
		CONSTRAINT PK_WLF_LIST_VISIBILITY_TYPES PRIMARY KEY @nonclustered@
		(
			VISIBILITY_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	insert into @env:lm_schema_name@.WLF_LIST_VISIBILITY_TYPES ( VISIBILITY_ID, VISIBILITY_NAME ) values ( 'P', 'Public')
	@go@
	insert into @env:lm_schema_name@.WLF_LIST_VISIBILITY_TYPES ( VISIBILITY_ID, VISIBILITY_NAME ) values ( 'R', 'Restricted')
	@go@
	insert into @env:lm_schema_name@.WLF_LIST_VISIBILITY_TYPES ( VISIBILITY_ID, VISIBILITY_NAME ) values ( 'C', 'Confidential')
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_DEFINITIONS ADD
		VISIBILITY_ID 		@ustring@(1)  DEFAULT 'P' NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_DEFINITIONS ADD
		BU_NAME		 		@ustring@(4000)   NULL
	@go@

	update @env:lm_schema_name@.WLF_LIST_DEFINITIONS SET VISIBILITY_ID='P';
	@go@

	/* ------------------------------------------------------------ */
	/*  MODIFY DB_QUEUE	TABLE										*/
	/* ------------------------------------------------------------ */

	ALTER TABLE @env:lm_schema_name@.DB_QUEUE ADD
		QUEUE_ITEM_CONTEXT @clob@	NULL
	@go@

[oracle
	declare
		tmp_clob    clob;
		procedure append_text(target in out clob, source in varchar2 )is
		begin
				if(source is not null and length(source) > 0)then
					dbms_lob.writeappend(target, length(source), source);
				end if;
			end;
		begin
			for c in (select QUEUE_ITEM_ID, QUEUE_ITEM_CONTEXT, QUEUE_ITEM_CONTEXT_1, QUEUE_ITEM_CONTEXT_2,
			QUEUE_ITEM_CONTEXT_3, QUEUE_ITEM_CONTEXT_4, QUEUE_ITEM_CONTEXT_5,
			QUEUE_ITEM_CONTEXT_6, QUEUE_ITEM_CONTEXT_7, QUEUE_ITEM_CONTEXT_8
			from @env:lm_schema_name@.DB_QUEUE /*where QUEUE_ITEM_ID is null*/) loop
				begin
					savepoint svp;
					DBMS_LOB.CREATETEMPORARY(tmp_clob, TRUE, DBMS_LOB.SESSION);
					append_text(tmp_clob, c.QUEUE_ITEM_CONTEXT_1);
					append_text(tmp_clob, c.QUEUE_ITEM_CONTEXT_2);
					append_text(tmp_clob, c.QUEUE_ITEM_CONTEXT_3);
					append_text(tmp_clob, c.QUEUE_ITEM_CONTEXT_4);
					append_text(tmp_clob, c.QUEUE_ITEM_CONTEXT_5);
					append_text(tmp_clob, c.QUEUE_ITEM_CONTEXT_6);
					append_text(tmp_clob, c.QUEUE_ITEM_CONTEXT_7);
					append_text(tmp_clob, c.QUEUE_ITEM_CONTEXT_8);
					update @env:lm_schema_name@.DB_QUEUE set QUEUE_ITEM_CONTEXT = tmp_clob where QUEUE_ITEM_ID = c.QUEUE_ITEM_ID;
				exception
					when others then
						rollback to svp;
						dbms_output.put_line('Error processing record with ID: ' ||c.QUEUE_ITEM_ID ||' ; ' ||sqlerrm);
				end;
			end loop;
			commit;
		end;
		/
]

	ALTER TABLE @env:lm_schema_name@.DB_QUEUE
	DROP COLUMN QUEUE_ITEM_CONTEXT_1
	@go@
	ALTER TABLE @env:lm_schema_name@.DB_QUEUE
	DROP COLUMN QUEUE_ITEM_CONTEXT_2
	@go@
	ALTER TABLE @env:lm_schema_name@.DB_QUEUE
	DROP COLUMN QUEUE_ITEM_CONTEXT_3
	@go@
	ALTER TABLE @env:lm_schema_name@.DB_QUEUE
	DROP COLUMN QUEUE_ITEM_CONTEXT_4
	@go@
	ALTER TABLE @env:lm_schema_name@.DB_QUEUE
	DROP COLUMN QUEUE_ITEM_CONTEXT_5
	@go@
	ALTER TABLE @env:lm_schema_name@.DB_QUEUE
	DROP COLUMN QUEUE_ITEM_CONTEXT_6
	@go@
	ALTER TABLE @env:lm_schema_name@.DB_QUEUE
	DROP COLUMN QUEUE_ITEM_CONTEXT_7
	@go@
	ALTER TABLE @env:lm_schema_name@.DB_QUEUE
	DROP COLUMN QUEUE_ITEM_CONTEXT_8
	@go@

}

version 3.0.4.0 ADD {

	insert into @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('LIST_VERSION_IDENTIFIER',0)
	@go@

	UPDATE @env:lm_schema_name@.APP_SEQUENCES SET LATEST_VALUE =
	(SELECT COALESCE(MAX(LIST_VERSION_IDENTIFIER),0) FROM WLF_LIST_VERSIONS)
	WHERE SEQUENCE_ID = 'LIST_VERSION_IDENTIFIER'

	@go@

	insert into @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('ssbId',0)
	@go@

	/* ------------------------------------------------------------ */
	/*  Translations Table											*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_TRANSLATIONS (
		TR_KEY			@ustring@(200) NOT NULL,
		TR_SEGMENT  	@ustring@(200),
		TR_DESC			@ustring@(500),
		TR_DEFAULT_TEXT	@ustring@(500),
		TR_LOCAL_TEXT	@ustring@(500)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TRANSLATIONS ADD
		CONSTRAINT PK_WLF_TRANLATIONS PRIMARY KEY @nonclustered@
		(
			TR_KEY
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle

	UPDATE @env:lm_schema_name@.APP_SEQUENCES SET LATEST_VALUE =
	(select coalesce(max(to_number(substr(unique_id, 5))),0) from WLF_SELF_SERVICE_STAGING)
	WHERE SEQUENCE_ID = 'ssbId'
	@go@
]
[mssql
	DROP index WLF_TMP_LIST_ENTRIES.IX_WLF_TMP_LIST_ENTRIES
	@go@

	DROP index WLF_TMP_LIST_ENTRIES.tmp_type_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ENTRIES.tmp_key_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ENTRIES.tmp_fn_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ENTRIES.tmp_cit_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ALIASES.tmp_alias_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ADDRESSES.tmp_addr_st1_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ADDRESSES.tmp_addr_st2_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ADDRESSES.tmp_addr_city_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ADDRESSES.tmp_addr_st_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ADDRESSES.tmp_addr_zip_upper_idx
	@go@

	DROP index WLF_TMP_LIST_ADDRESSES.tmp_addr_cty_upper_idx
	@go@

	DROP index WLF_TMP_LIST_IDS.tmp_id_upper_idx
	@go@

	DROP index WLF_TMP_LIST_IDS.tmp_id_cty_upper_idx
	@go@

	DROP index WLF_TMP_LIST_BIRTHPLACES.tmp_bp_cty_upper_idx
	@go@

	DROP index WLF_TMP_LIST_KEYWORDS.tmp_kw_upper_idx
	@go@

	DROP index WLF_TMP_LIST_CATEGORIES.tmp_cat_upper_idx
	@go@

	DROP index WLF_TMP_LIST_NATIONALITY_CTRY.tmp_nc_cty_upper_idx
	@go@

	UPDATE @env:lm_schema_name@.APP_SEQUENCES SET LATEST_VALUE =
	(select coalesce(max(convert(int,substring(UNIQUE_ID, 5, len(UNIQUE_ID)-4))),0) from WLF_SELF_SERVICE_STAGING)
	WHERE SEQUENCE_ID = 'ssbId'
	@go@
]

[oracle
	begin
	execute immediate ('DROP INDEX IX_WLF_HITS_HASH_KEY');
	exception
	when others then
	null;
	end;
	@go@
]
	CREATE INDEX IX_WLF_HITS_HASH_KEY ON @env:lm_schema_name@.WLF_HITS(HIT_HASH_KEY)
	@go@

[oracle
	begin
	execute immediate ('DROP INDEX IX_WLF_HITS_ALERT_ID');
	exception
	when others then
	null;
	end;
	@go@
]
	CREATE INDEX IX_WLF_HITS_ALERT_ID ON @env:lm_schema_name@.WLF_HITS(ALERT_ID)
	@go@


	/* ------------------------------------------------------------ */
	/*  MODIFY WLF_LIST_ALIASES	COLUMNS BACK TO VARCHAR(255)		*/
	/* ------------------------------------------------------------ */
[oracle
	DROP index entry_alias_upper_idx
	@go@

	DROP index tmp_alias_upper_idx
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
	@modify@ ALIAS_FIRST_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
	@modify@ ALIAS_MIDDLE_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
	@modify@ ALIAS_LAST_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
	@modify@ ALIAS_FULL_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
	@modify@ ALIAS_FIRST_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
	@modify@ ALIAS_MIDDLE_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
	@modify@ ALIAS_LAST_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
	@modify@ ALIAS_FULL_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
	@modify@ ALIAS_FIRST_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
	@modify@ ALIAS_MIDDLE_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
	@modify@ ALIAS_LAST_NAME		@ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
	@modify@ ALIAS_FULL_NAME		@ustring@(255)
	@go@

	create index entry_alias_upper_idx on @env:lm_schema_name@.WLF_LIST_ALIASES(upper(ALIAS_FULL_NAME))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index tmp_alias_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ALIASES(upper(ALIAS_FULL_NAME))
	@go@


]
}
version 3.1.0.0 ADD {
	/* ------------------------------------------------------------ */
	/*  3.0.3.1 users with SR 70976 will already have this index.  No need to be concerned if an 'already exists' error is generated.	*/
	/* ------------------------------------------------------------ */

[oracle
	begin
	execute immediate ('DROP INDEX IX_DB_QUEUE_TIME');
	exception
	when others then
	null;
	end;
	@go@
]
	CREATE  INDEX IX_DB_QUEUE_TIME ON @env:lm_schema_name@.DB_QUEUE(INSERT_TIME_S)
	@go@
}
version 3.1.0.1 ADD{
	/* ------------------------------------------------------------ */
	/*  MESSAGE SUMMARY LOG TABLE									*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG(
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		JOB_ID			@ustring@(255) NOT NULL,
		JOB_NAME		@ustring@(255),
		JOB_TIMESTAMP	@datetime@,
		REGION	@ustring@(255),
		BUSINESS_UNIT	@ustring@(255),
		FILTER_DUPLICATE_MESSAGES	@tinyint@,
		SRCHDEFID	@ustring@(255),
		USER_ID	@ustring@(255),
		JOB_TYPE	@ustring@(255),
		NUM_OF_MESSAGES	@int@,
		NUM_OF_HITS	@int@,
		NUM_OF_ALERTED_MESSAGES	@int@,
		NUM_OF_NON_ALERTED_MESSAGES	@int@,
		NUM_OF_HELD_MESSAGES	@int@,
		NUM_OF_NON_HELD_MESSAGES	@int@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG ADD
		CONSTRAINT PK_MESSAGE_SUMMARY_LOG PRIMARY KEY @nonclustered@
		(
			ID,
			JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_MESSAGE_SUMMARY_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  MESSAGE SEARCH LOG TABLE									*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG(
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		JOB_ID			@ustring@(255) NOT NULL,
		JOB_NAME		@ustring@(255),
		JOB_TIMESTAMP	@datetime@,
		MESSAGE_KEY		@ustring@(255),
		MESSAGE_INSTANCE_NUMBER	@int@,
		MESSAGE_NAMES	@clob@,
		MESSAGE_IDS		@clob@,
		MESSAGE_COUNTRIES	@clob@,
		MESSAGE_TEXT	@clob@,
		NUMBER_OF_HITS	@int@,
		IS_ALERT		@tinyint@,
		ACT_ALERT_SCORE	@int@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG ADD
		CONSTRAINT PK_MESSAGE_SEARCH_LOG PRIMARY KEY @nonclustered@
		(
			ID,
			JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_MESSAGE_SEARCH_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG_SEQ .nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULT LOG MESSAGE TABLE									*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE (
		ID					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		JOB_ID				@ustring@(255),
		JOB_TIMESTAMP		@datetime@,
		PARTY_KEY			@ustring@(255),
		MESSAGE_KEY			@ustring@(255),
		MESSAGE_INSTANCE_NUMBER	@int@,
		MESSAGE_REF_NUMBER	@int@,
		MESSAGE_SOURCE_TYPE	@ustring@(255),
		MESSAGE_TYPE_CD		@ustring@(255),
		MESSAGE_DATE_TIME	@datetime@,
		AMOUNT				@float@,
		CURRENCY_CD			@ustring@(255),
		PRODUCT_KEY			@ustring@(255),
		MESSAGE_DIRECTION	@ustring@(255),
		MESSAGE_INSTRUCTIONS	@clob@,
		ADDITIONAL_MESSAGE_TEXT @clob@,
		MESSAGE_TEXT		@clob@,
		ORIGINATOR_NAME		@ustring@(500),
		ORIGINATOR_PARTY_IDS		@clob@,
		ORIGINATOR_ADDRESS_LINE_1	@ustring@(500),
		ORIGINATOR_ADDRESS_LINE_2	@ustring@(500),
		ORIGINATOR_ADDRESS_LINE_3	@ustring@(500),
		ORIGINATOR_CITY		@ustring@(255),
		ORIGINATOR_COUNTRY_CD		@ustring@(255),
		ORIGINATOR_PARTY_TYPE_CD	@ustring@(255),
		ORIGINATOR_PO_BOX	@ustring@(255),
		ORIGINATOR_STATE_PROVINCE	@ustring@(255),
		ORIGINATOR_ZIP_CD	@ustring@(255),
		ORIGINATOR_ADDITIONAL_INFO @clob@,
		ORIGINATING_FI_CD	@ustring@(255),
		ORIGINATING_FI_COUNTRY_CD	@ustring@(255),
		ORIGINATING_FI_ORG_NAME		@ustring@(500),
		BENEFICIARY_PRIMARY_NAME	@ustring@(500),
		BENEFICIARY_PARTY_IDS		@clob@,
		BENEFICIARY_ADDRESS_LINE_1	@ustring@(500),
		BENEFICIARY_ADDRESS_LINE_2	@ustring@(500),
		BENEFICIARY_ADDRESS_LINE_3	@ustring@(500),
		BENEFICIARY_PO_BOX		@ustring@(255),
		BENEFICIARY_CITY		@ustring@(255),
		BENEFICIARY_STATE_PROVINCE	@ustring@(255),
		BENEFICIARY_ZIP_CD		@ustring@(255),
		BENEFICIARY_COUNTRY_CD		@ustring@(255),
		BENEFICIARY_ADDITIONAL_INFO	@clob@,
		BENEFICIARY_FI_ORG_NAME		@ustring@(500),
		BENEFICIARY_FI_CD		@ustring@(255),
		BENEFICIARY_FI_PARTY_TYPE_CD	@ustring@(255),
		BENEFICIARY_FI_COUNTRY_CD	@ustring@(255),
		RECEIVING_FI_ADDITIONAL_INFO	@clob@,
		RECEIVING_FI_CD		@ustring@(255),
		RECEIVING_FI_COUNTRY_CD		@ustring@(255),
		RECEIVING_FI_ORGANIZATION_NAME		@ustring@(500),
		SENDING_FI_ADDITIONAL_INFO	@clob@,
		SENDING_FI_CD		@ustring@(255),
		SENDING_FI_COUNTRY_CD		@ustring@(255),
		SENDING_FI_ORGANIZATION_NAME		@ustring@(500),
		FI_TO_FI_INFO		@clob@,
		CUSTOM_FIELD1		@ustring@(500),
		CUSTOM_FIELD2		@ustring@(500),
		CUSTOM_FIELD3		@ustring@(500),
		CUSTOM_FIELD4		@ustring@(500),
		CUSTOM_FIELD5		@ustring@(500),
		CUSTOM_FIELD6		@ustring@(500),
		CUSTOM_FIELD7		@ustring@(500),
		CUSTOM_FIELD8		@ustring@(500),
		CUSTOM_FIELD9		@ustring@(500),
		CUSTOM_FIELD10		@ustring@(500),
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@tinyint@,
		CUSTOM_FIELD17		@tinyint@,
		CUSTOM_FIELD18		@tinyint@,
		CUSTOM_FIELD19		@tinyint@,
		CUSTOM_FIELD20		@tinyint@
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE ADD
		CONSTRAINT PK_RL_MESSAGE PRIMARY KEY @nonclustered@
		(
			ID,
			INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_MESSAGE_SEQ INCREMENT BY 1 START WITH 1
	@go@
]

	/* ------------------------------------------------------------ */
	/*  WLF_RL_MESSAGE_INTERMEDIATE_FI								*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI(
[mssql
		ID @int@ IDENTITY (1,1) NOT NULL,
]
[oracle
		ID @int@ NOT NULL,
]
		INSTANCE_ID			@ustring@(255) NOT NULL,
		WLF_RL_MESSAGE_ID	@int@ NOT NULL,
		FI_CODE				@ustring@(255),
		FI_COUNTRY_CODE		@ustring@(255),
		FI_NAME				@ustring@(500)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI ADD
		CONSTRAINT PK_WLF_RL_MSG_INTERMEDIATE_FI PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI ADD
		CONSTRAINT FK_WLF_RL_MSG_INTERMEDIATE_FI
		FOREIGN KEY (WLF_RL_MESSAGE_ID, INSTANCE_ID)
		REFERENCES @env:lm_schema_name@.WLF_RL_MESSAGE(ID, INSTANCE_ID)
	@go@
[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_MSG_INTERMEDIATE_FI_SEQ INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_RL_MSG_INTERMEDIATE_FI_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  RESULT LOG MESSAGE HIT TABLE 								*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT (
		ID			@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		WLF_RL_MESSAGE_ID	@int@ NOT NULL,
		LIST_ID			@ustring@(255),
		LIST_UPDATE_DATE	@datetime@,
		ENTRY_ID		@ustring@(255),
		ENTRY_UPDATE_DATE	@datetime@,
		TYPE			@ustring@(255),
		NAME			@ustring@(255),
		SCORE			@int@,
		GENDER			@ustring@(10),
		CUSTOM_FIELD1		@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@ustring@(4000),
		CUSTOM_FIELD17		@ustring@(4000),
		CUSTOM_FIELD18		@ustring@(4000)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT ADD
		CONSTRAINT PK_RL_MESSAGE_HIT PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_MESSAGE_HIT_IX1 on @env:lm_schema_name@.WLF_RL_MESSAGE_HIT(WLF_RL_MESSAGE_ID)
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_SEQ INCREMENT BY 1 START WITH 1
	@go@
]

	/* ------------------------------------------------------------ */
	/*  WLF_MESSAGE_HITS											*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_MESSAGE_HITS 	(
[mssql
		ID @int@ 		IDENTITY (1,1) NOT NULL,
]
[oracle
  		ID 				@int@	NOT NULL,
]
		JOB_ID 			@ustring@(255)	NOT NULL,
		MESSAGE_HASH_KEY 	@ustring@(255),
		HIT_TIMESTAMP 	@datetime@,
		MESSAGE_KEY 		@ustring@(255),
		MESSAGE_INSTANCE_NUMBER		@int@,
		LIST_ID 		@ustring@(50),
		LIST_ENTRY_ID 	@ustring@(255),
		ALERT_ID 		@ustring@(50)
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_HITS ADD
		CONSTRAINT PK_WLF_MESSAGE_HITS PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle
	CREATE SEQUENCE @env:lm_schema_name@.SEQ_WLF_MESSAGE_HITS INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_MESSAGE_HITS
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_MESSAGE_HITS FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
  			SELECT @env:lm_schema_name@.SEQ_WLF_MESSAGE_HITS.nextval INTO :new.id FROM dual;
  		END IF;
  	END;
	@go@
]

	/* ------------------------------------------------------------ */
	/*  APP SEQUENCES FOR MSG RL TABLES									*/
	/* ------------------------------------------------------------ */
	insert into @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('rl_messageId',0)
	@go@
	insert into @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('rl_messageHitId',0)
	@go@


	/* ------------------------------------------------------------ */
	/*  JOB_MS_DETAILS							*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_JOB_MS_DETAILS (
		JOB_ID			@ustring@(255)	NOT NULL,
		BUSINESS_UNIT		@ustring@(255)		NULL,
		SEARCH_DEF_ID		@ustring@(255)	NULL,
		SEARCH_DEF_NAME		@ustring@(255)	NULL,
		FILTER_DUPLICATES  @int@ NOT NULL,
		GENERATE_ALERTS  @int@ NOT NULL,
		GENERATE_TUNING_LOG @int@ NOT NULL,
		INPUT_FILENAME @ustring@(255) NULL,
		REGION @ustring@(255) NULL,
		NUMBER_OF_THREADS @int@ NOT NULL,
		ALERTED_COUNT @int@ NOT NULL,
		TOTAL_COUNT @int@ NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_MS_DETAILS ADD
		CONSTRAINT PK_WLF_JOB_MS_DETAILS PRIMARY KEY @nonclustered@
		(
			JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  73071 - more partyChannel sources							*/
	/* ------------------------------------------------------------ */
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE6','File6',1)
	@go@
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE7','File7',1)
	@go@
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE8','File8',1)
	@go@
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE9','File9',1)
	@go@
	insert into @env:lm_schema_name@.WLF_FILE_LAYOUTS (ID,DISPLAY_NAME, IS_VISIBLE) values('FILE10','File10',1)
	@go@

}
version 3.1.2 ADD {
	/* ------------------------------------------------------------ */
	/*  ALTER WLF_MESSAGE_HITS										*/
	/* ------------------------------------------------------------ */

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_HITS
	DROP CONSTRAINT PK_WLF_MESSAGE_HITS
[oracle
	DROP INDEX
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_HITS ADD
		CONSTRAINT PK_WLF_MESSAGE_HITS PRIMARY KEY @nonclustered@
		(
			ID, JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT
	ADD HIT_DATA_ENTERED @datetime@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT
	ADD DATE_OF_DEATH @datetime@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT
	ADD TITLE @ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT
	ADD POSITION @ustring@(255)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT
	ADD HIT_ENTRY_TYPE @ustring@(50)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY
	ADD	CUSTOM_FIELD16 @ustring@(4000)   NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY
	ADD CUSTOM_FIELD17 @ustring@(4000)   NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY
	ADD CUSTOM_FIELD18 @ustring@(4000)   NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES
	ADD ENTRY_CREATED_DATE @datetime@   NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES
	ADD ENTRY_CREATED_DATE @datetime@   NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES
	ADD ENTRY_CREATED_DATE @datetime@   NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_JOBS
	ADD BUSINESS_UNIT_ID @ustring@(255)   NULL
	@go@
}
version 3.1.3 ADD {
}
version 3.2.0 ADD {

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_DEFINITIONS ADD
		REQUIRES_REVIEW 		@tinyint@  DEFAULT 0 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS ADD
		DRAFT_STATUS 		@ustring@(25) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS ADD
		LISTID_DRAFT 		@ustring@(100) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS ADD
		DRAFT_OPENED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS ADD
		DRAFT_OPENED_BY 		@ustring@(255) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS ADD
		REVIEW_OPENED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSIONS ADD
		REVIEW_OPENED_BY 		@ustring@(255) NULL
	@go@

	create unique index IX_WLF_LIST_VERSIONS_DRAFT on @env:lm_schema_name@.WLF_LIST_VERSIONS(LISTID_DRAFT)
[mssql
    WHERE LISTID_DRAFT IS NOT NULL
]
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		LAST_EDITED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		LAST_EDITED_BY 		@ustring@(255) NULL
	@go@

[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		IS_NEW 		@tinyint@  DEFAULT 0
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES MODIFY
		IS_NEW 		NOT NULL
]
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		IS_NEW 		@tinyint@  NOT NULL DEFAULT 0
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		REVIEW_STATUS 		@ustring@(25) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		LAST_REVIEWED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
		LAST_REVIEWED_BY 		@ustring@(255) NULL
	@go@

	create index WLF_LIST_ENTRIES_IX1 on @env:lm_schema_name@.WLF_LIST_ENTRIES(REVIEW_STATUS)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

	create index WLF_LIST_ENTRIES_IX2 on @env:lm_schema_name@.WLF_LIST_ENTRIES(LAST_EDITED_BY)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSIONS ADD
		DRAFT_STATUS 		@ustring@(25) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSIONS ADD
		DRAFT_OPENED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSIONS ADD
		DRAFT_OPENED_BY 		@ustring@(255) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSIONS ADD
		REVIEW_OPENED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSIONS ADD
		REVIEW_OPENED_BY 		@ustring@(255) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		LAST_EDITED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		LAST_EDITED_BY 		@ustring@(255) NULL
	@go@

[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		IS_NEW 		@tinyint@  DEFAULT 0
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES MODIFY
		IS_NEW 		NOT NULL
]
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		IS_NEW 		@tinyint@  NOT NULL DEFAULT 0
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		REVIEW_STATUS 		@ustring@(25) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		LAST_REVIEWED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
		LAST_REVIEWED_BY 		@ustring@(255) NULL
	@go@

[oracle
	create index WLF_TMP_LIST_ENTRIES_IX1 on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(REVIEW_STATUS)
	@go@

	create index WLF_TMP_LIST_ENTRIES_IX2 on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(LAST_EDITED_BY)
	@go@
]

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		LAST_EDITED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		LAST_EDITED_BY 		@ustring@(255) NULL
	@go@

[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		IS_NEW 		@tinyint@  DEFAULT 0
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES MODIFY
		IS_NEW 		NOT NULL
]
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		IS_NEW 		@tinyint@  NOT NULL DEFAULT 0
]
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		REVIEW_STATUS 		@ustring@(25) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		LAST_REVIEWED_DATE 		@datetime@ NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		LAST_REVIEWED_BY 		@ustring@(255) NULL
	@go@

	/* ------------------------------------------------------------ */
	/*  List Version Notes						*/
	/* ------------------------------------------------------------ */
	CREATE TABLE @env:lm_schema_name@.WLF_LIST_VERSION_NOTES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_VERSION_NOTES_ID		@int@	NOT NULL,
		NOTE_UPDATED_DATE	@datetime@		NOT NULL,
		NOTE_UPDATED_BY 	@ustring@(255)	NOT NULL,
		NOTE_TEXT 			@clob@	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_VERSION_NOTES ADD
		CONSTRAINT PK_WLF_LIST_VERSION_NOTES PRIMARY KEY @nonclustered@
		(
			LIST_VERSION_IDENTIFIER,
			LIST_VERSION_NOTES_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSION_NOTES (
		LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
		LIST_VERSION_NOTES_ID		@int@	NOT NULL,
		NOTE_UPDATED_DATE	@datetime@		NOT NULL,
		NOTE_UPDATED_BY 	@ustring@(255)	NOT NULL,
		NOTE_TEXT 			@clob@	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_VERSION_NOTES ADD
		CONSTRAINT PK_WLF_ARC_LIST_VERSION_NOTES PRIMARY KEY @nonclustered@
		(
			LIST_VERSION_IDENTIFIER,
			LIST_VERSION_NOTES_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  List Editing Countries							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_COUNTRIES (
		COUNTRY @ustring@(255)	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_COUNTRIES ADD
		CONSTRAINT PK_WLF_LIST_ENTRY_COUNTRIES PRIMARY KEY @nonclustered@
		(
			COUNTRY
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  List Editing ID Types							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_ID_TYPES (
		IDTYPE @ustring@(255)	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_ID_TYPES ADD
		CONSTRAINT PK_WLF_LIST_ENTRY_ID_TYPES PRIMARY KEY @nonclustered@
		(
			IDTYPE
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  List Editing Keywords							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_KEYWORDS (
		KEYWORD @ustring@(255)	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_KEYWORDS ADD
		CONSTRAINT PK_WLF_LIST_ENTRY_KEYWORDS PRIMARY KEY @nonclustered@
		(
			KEYWORD
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  List Editing Categories							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_CATEGORIES (
		CATEGORY @ustring@(255)	NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRY_CATEGORIES ADD
		CONSTRAINT PK_WLF_LIST_ENTRY_CATEGORIES PRIMARY KEY @nonclustered@
		(
			CATEGORY
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	/* ------------------------------------------------------------ */
	/*  List Editing Configuration							*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_LIST_EDITING_CONF (
		CONF_KEY @ustring@(255)	NOT NULL,
		CONF_VALUE @ustring@(255) NOT NULL
	)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_EDITING_CONF ADD
		CONSTRAINT PK_WLF_LIST_EDITING_CONF PRIMARY KEY @nonclustered@
		(
			CONF_KEY
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	insert into @env:lm_schema_name@.WLF_LIST_EDITING_CONF (CONF_KEY,CONF_VALUE) values('REVIEW_TYPE','FOUR_EYES')
	@go@
	insert into @env:lm_schema_name@.WLF_LIST_EDITING_CONF (CONF_KEY,CONF_VALUE) values('DATE_FORMAT','dd/MM/yyyy')
	@go@

	/* ------------------------------------------------------------ */
	/*  Adjustments to allow bulk audit load                                    */
	/* ------------------------------------------------------------ */

[oracle
	alter table @env:lm_schema_name@.WLF_RL_ADDRESS drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_ADDRESS add primary key (ID, INSTANCE_ID, PARTY_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_ADDRESS
	@go@

	alter table @env:lm_schema_name@.WLF_RL_ALIAS drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_ALIAS add primary key (ID, INSTANCE_ID, PARTY_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_ALIAS
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_ADDINFO drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_ADDINFO add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ADDINFO
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_ADDRESS drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_ADDRESS add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ADDRESS
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_ALIAS drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_ALIAS add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ALIAS
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_CATEGORY drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_CATEGORY add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_CATEGORY
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_DOB drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_DOB add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_DOB
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_ID drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_ID add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_ID
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_KEYWORD drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_KEYWORD add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_KEYWORD
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_POB drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_HIT_POB add primary key (ID, INSTANCE_ID, HIT_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_HIT_POB
	@go@

	alter table @env:lm_schema_name@.WLF_RL_ID drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_ID add primary key (ID, INSTANCE_ID, PARTY_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_ID
	@go@

	alter table @env:lm_schema_name@.WLF_RL_NATIONALITY drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_NATIONALITY add primary key (ID, INSTANCE_ID, PARTY_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_NATIONALITY
	@go@

	alter table @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI drop primary key
	@go@
	alter table @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI add primary key (ID, INSTANCE_ID, WLF_RL_MESSAGE_ID)
	@go@
	drop TRIGGER @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI
	@go@
]
[mssql
	alter table @env:lm_schema_name@.WLF_RL_ADDRESS drop constraint PK_RL_ADDRESS
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_ADDRESS2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		ADDRESS1	@ustring@(255),
		ADDRESS2	@ustring@(255),
		CITY			@ustring@(255),
		ZIP_CODE		@ustring@(255),
		STATE_PROVIDENCE	@ustring@(255),
		COUNTRY				@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS2 ADD
	CONSTRAINT PK_RL_ADDRESS PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,PARTY_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_ADDRESS)
       INSERT INTO @env:lm_schema_name@.WLF_RL_ADDRESS2 (ID, INSTANCE_ID, PARTY_ID, ADDRESS1, ADDRESS2, CITY, ZIP_CODE, STATE_PROVIDENCE, COUNTRY)
          SELECT ID, INSTANCE_ID, PARTY_ID, ADDRESS1, ADDRESS2, CITY, ZIP_CODE, STATE_PROVIDENCE, COUNTRY FROM @env:lm_schema_name@.WLF_RL_ADDRESS
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_ADDRESS
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_ADDRESS2', 'WLF_RL_ADDRESS'
	@go@
	create index WLF_RL_ADDR_IX1 on @env:lm_schema_name@.WLF_RL_ADDRESS(PARTY_ID)
	@go@


	alter table @env:lm_schema_name@.WLF_RL_ALIAS drop constraint PK_RL_ALIAS
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_ALIAS2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		ALIAS_FIRST_NAME		@ustring@(255),
		ALIAS_MIDDLE_NAME		@ustring@(255),
		ALIAS_MAIDEN_NAME		@ustring@(255),
		ALIAS_LAST_NAME			@ustring@(255),
		ALIAS_FULL_NAME			@ustring@(2000),
		ALIAS_IS_BROKEN_NAME	@tinyint@
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ALIAS2 ADD
	CONSTRAINT PK_RL_ALIAS PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,PARTY_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_ALIAS)
       INSERT INTO @env:lm_schema_name@.WLF_RL_ALIAS2 (ID, INSTANCE_ID, PARTY_ID, ALIAS_FIRST_NAME, ALIAS_MIDDLE_NAME, ALIAS_MAIDEN_NAME, ALIAS_LAST_NAME, ALIAS_FULL_NAME, ALIAS_IS_BROKEN_NAME)
          SELECT ID, INSTANCE_ID, PARTY_ID, ALIAS_FIRST_NAME, ALIAS_MIDDLE_NAME, ALIAS_MAIDEN_NAME, ALIAS_LAST_NAME, ALIAS_FULL_NAME, ALIAS_IS_BROKEN_NAME FROM @env:lm_schema_name@.WLF_RL_ALIAS
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_ALIAS
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_ALIAS2', 'WLF_RL_ALIAS'
	@go@
	create index WLF_RL_ALIAS_IX1 on @env:lm_schema_name@.WLF_RL_ALIAS(PARTY_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_ADDINFO drop constraint PK_RL_HIT_ADDINFO
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		TYPE		@ustring@(255),
		VALUE		@clob@
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO2 ADD
	CONSTRAINT PK_RL_HIT_ADDINFO PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_ADDINFO)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_ADDINFO2 (ID, INSTANCE_ID, HIT_ID, TYPE, VALUE)
          SELECT ID, INSTANCE_ID, HIT_ID, TYPE, VALUE FROM @env:lm_schema_name@.WLF_RL_HIT_ADDINFO
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_ADDINFO2', 'WLF_RL_HIT_ADDINFO'
	@go@
	create index WLF_RL_HIT_ADDINFO_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ADDINFO(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_ADDRESS drop constraint PK_RL_HIT_ADDRESS
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		ADDRESS1		@ustring@(255),
		ADDRESS2		@ustring@(255),
		CITY			@ustring@(255),
		STATE_PROVINCE		@ustring@(255),
		POSTAL_CODE		@ustring@(255),
		COUNTRY			@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS2 ADD
	CONSTRAINT PK_RL_HIT_ADDRESS PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_ADDRESS)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_ADDRESS2 (ID, INSTANCE_ID, HIT_ID, ADDRESS1, ADDRESS2, CITY, STATE_PROVINCE, POSTAL_CODE, COUNTRY)
          SELECT ID, INSTANCE_ID, HIT_ID, ADDRESS1, ADDRESS2, CITY, STATE_PROVINCE, POSTAL_CODE, COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_ADDRESS
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_ADDRESS2', 'WLF_RL_HIT_ADDRESS'
	@go@
	create index WLF_RL_HIT_ADDR_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ADDRESS(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_ALIAS drop constraint PK_RL_HIT_ALIAS
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		NAME		@ustring@(2000),
		MATCH_STRENGTH		@ustring@(20)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS2 ADD
	CONSTRAINT PK_RL_HIT_ALIAS PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_ALIAS)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_ALIAS2 (ID, INSTANCE_ID, HIT_ID, NAME, MATCH_STRENGTH)
          SELECT ID, INSTANCE_ID, HIT_ID, NAME, MATCH_STRENGTH FROM @env:lm_schema_name@.WLF_RL_HIT_ALIAS
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_ALIAS2', 'WLF_RL_HIT_ALIAS'
	@go@
	create index WLF_RL_HIT_ALIAS_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ALIAS(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_CATEGORY drop constraint PK_RL_HIT_CATEGORY
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		CATEGORY	@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY2 ADD
	CONSTRAINT PK_RL_HIT_CATEGORY PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_CATEGORY)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_CATEGORY2 (ID, INSTANCE_ID, HIT_ID, CATEGORY)
          SELECT ID, INSTANCE_ID, HIT_ID, CATEGORY FROM @env:lm_schema_name@.WLF_RL_HIT_CATEGORY
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_CATEGORY2', 'WLF_RL_HIT_CATEGORY'
	@go@
	create index WLF_RL_HIT_CAT_IX1 on @env:lm_schema_name@.WLF_RL_HIT_CATEGORY(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_DOB drop constraint PK_RL_HIT_DOB
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		DOB			@ustring@(20),
		YOB			@ustring@(20)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB2 ADD
	CONSTRAINT PK_RL_HIT_DOB PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_DOB)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_DOB2 (ID, INSTANCE_ID, HIT_ID, DOB, YOB)
          SELECT ID, INSTANCE_ID, HIT_ID, DOB, YOB FROM @env:lm_schema_name@.WLF_RL_HIT_DOB
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_DOB2', 'WLF_RL_HIT_DOB'
	@go@
	create index WLF_RL_HIT_DOB_IX1 on @env:lm_schema_name@.WLF_RL_HIT_DOB(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_ID drop constraint PK_RL_HIT_ID
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ID2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		ID_TYPE		@ustring@(255),
		ID_NUMBER	@ustring@(255),
		ID_COUNTRY	@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID2 ADD
	CONSTRAINT PK_RL_HIT_ID PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_ID)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_ID2 (ID, INSTANCE_ID, HIT_ID, ID_TYPE, ID_NUMBER, ID_COUNTRY)
          SELECT ID, INSTANCE_ID, HIT_ID, ID_TYPE, ID_NUMBER, ID_COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_ID
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_ID
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_ID2', 'WLF_RL_HIT_ID'
	@go@
	create index WLF_RL_HIT_ID_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ID(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_KEYWORD drop constraint PK_RL_HIT_KEYWORD
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		KEYWORD		@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD2 ADD
	CONSTRAINT PK_RL_HIT_KEYWORD PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_KEYWORD)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_KEYWORD2 (ID, INSTANCE_ID, HIT_ID, KEYWORD)
          SELECT ID, INSTANCE_ID, HIT_ID, KEYWORD FROM @env:lm_schema_name@.WLF_RL_HIT_KEYWORD
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_KEYWORD2', 'WLF_RL_HIT_KEYWORD'
	@go@
	create index WLF_RL_HIT_KEY_IX1 on @env:lm_schema_name@.WLF_RL_HIT_KEYWORD(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY drop constraint PK_RL_HIT_NATIONALITY
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY2(
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		COUNTRY		@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY2 ADD
	CONSTRAINT PK_RL_HIT_NATIONALITY PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@
	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY2 (ID, INSTANCE_ID, HIT_ID, COUNTRY)
          SELECT ID, INSTANCE_ID, HIT_ID, COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_NATIONALITY2', 'WLF_RL_HIT_NATIONALITY'
	@go@
	create index WLF_RL_HIT_NAT_IX1 on @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_HIT_POB drop constraint PK_RL_HIT_POB
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_POB2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		PLACE		@ustring@(255),
		COUNTRY		@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_POB2 ADD
	CONSTRAINT PK_RL_HIT_POB PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,HIT_ID
	)
	@go@

	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_POB)
       INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_POB2 (ID, INSTANCE_ID, HIT_ID, PLACE, COUNTRY)
          SELECT ID, INSTANCE_ID, HIT_ID, PLACE, COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_POB
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_POB
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_HIT_POB2', 'WLF_RL_HIT_POB'
	@go@
	create index WLF_RL_HIT_POB_IX1 on @env:lm_schema_name@.WLF_RL_HIT_POB(HIT_ID)
	@go@

	alter table @env:lm_schema_name@.WLF_RL_ID drop constraint PK_RL_ID
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_ID2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		ID_TYPE			@ustring@(255),
		ID_NUMBER		@ustring@(255),
		ID_COUNTRY		@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID2 ADD
	CONSTRAINT PK_RL_ID PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,PARTY_ID
	)
	@go@

	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_ID)
       INSERT INTO @env:lm_schema_name@.WLF_RL_ID2 (ID, INSTANCE_ID, PARTY_ID, ID_TYPE, ID_NUMBER, ID_COUNTRY)
          SELECT ID, INSTANCE_ID, PARTY_ID, ID_TYPE, ID_NUMBER, ID_COUNTRY FROM @env:lm_schema_name@.WLF_RL_ID
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_ID
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_ID2', 'WLF_RL_ID'
	@go@
	create index WLF_RL_ID_IX1 on @env:lm_schema_name@.WLF_RL_ID(PARTY_ID)
	@go@


	alter table @env:lm_schema_name@.WLF_RL_NATIONALITY drop constraint PK_RL_NATIONALITY
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY2 (
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		COUNTRY_CODE	@ustring@(255)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY2 ADD
	CONSTRAINT PK_RL_NATIONALITY PRIMARY KEY nonclustered
	(
		ID,INSTANCE_ID,PARTY_ID
	)
	@go@


	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_NATIONALITY)
       INSERT INTO @env:lm_schema_name@.WLF_RL_NATIONALITY2 (ID, INSTANCE_ID, PARTY_ID, COUNTRY_CODE)
          SELECT ID, INSTANCE_ID, PARTY_ID, COUNTRY_CODE FROM @env:lm_schema_name@.WLF_RL_NATIONALITY
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_NATIONALITY2', 'WLF_RL_NATIONALITY'
	@go@
	create index WLF_RL_NAT_IX1 on @env:lm_schema_name@.WLF_RL_NATIONALITY(PARTY_ID)
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI DROP CONSTRAINT PK_WLF_RL_MSG_INTERMEDIATE_FI
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI DROP CONSTRAINT FK_WLF_RL_MSG_INTERMEDIATE_FI
	@go@
	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_F2(
		ID @int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		WLF_RL_MESSAGE_ID	@int@ NOT NULL,
		FI_CODE				@ustring@(255),
		FI_COUNTRY_CODE		@ustring@(255),
		FI_NAME				@ustring@(500)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_F2 ADD
		CONSTRAINT PK_WLF_RL_MSG_INTERMEDIATE_FI PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID,WLF_RL_MESSAGE_ID
		)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_F2 ADD
		CONSTRAINT FK_WLF_RL_MSG_INTERMEDIATE_FI
		FOREIGN KEY (WLF_RL_MESSAGE_ID, INSTANCE_ID)
		REFERENCES @env:lm_schema_name@.WLF_RL_MESSAGE(ID, INSTANCE_ID)
	@go@

	IF EXISTS(SELECT * FROM @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI)
       INSERT INTO @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_F2 (ID, INSTANCE_ID, WLF_RL_MESSAGE_ID, FI_CODE, FI_COUNTRY_CODE, FI_NAME)
          SELECT ID, INSTANCE_ID, WLF_RL_MESSAGE_ID, FI_CODE, FI_COUNTRY_CODE, FI_NAME FROM @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI
	@go@
	DROP TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI
	@go@
	exec sp_rename '@env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_F2', 'WLF_RL_MESSAGE_INTERMEDIATE_FI'
	@go@
]
	create index WLF_MESSAGE_SEARCH_LOG_IX1 on @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG(JOB_ID)
	@go@

}
version 3.2.1 ADD {
}
version 3.2.2 ADD {

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_DEFINITIONS ADD
		LATEST_LIST_ID_PART 		@int@ NULL
	@go@

[mssql
	/* ------------------------------------------------------------ */
	/*  Partition Function											*/
	/* ------------------------------------------------------------ */
	CREATE PARTITION FUNCTION latest_list_partfunc (int)
		AS RANGE LEFT FOR VALUES (1)
	@go@

	/* ------------------------------------------------------------ */
	/*  Partition Scheme											*/
	/* ------------------------------------------------------------ */
	CREATE PARTITION SCHEME latest_list_partscheme
		AS PARTITION latest_list_partfunc ALL TO ([PRIMARY])
	@go@

	/* ------------------------------------------------------------ */
	/*  temp table for partition dropping                       	*/
	/* ------------------------------------------------------------ */

	CREATE TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES (
    LIST_ID_PART  			@int@  NOT NULL,
	LIST_ID		  			@ustring@(50)	NOT NULL,
	LIST_ENTRY_KEY			@ustring@(255)	NOT NULL,
	VERSION					@int@	NOT NULL,
	LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
	ENTRY_UPDATE_DATE		@datetime@		NOT NULL,
    ENTRY_CREATED_DATE  	@datetime@    NULL,
	IS_DELETED				@tinyint@	NOT NULL,
	ENTRY_TYPE				@ustring@(50)	NULL,
	ENTRY_FIRST_NAME		@ustring@(255)	NULL,
	ENTRY_MIDDLE_NAME		@ustring@(255)	NULL,
	ENTRY_LAST_NAME			@ustring@(255)	NULL,
	ENTRY_FULL_NAME			@ustring@(255)	NULL,
	ENTRY_MAIDEN_NAME		@ustring@(255)	NULL,
	IS_BROKEN				@tinyint@	NULL,
	CITIZENSHIP				@ustring@(255)	NULL,
	DECEASED				@tinyint@	NULL,
	DECEASED_DATE			@datetime@		NULL,
	GENDER					@ustring@(50)	NULL,
	TITLE					@ustring@(255)	NULL,
	POSITION				@ustring@(255)	NULL,
	ALIAS_SET				@clob@		NULL,
	ADDRESS_SET				@clob@		NULL,
	ID_SET					@clob@		NULL,
	NATIONALITY_COUNTRY_SET	@clob@		NULL,
	DATE_OF_BIRTH_SET		@clob@		NULL,
	PLACE_OF_BIRTH_SET		@clob@		NULL,
	KEYWORD_SET				@clob@		NULL,
	CATEGORY_SET			@clob@		NULL,
	ADD_INFO_SET			@clob@		NULL,
	CUSTOM_FIELD_1 			@ustring@(255)   NULL,
	CUSTOM_FIELD_2 			@ustring@(255)   NULL,
	CUSTOM_FIELD_3 			@ustring@(255)   NULL,
	CUSTOM_FIELD_4 			@ustring@(255)   NULL,
	CUSTOM_FIELD_5 			@ustring@(255)   NULL,
	CUSTOM_FIELD_6 			@tinyint@   NULL,
	CUSTOM_FIELD_7 			@tinyint@   NULL,
	CUSTOM_FIELD_8 			@tinyint@   NULL,
	CUSTOM_FIELD_9 			@tinyint@   NULL,
	CUSTOM_FIELD_10 		@tinyint@   NULL,
	CUSTOM_FIELD_11 		@datetime@   NULL,
	CUSTOM_FIELD_12 		@datetime@   NULL,
	CUSTOM_FIELD_13 		@datetime@   NULL,
	CUSTOM_FIELD_14 		@datetime@   NULL,
	CUSTOM_FIELD_15 		@datetime@   NULL,
    CUSTOM_FIELD_16   		@ustring@(4000) NULL,
    CUSTOM_FIELD_17   		@ustring@(4000) NULL,
    CUSTOM_FIELD_18   		@ustring@(4000) NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES ADD
		CONSTRAINT PK_TMP_WLF_LATEST_LIST_ENTRIES PRIMARY KEY @nonclustered@
		(
			LIST_ID_PART,
			LIST_ID,
			LIST_ENTRY_KEY
		)
	@go@
]
	INSERT INTO @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID, LATEST_VALUE) VALUES ('list_id_part', '0')
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES (
    LIST_ID_PART  			@int@  NOT NULL,
	LIST_ID		  			@ustring@(50)	NOT NULL,
	LIST_ENTRY_KEY			@ustring@(255)	NOT NULL,
	VERSION					@int@	NOT NULL,
	LIST_VERSION_IDENTIFIER	@int@	NOT NULL,
	ENTRY_UPDATE_DATE		@datetime@		NOT NULL,
    ENTRY_CREATED_DATE  	@datetime@    NULL,
	IS_DELETED				@tinyint@	NOT NULL,
	ENTRY_TYPE				@ustring@(50)	NULL,
	ENTRY_FIRST_NAME		@ustring@(255)	NULL,
	ENTRY_MIDDLE_NAME		@ustring@(255)	NULL,
	ENTRY_LAST_NAME			@ustring@(255)	NULL,
	ENTRY_FULL_NAME			@ustring@(255)	NULL,
	ENTRY_MAIDEN_NAME		@ustring@(255)	NULL,
	IS_BROKEN				@tinyint@	NULL,
	CITIZENSHIP				@ustring@(255)	NULL,
	DECEASED				@tinyint@	NULL,
	DECEASED_DATE			@datetime@		NULL,
	GENDER					@ustring@(50)	NULL,
	TITLE					@ustring@(255)	NULL,
	POSITION				@ustring@(255)	NULL,
	ALIAS_SET				@clob@		NULL,
	ADDRESS_SET				@clob@		NULL,
	ID_SET					@clob@		NULL,
	NATIONALITY_COUNTRY_SET	@clob@		NULL,
	DATE_OF_BIRTH_SET		@clob@		NULL,
	PLACE_OF_BIRTH_SET		@clob@		NULL,
	KEYWORD_SET				@clob@		NULL,
	CATEGORY_SET			@clob@		NULL,
	ADD_INFO_SET			@clob@		NULL,
	CUSTOM_FIELD_1 			@ustring@(255)   NULL,
	CUSTOM_FIELD_2 			@ustring@(255)   NULL,
	CUSTOM_FIELD_3 			@ustring@(255)   NULL,
	CUSTOM_FIELD_4 			@ustring@(255)   NULL,
	CUSTOM_FIELD_5 			@ustring@(255)   NULL,
	CUSTOM_FIELD_6 			@tinyint@   NULL,
	CUSTOM_FIELD_7 			@tinyint@   NULL,
	CUSTOM_FIELD_8 			@tinyint@   NULL,
	CUSTOM_FIELD_9 			@tinyint@   NULL,
	CUSTOM_FIELD_10 		@tinyint@   NULL,
	CUSTOM_FIELD_11 		@datetime@   NULL,
	CUSTOM_FIELD_12 		@datetime@   NULL,
	CUSTOM_FIELD_13 		@datetime@   NULL,
	CUSTOM_FIELD_14 		@datetime@   NULL,
	CUSTOM_FIELD_15 		@datetime@   NULL,
    CUSTOM_FIELD_16   		@ustring@(4000) NULL,
    CUSTOM_FIELD_17   		@ustring@(4000) NULL,
    CUSTOM_FIELD_18   		@ustring@(4000) NULL
	)
[oracle
	PARTITION BY LIST (LIST_ID_PART)
	(
		PARTITION P0 values (0)
	)
]
[mssql
	ON latest_list_partscheme (LIST_ID_PART)
]
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES ADD
		CONSTRAINT PK_WLF_LATEST_LIST_ENTRIES PRIMARY KEY @nonclustered@
		(
			LIST_ID_PART,
			LIST_ID,
			LIST_ENTRY_KEY
		)
	@storage_primary_insert_update @env:tablespace_index@ default LOCAL@
	@go@

}

version 3.2.3 ADD {
	DROP TABLE @env:lm_schema_name@.WLF_SRCHCONF_BU
	@go@

[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA ADD
		TUNING_ID 	@ustring@(50) 	DEFAULT 'DEFAULT'
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		TUNING_ID		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD CF_PERSON_HIT_THRESHOLD @number@(9,0) DEFAULT 70
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		CF_PERSON_HIT_THRESHOLD 	NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD CF_ORG_HIT_THRESHOLD @number@(9,0) DEFAULT 70
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		CF_ORG_HIT_THRESHOLD		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD CF_COUNTRY_HIT_THRESHOLD @number@(9,0) DEFAULT 70
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		CF_COUNTRY_HIT_THRESHOLD	NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_PERSON_HIT_THRESHOLD @number@(9,0) DEFAULT 85
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		MS_PERSON_HIT_THRESHOLD		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_ORG_HIT_THRESHOLD @number@(9,0) DEFAULT 85
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		MS_ORG_HIT_THRESHOLD		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_COUNTRY_HIT_THRESHOLD @number@(9,0) DEFAULT 85
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		MS_COUNTRY_HIT_THRESHOLD		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_PERSON_TUN_HIT_THRESHOLD @number@(9,0) DEFAULT 70
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		MS_PERSON_TUN_HIT_THRESHOLD		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_ORG_TUN_HIT_THRESHOLD @number@(9,0) DEFAULT 70
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		MS_ORG_TUN_HIT_THRESHOLD		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_COUNTRY_TUN_HIT_THRESHOLD @number@(9,0) DEFAULT 70
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		MS_COUNTRY_TUN_HIT_THRESHOLD		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_HOLD_THRESHOLD @number@(9,0) DEFAULT 85
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA MODIFY
		MS_HOLD_THRESHOLD		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD PERSON_MATCH_ALG @ustring@(50) DEFAULT 'EXACT_AND_FUZZY_MATCH'
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA MODIFY
		PERSON_MATCH_ALG		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD ORG_MATCH_ALG @ustring@(50) DEFAULT 'EXACT_AND_FUZZY_MATCH'
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA MODIFY
		ORG_MATCH_ALG		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD PERSON_SEGMENT_CNT @number@(9,0) DEFAULT 1
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA MODIFY
		PERSON_SEGMENT_CNT		NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD ORG_SEGMENT_CNT @number@(9,0) DEFAULT 1
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA MODIFY
		ORG_SEGMENT_CNT				NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD COUNTRY_SEGMENT_CNT @number@(9,0) DEFAULT 1
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA MODIFY
		COUNTRY_SEGMENT_CNT			NOT NULL
	@go@
]

[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD TUNING_ID @ustring@(50) DEFAULT 'DEFAULT' NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD CF_PERSON_HIT_THRESHOLD @number@(9,0) DEFAULT 70 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD CF_ORG_HIT_THRESHOLD @number@(9,0) DEFAULT 70 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD CF_COUNTRY_HIT_THRESHOLD @number@(9,0) DEFAULT 70 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_PERSON_HIT_THRESHOLD @number@(9,0) DEFAULT 85 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_ORG_HIT_THRESHOLD @number@(9,0) DEFAULT 85 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_COUNTRY_HIT_THRESHOLD @number@(9,0) DEFAULT 85 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_PERSON_TUN_HIT_THRESHOLD @number@(9,0) DEFAULT 70 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_ORG_TUN_HIT_THRESHOLD @number@(9,0) DEFAULT 70 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_COUNTRY_TUN_HIT_THRESHOLD @number@(9,0) DEFAULT 70 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA
	ADD MS_HOLD_THRESHOLD @number@(9,0) DEFAULT 85 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD PERSON_MATCH_ALG @ustring@(50) DEFAULT 'EXACT_AND_FUZZY_MATCH' NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD ORG_MATCH_ALG @ustring@(50) DEFAULT 'EXACT_AND_FUZZY_MATCH' NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD PERSON_SEGMENT_CNT @number@(9,0) DEFAULT 1 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD ORG_SEGMENT_CNT @number@(9,0) DEFAULT 1 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD COUNTRY_SEGMENT_CNT @number@(9,0) DEFAULT 1 NOT NULL
	@go@
]

	CREATE TABLE @env:lm_schema_name@.WLF_SRCHDEF_EXCLUDE_LISTS (
	 	SRCHDEF_ID 			@ustring@(255) 	NOT NULL,
	 	EXCLUDE_LIST_ID 	@ustring@(50) 	NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_EXCLUDE_LISTS add
		CONSTRAINT WLF_SRCHDEF_EXCLUDE_LISTS_PK PRIMARY KEY
		(
			SRCHDEF_ID,
			EXCLUDE_LIST_ID
		)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SRCHDEF_CONFIGS (
		SRCHDEF_ID 			@ustring@(255) 			NOT NULL,
		SRCHCFG_ID 			@ustring@(255) 			NOT NULL,
		INCL_DECEASED 		@tinyint@ 	DEFAULT 1 	NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_CONFIGS add
		CONSTRAINT WLF_SRCHDEF_CONFIGS_PK PRIMARY KEY
		(
			SRCHDEF_ID,
			SRCHCFG_ID
		)
	@go@



	CREATE TABLE @env:lm_schema_name@.WLF_SD_CONF_FILTER (
		SRCHDEF_ID 			@ustring@(255)		NOT NULL,
		SRCHCFG_ID  		@ustring@(255) 		NOT NULL,
		FILTER_TYPE			@ustring@(50)		NOT NULL,
		FILTER_IMPACT		@ustring@(50)		NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SD_CONF_FILTER add
		CONSTRAINT WLF_SD_CONF_FILTER_PK PRIMARY KEY
		(
			SRCHDEF_ID,
			SRCHCFG_ID,
			FILTER_TYPE
		)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SD_CONF_FILTER_VAL (
		SRCHDEF_ID 			@ustring@(255)		NOT NULL,
		SRCHCFG_ID  		@ustring@(255) 		NOT NULL,
		FILTER_TYPE			@ustring@(50)		NOT NULL,
		FILTER_VALUE		@ustring@(255)		NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SD_CONF_FILTER_VAL add
		CONSTRAINT WLF_SD_CONF_FILTER_VAL_PK PRIMARY KEY
		(
			SRCHDEF_ID,
			SRCHCFG_ID,
			FILTER_TYPE,
			FILTER_VALUE
		)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SRCHCONF_LISTS (
		SRCHCFG_ID 			@ustring@(255) 			NOT NULL,
		LIST_ID 			@ustring@(255) 			NOT NULL,
		INCL_DECEASED 		@tinyint@ 	DEFAULT 1 	NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_LISTS add
		CONSTRAINT WLF_SRCHCONF_LISTS_PK PRIMARY KEY
		(
			SRCHCFG_ID,
			LIST_ID
		)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SC_LIST_FILTER (
		SRCHCFG_ID 			@ustring@(255)		NOT NULL,
		LIST_ID  			@ustring@(255) 		NOT NULL,
		FILTER_TYPE			@ustring@(50)		NOT NULL,
		FILTER_IMPACT		@ustring@(50)		NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SC_LIST_FILTER add
		CONSTRAINT PK_WLF_SC_LIST_FILTER PRIMARY KEY
		(
			SRCHCFG_ID,
			LIST_ID,
			FILTER_TYPE
		)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SC_LIST_FILTER_VAL (
		SRCHCFG_ID 			@ustring@(255)		NOT NULL,
		LIST_ID  			@ustring@(255) 		NOT NULL,
		FILTER_TYPE			@ustring@(50)		NOT NULL,
		FILTER_VALUE		@ustring@(255)		NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SC_LIST_FILTER_VAL add
		CONSTRAINT WLF_SC_LIST_FILTER_VAL_PK PRIMARY KEY
		(
			SRCHCFG_ID,
			LIST_ID,
			FILTER_TYPE,
			FILTER_VALUE
		)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_EXCLUDE_LIST (
		LIST_ID   			@ustring@(50) 		NOT NULL,
	   	LIST_NAME 			@ustring@(500)		NULL,
		LIST_DESCRIPTION 	@ustring@(1000)		NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_EXCLUDE_LIST add
		CONSTRAINT WLF_EXCLUDE_LIST_PK PRIMARY KEY
		(
			LIST_ID
		)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES (
		LIST_ID				@ustring@(50)		NOT NULL,
		PARTY_KEY			@ustring@(255)		NOT NULL,
		PARTY_NAME			@ustring@(255)		NULL,
		PARTY_TYPE			@ustring@(20)		NULL,
		EXPIRATION_DATE		@datetime@			NULL,
		IS_ACTIVE			@tinyint@ 	DEFAULT 1	NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES add
	 	CONSTRAINT WLF_ENTITY_EXCLUDE_ENTRIES_PK PRIMARY KEY
	 	(
	 		LIST_ID,
	 		PARTY_KEY
	 	)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES (
		LIST_ID				@ustring@(50)		NOT NULL,
		PARTY_KEY			@ustring@(255)		NOT NULL,
		PARTY_NAME			@ustring@(255)		NULL,
		PARTY_TYPE			@ustring@(20)		NULL,
		REF_LIST_ID			@ustring@(50)		NOT NULL,
		REF_LIST_ENTRY_KEY	@ustring@(255)		NOT NULL,
		EXPIRATION_DATE		@datetime@			NULL,
		IS_ACTIVE			@tinyint@ 	DEFAULT 1	NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES add
	 	CONSTRAINT WLF_HIT_EXCLUDE_ENTRIES_PK PRIMARY KEY
	 	(
	 		LIST_ID,
	 		PARTY_KEY,
	 		REF_LIST_ID,
	 		REF_LIST_ENTRY_KEY
	 	)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_TUNING_METADATA (
		TUNING_ID						@ustring@(50)		NOT NULL,
		TUNING_NAME						@ustring@(255)		NULL,
		MS_SCORE_NORMALIZATION_ACTIVE	@tinyint@ 	DEFAULT 1	NOT NULL,
		CF_SCORE_NORMALIZATION_ACTIVE	@tinyint@ 	DEFAULT 1	NOT NULL,
		CF_NAME_MATCH_THRESHOLD			@number@(9,0) DEFAULT 85 NOT NULL,
		CF_ID_MATCH_THRESHOLD			@number@(9,0) DEFAULT 85 NOT NULL,
		MS_NAME_MATCH_THRESHOLD			@number@(9,0) DEFAULT 85 NOT NULL,
		MS_ID_MATCH_THRESHOLD			@number@(9,0) DEFAULT 85 NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TUNING_METADATA add
	 	CONSTRAINT WLF_TUNING_METADATA_PK PRIMARY KEY
	 	(
	 		TUNING_ID
	 	)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_TUNING_NM_SCORE_RANGES (
		TUNING_ID  		@ustring@(50) 		NOT NULL,
	    NM_USAGE   		@ustring@(20) 		NOT NULL,
	    FROM_VALUE		@number@(9,0) 		NOT NULL,
	    SCORE      		@number@(9,0) 		NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TUNING_NM_SCORE_RANGES add
	 	CONSTRAINT WLF_TUNING_NM_SCORE_RANGES_PK PRIMARY KEY
	 	(
	 		TUNING_ID,
	 		NM_USAGE,
	 		FROM_VALUE
	 	)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_TUNING_IMPACTS (
		TUNING_ID  		@ustring@(50) 		NOT NULL,
	    IMPACT_ID   	@ustring@(50) 		NOT NULL,
	    FROM_VALUE		@number@(9,0) 		NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TUNING_IMPACTS add
	 	CONSTRAINT WLF_TUNING_IMPACTS_PK PRIMARY KEY
	 	(
	 		TUNING_ID,
	 		IMPACT_ID,
	 		FROM_VALUE
	 	)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_TUNING_SCORE_FACTORS (
		TUNING_ID       	@ustring@(50) 		NOT NULL,
	    SCORE_FACTOR_ID 	@ustring@(100) 		NOT NULL,
	    SF_USAGE        	@ustring@(20) 		NOT NULL,
	    SF_TYPE         	@ustring@(20) 		NOT NULL,
	    IS_CUSTOM       	@tinyint@ DEFAULT 0 NOT NULL,
	    IS_ACTIVE       	@tinyint@ DEFAULT 1 NOT NULL,
	    SF_DESCRIPTION 		@ustring@(500)		NULL,
	    SF_NAME         	@ustring@(100)		NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TUNING_SCORE_FACTORS add
	 	CONSTRAINT WLF_TUNING_SCORE_FACTORS_PK PRIMARY KEY
	 	(
	 		TUNING_ID,
	 		SCORE_FACTOR_ID,
	 		SF_USAGE
	 	)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (
		TUNING_ID       	@ustring@(50) 	NOT NULL,
	   	SCORE_FACTOR_ID 	@ustring@(100) 	NOT NULL,
	   	SF_USAGE            @ustring@(20)   NOT NULL,
	   	FIXED_VALUE_ID  	@ustring@(50) 	NOT NULL,
		SCORE           	@number@(9,0) 	DEFAULT 0 NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES add
	 	CONSTRAINT WLF_TUNING_SF_FIXED_VALUES_PK PRIMARY KEY
	 	(
	 		TUNING_ID,
	 		SCORE_FACTOR_ID,
	 		SF_USAGE,
	 		FIXED_VALUE_ID
	 	)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_TUNING_SF_SCORE_RANGES (
		TUNING_ID       	@ustring@(50) 	NOT NULL,
	   	SCORE_FACTOR_ID 	@ustring@(100) 	NOT NULL,
	   	SF_USAGE            @ustring@(20)   NOT NULL,
	   	FROM_VALUE  		@number@(9,0) 	NOT NULL,
		SCORE           	@number@(9,0) 	DEFAULT 0 NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TUNING_SF_SCORE_RANGES add
	 	CONSTRAINT WLF_TUNING_SF_SCORE_RANGES_PK PRIMARY KEY
	 	(
	 		TUNING_ID,
	 		SCORE_FACTOR_ID,
	 		SF_USAGE,
	 		FROM_VALUE
	 	)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SRCHDEF_CURRENT (
		ID			       	@ustring@(255) 	NOT NULL,
	   	NAME			 	@ustring@(255) 	NOT NULL,
	   	DISPLAY_ORDER		@number@(9,0)   DEFAULT 1 NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_CURRENT add
	 	CONSTRAINT WLF_SRCHDEF_CURRENT_PK PRIMARY KEY
	 	(
	 		ID
	 	)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SRCHDEF_BU_CURRENT (
		SRCHDEF_ID	       	@ustring@(255) 	NOT NULL,
	   	BUSINESS_UNIT	 	@ustring@(255) 	NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_BU_CURRENT add
	 	CONSTRAINT WLF_SRCHDEF_BU_CURRENT_PK PRIMARY KEY
	 	(
	 		SRCHDEF_ID,
	 		BUSINESS_UNIT
	 	)
	@go@

	UPDATE @env:lm_schema_name@.WLF_TRANSLATIONS SET TR_DEFAULT_TEXT = 'The Date of Birth must be entered in {0} format' ,TR_LOCAL_TEXT = 'The Date of Birth must be entered in {0} format' where TR_KEY = 'od_msg_cor_dob'
	@go@

[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
	MODIFY ( ID NUMBER (15,0) )
	@go@
]

[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG DROP CONSTRAINT PK_SRCH_LOG
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG ALTER COLUMN ID NUMERIC (15,0)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG ADD
	CONSTRAINT PK_SRCH_LOG PRIMARY KEY nonclustered
	(
		ID
	)
	@go@
]
}

version 3.3.0 ADD {
	CREATE TABLE @env:lm_schema_name@.WLF_NAME_TRANSFORMS (
		NAME_TRANSFORM_ID		@ustring@(100)		NOT NULL,
		NT_IMPACT				@number@(9,0)		DEFAULT 0	NOT NULL,
		IS_CUSTOM				@tinyint@		DEFAULT 0	NOT NULL,
		IS_ACTIVE				@tinyint@		DEFAULT 1	NOT NULL,
		NT_DESCRIPTION			@ustring@(500),
		NT_NAME					@ustring@(100)
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_NAME_TRANSFORMS
	ADD CONSTRAINT PK_WLF_NAME_TRANSFORMS PRIMARY KEY
	(
		NAME_TRANSFORM_ID
	)
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORMS (NAME_TRANSFORM_ID, NT_IMPACT, IS_CUSTOM, IS_ACTIVE, NT_NAME, NT_DESCRIPTION) VALUES ('AML_WLF_NT_removeSpacesAndPunctuation', 0,0,1, 'Remove Spaces and Punctuation', 'This name transformation function will remove all white space and punctuation characters from the name.  The list of punctuation characters to be removed should be specified in the Name Transformation Parameters settings.')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORMS (NAME_TRANSFORM_ID, NT_IMPACT, IS_CUSTOM, IS_ACTIVE, NT_NAME, NT_DESCRIPTION) VALUES ('AML_WLF_NT_removeTAQsSpacesAndPunctuation', 0,0,1, 'Remove TAQs, Spaces and Punctuation', 'This name transformation function will remove all TAQs (Titles, Affixes, and Qualifiers), white space and punctuation characters from the name.  The list of punctuation characters to be removed should be specified in the Name Transformation Parameters settings.')
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_NAME_TRANSFORM_PARAMS (
		PARAMETER_NAME  		@ustring@(50)		NOT NULL,
		PARAMETER_VALUE			@ustring@(400)     NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_NAME_TRANSFORM_PARAMS
	ADD CONSTRAINT PK_WLF_NAME_TRANSFORM_PARAMS PRIMARY KEY
	(
		PARAMETER_NAME,
		PARAMETER_VALUE
	)
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORM_PARAMS (PARAMETER_NAME, PARAMETER_VALUE) VALUES ('party.person.punctuationToRemove', '.,;/\-():!@#$%^&*_+={}[]|<>?')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORM_PARAMS (PARAMETER_NAME, PARAMETER_VALUE) VALUES ('party.organization.punctuationToRemove', '.,;/\-():!@#$%^&*_+={}[]|<>?')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORM_PARAMS (PARAMETER_NAME, PARAMETER_VALUE) VALUES ('party.unknown.punctuationToRemove', '.,;/\-():!@#$%^&*_+={}[]|<>?')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORM_PARAMS (PARAMETER_NAME, PARAMETER_VALUE) VALUES ('watchlist.person.punctuationToRemove', '.,;/\-():!@#$%^&*_+={}[]|<>?')
	@go@
	INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORM_PARAMS (PARAMETER_NAME, PARAMETER_VALUE) VALUES ('watchlist.organization.punctuationToRemove', '.,;/\-():!@#$%^&*_+={}[]|<>?')
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_TUNING_NAME_TRANSFORMS (
		TUNING_ID			@ustring@(50)		NOT NULL,
		NAME_TRANSFORM_ID	@ustring@(100)		NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TUNING_NAME_TRANSFORMS
		ADD CONSTRAINT PK_WLF_TUNING_NAME_TRANSFORMS PRIMARY KEY
	(
		TUNING_ID,
		NAME_TRANSFORM_ID
	)
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_TUNING_SCORE_FACTORS (TUNING_ID, SCORE_FACTOR_ID, SF_USAGE, SF_TYPE, IS_CUSTOM, IS_ACTIVE, SF_NAME)
	SELECT DISTINCT(TUNING_ID) AS TUNING_ID, 'AML_WLF_CF_SF_editDistanceMatch' AS SCORE_FACTOR_ID, 'CF' AS SF_USAGE,
	'FIXED_VALUE' AS SF_TYPE, 0 AS IS_CUSTOM, 1 AS IS_ACTIVE, 'Edit Distance Match' AS SF_NAME FROM @env:lm_schema_name@.WLF_TUNING_METADATA
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_TUNING_NAME_TRANSFORMS (TUNING_ID, NAME_TRANSFORM_ID)
	SELECT DISTINCT(TUNING_ID) AS TUNING_ID, 'AML_WLF_NT_removeSpacesAndPunctuation' AS NAME_TRANSFORM_ID FROM @env:lm_schema_name@.WLF_TUNING_METADATA
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_TUNING_NAME_TRANSFORMS (TUNING_ID, NAME_TRANSFORM_ID)
	SELECT DISTINCT(TUNING_ID) AS TUNING_ID, 'AML_WLF_NT_removeTAQsSpacesAndPunctuation' AS NAME_TRANSFORM_ID FROM @env:lm_schema_name@.WLF_TUNING_METADATA
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD PERSON_ED_SC_FILTER_TYPE @ustring@(20) DEFAULT 'LENGTH' NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD ORG_ED_SC_FILTER_TYPE @ustring@(20) DEFAULT 'LENGTH' NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD PERSON_ED_SC_MAXVALUE @number@(9,0) DEFAULT 30 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD ORG_ED_SC_MAXVALUE @number@(9,0) DEFAULT 40 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD PERSON_ED_SC_FANOUT @number@(9,0) DEFAULT 30 NOT NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCHCONF_METADATA
	ADD ORG_ED_SC_FANOUT @number@(9,0) DEFAULT 40 NOT NULL
	@go@

}
version 3.3.1 ADD {
}

version 3.3.2 ADD {

[mssql
	/* ------------------------------------------------------------ */
	/*  Partition Function											*/
	/* ------------------------------------------------------------ */
	CREATE PARTITION FUNCTION rl_partfunc (@ustring@(50))
		AS RANGE LEFT FOR VALUES (N'00-00Z')
	@go@

	/* ------------------------------------------------------------ */
	/*  Partition Scheme											*/
	/* ------------------------------------------------------------ */
	CREATE PARTITION SCHEME rl_partscheme
		AS PARTITION rl_partfunc ALL TO ([PRIMARY])
	@go@

	/* ------------------------------------------------------------ */
	/*  Partition Function for MS Tables							*/
	/* ------------------------------------------------------------ */
	CREATE PARTITION FUNCTION rl_ms_partfunc(@ustring@(50))
		AS RANGE LEFT FOR VALUES (N'00-00Z')
	@go@

	/* ------------------------------------------------------------ */
	/*  Partition Scheme for MS Tables								*/
	/* ------------------------------------------------------------ */
	CREATE PARTITION SCHEME rl_ms_partscheme
		AS PARTITION rl_ms_partfunc ALL TO ([PRIMARY])
	@go@


	/* ------------------------------------------------------------ */
	/*  WLF_RL_PARTY table											*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename 'WLF_RL_PARTY', 'WLF_RL_PARTY_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY_BKP drop constraint PK_RL_PARTY
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_PARTY (
		ID					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		JOB_ID				@ustring@(50) NOT NULL,
		PROCESS_DATE		@datetime@,
		PARTY_KEY			@ustring@(255),
		PARTY_TYPE			@ustring@(255),
		PARTY_NAME			@ustring@(255),
		PARTY_DOB			@datetime@,
		PARTY_BIRTH_COUNTRY		@ustring@(255),
		GENDER					@ustring@(20),
		CUSTOM_FIELD1			@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16 		@ustring@(4000)   NULL,
		CUSTOM_FIELD17 		@ustring@(4000)   NULL,
		CUSTOM_FIELD18 		@ustring@(4000)   NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY ADD
		CONSTRAINT PK_RL_PARTY PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID,JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY NATIONALITY							*/
	/* ------------------------------------------------------------ */


	EXEC sp_rename 'WLF_RL_NATIONALITY', 'WLF_RL_NATIONALITY_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY_BKP DROP CONSTRAINT PK_RL_NATIONALITY
	@go@

	drop index WLF_RL_NATIONALITY_BKP.WLF_RL_NAT_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY (
		ID				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		COUNTRY_CODE	@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY ADD
	CONSTRAINT PK_RL_NATIONALITY PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,PARTY_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_NAT_IX1 on @env:lm_schema_name@.WLF_RL_NATIONALITY(JOB_ID,PARTY_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY ADDRESS							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename 'WLF_RL_ADDRESS', 'WLF_RL_ADDRESS_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS_BKP DROP CONSTRAINT PK_RL_ADDRESS
	@go@

	DROP INDEX WLF_RL_ADDRESS_BKP.WLF_RL_ADDR_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_ADDRESS (
		ID				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		ADDRESS1		@ustring@(255),
		ADDRESS2		@ustring@(255),
		CITY			@ustring@(255),
		ZIP_CODE		@ustring@(255),
		STATE_PROVIDENCE	@ustring@(255),
		COUNTRY				@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS ADD
		CONSTRAINT PK_RL_ADDRESS PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,PARTY_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ADDR_IX1 on @env:lm_schema_name@.WLF_RL_ADDRESS(JOB_ID,PARTY_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY ID							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_ID', 'WLF_RL_ID_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID_BKP DROP CONSTRAINT PK_RL_ID
	@go@

	drop index WLF_RL_ID_BKP.WLF_RL_ID_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_ID (
		ID				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		ID_TYPE			@ustring@(255),
		ID_NUMBER		@ustring@(255),
		ID_COUNTRY		@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID ADD
		CONSTRAINT PK_RL_ID PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,PARTY_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ID_IX1 on @env:lm_schema_name@.WLF_RL_ID(JOB_ID,PARTY_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG PARTY ALIAS							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_ALIAS', 'WLF_RL_ALIAS_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ALIAS_BKP DROP CONSTRAINT PK_RL_ALIAS
	@go@

	drop index WLF_RL_ALIAS_BKP.WLF_RL_ALIAS_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_ALIAS (
		ID						@int@ NOT NULL,
		INSTANCE_ID				@ustring@(255) NOT NULL,
		PARTY_ID				@int@ NOT NULL,
		ALIAS_FIRST_NAME		@ustring@(255),
		ALIAS_MIDDLE_NAME		@ustring@(255),
		ALIAS_MAIDEN_NAME		@ustring@(255),
		ALIAS_LAST_NAME			@ustring@(255),
		ALIAS_FULL_NAME			@ustring@(2000),
		ALIAS_IS_BROKEN_NAME	@tinyint@,
		JOB_ID					@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ALIAS ADD
		CONSTRAINT PK_RL_ALIAS PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,PARTY_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ALIAS_IX1 on @env:lm_schema_name@.WLF_RL_ALIAS(JOB_ID,PARTY_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT', 'WLF_RL_HIT_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_BKP drop constraint PK_RL_HIT
	@go@

	drop index WLF_RL_HIT_BKP.WLF_RL_HIT_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT (
		ID				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		PARTY_ID		@int@,
		LIST_ID			@ustring@(255),
		LIST_UPDATE_DATE	@datetime@,
		ENTRY_ID		@ustring@(255),
		ENTRY_UPDATE_DATE	@datetime@,
		TYPE			@ustring@(255),
		NAME			@ustring@(255),
		SCORE			@int@,
		GENDER			@ustring@(10),
		CUSTOM_FIELD1		@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@ustring@(4000),
		CUSTOM_FIELD17		@ustring@(4000),
		CUSTOM_FIELD18		@ustring@(4000),
		HIT_DATA_ENTERED 	@datetime@,
		DATE_OF_DEATH 		@datetime@,
		TITLE          		@ustring@(255),
		POSITION       		@ustring@(255),
		HIT_ENTRY_TYPE 		@ustring@(50),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT ADD
		CONSTRAINT PK_RL_HIT PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_IX1 on @env:lm_schema_name@.WLF_RL_HIT(JOB_ID,PARTY_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT ID							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_ID', 'WLF_RL_HIT_ID_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID_BKP drop constraint PK_RL_HIT_ID
	@go@

	drop index WLF_RL_HIT_ID_BKP.WLF_RL_HIT_ID_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ID (
		ID 			@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		ID_TYPE		@ustring@(255),
		ID_NUMBER	@ustring@(255),
		ID_COUNTRY	@ustring@(255),
		JOB_ID		@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID ADD
	CONSTRAINT PK_RL_HIT_ID PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ID_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ID(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT ADDRESS								*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_ADDRESS', 'WLF_RL_HIT_ADDRESS_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_BKP drop constraint PK_RL_HIT_ADDRESS
	@go@

	drop index WLF_RL_HIT_ADDRESS_BKP.WLF_RL_HIT_ADDR_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		ADDRESS1		@ustring@(255),
		ADDRESS2		@ustring@(255),
		CITY			@ustring@(255),
		STATE_PROVINCE		@ustring@(255),
		POSTAL_CODE		@ustring@(255),
		COUNTRY			@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS ADD
	CONSTRAINT PK_RL_HIT_ADDRESS PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ADDR_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ADDRESS(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@



	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT NATIONALITY							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_NATIONALITY', 'WLF_RL_HIT_NATIONALITY_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_BKP drop constraint PK_RL_HIT_NATIONALITY
	@go@

	drop index WLF_RL_HIT_NATIONALITY_BKP.WLF_RL_HIT_NAT_IX1
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY(
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		COUNTRY			@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY ADD
	CONSTRAINT PK_RL_HIT_NATIONALITY PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_NAT_IX1 on @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT ALIAS							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_ALIAS', 'WLF_RL_HIT_ALIAS_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS_BKP drop constraint PK_RL_HIT_ALIAS
	@go@

	drop index WLF_RL_HIT_ALIAS_BKP.WLF_RL_HIT_ALIAS_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS (
		ID 					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID				@int@ NOT NULL,
		NAME				@ustring@(2000),
		MATCH_STRENGTH		@ustring@(20),
		JOB_ID				@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS ADD
	CONSTRAINT PK_RL_HIT_ALIAS PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ALIAS_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ALIAS(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT CATEGORY							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_CATEGORY', 'WLF_RL_HIT_CATEGORY_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_BKP drop constraint PK_RL_HIT_CATEGORY
	@go@

	drop index WLF_RL_HIT_CATEGORY_BKP.WLF_RL_HIT_CAT_IX1
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		CATEGORY		@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY ADD
	CONSTRAINT PK_RL_HIT_CATEGORY PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	create index WLF_RL_HIT_CAT_IX1 on @env:lm_schema_name@.WLF_RL_HIT_CATEGORY(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@



	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT KEYWORD							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_KEYWORD', 'WLF_RL_HIT_KEYWORD_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_BKP drop constraint PK_RL_HIT_KEYWORD
	@go@

	drop index WLF_RL_HIT_KEYWORD_BKP.WLF_RL_HIT_KEY_IX1
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		KEYWORD			@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD ADD
	CONSTRAINT PK_RL_HIT_KEYWORD PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

    create index WLF_RL_HIT_KEY_IX1 on @env:lm_schema_name@.WLF_RL_HIT_KEYWORD(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT POB							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_POB', 'WLF_RL_HIT_POB_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_POB_BKP drop constraint PK_RL_HIT_POB
	@go@

	drop index WLF_RL_HIT_POB_BKP.WLF_RL_HIT_POB_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_POB (
		ID 			@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		PLACE		@ustring@(255),
		COUNTRY		@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_POB ADD
	CONSTRAINT PK_RL_HIT_POB PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_POB_IX1 on @env:lm_schema_name@.WLF_RL_HIT_POB(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@



	/* ------------------------------------------------------------ */
	/*  RESULTS LOG ADD INFO							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_ADDINFO', 'WLF_RL_HIT_ADDINFO_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_BKP drop constraint PK_RL_HIT_ADDINFO
	@go@

	drop index WLF_RL_HIT_ADDINFO_BKP.WLF_RL_HIT_ADDINFO_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		TYPE		@ustring@(255),
		VALUE		@clob@,
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO ADD
	CONSTRAINT PK_RL_HIT_ADDINFO PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ADDINFO_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ADDINFO(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@



	/* ------------------------------------------------------------ */
	/*  RESULTS LOG HIT DOB							*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_HIT_DOB', 'WLF_RL_HIT_DOB_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB_BKP drop constraint PK_RL_HIT_DOB
	@go@

	drop index WLF_RL_HIT_DOB_BKP.WLF_RL_HIT_DOB_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		DOB				@ustring@(20),
		YOB				@ustring@(20),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB ADD
	CONSTRAINT PK_RL_HIT_DOB PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	create index WLF_RL_HIT_DOB_IX1 on @env:lm_schema_name@.WLF_RL_HIT_DOB(JOB_ID,HIT_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@


	/* ------------------------------------------------------------ */
	/*  RESULT LOG MESSAGE TABLE									*/
	/* ------------------------------------------------------------ */

	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_MESSAGE', 'WLF_RL_MESSAGE_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI drop constraint FK_WLF_RL_MSG_INTERMEDIATE_FI
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_BKP drop constraint PK_RL_MESSAGE
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE (
		ID					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		JOB_ID				@ustring@(50) NOT NULL,
		JOB_TIMESTAMP		@datetime@,
		PARTY_KEY			@ustring@(255),
		MESSAGE_KEY			@ustring@(255),
		MESSAGE_INSTANCE_NUMBER	@int@,
		MESSAGE_REF_NUMBER	@int@,
		MESSAGE_SOURCE_TYPE	@ustring@(255),
		MESSAGE_TYPE_CD		@ustring@(255),
		MESSAGE_DATE_TIME	@datetime@,
		AMOUNT				@float@,
		CURRENCY_CD			@ustring@(255),
		PRODUCT_KEY			@ustring@(255),
		MESSAGE_DIRECTION	@ustring@(255),
		MESSAGE_INSTRUCTIONS	@clob@,
		ADDITIONAL_MESSAGE_TEXT @clob@,
		MESSAGE_TEXT		@clob@,
		ORIGINATOR_NAME		@ustring@(500),
		ORIGINATOR_PARTY_IDS		@clob@,
		ORIGINATOR_ADDRESS_LINE_1	@ustring@(500),
		ORIGINATOR_ADDRESS_LINE_2	@ustring@(500),
		ORIGINATOR_ADDRESS_LINE_3	@ustring@(500),
		ORIGINATOR_CITY		@ustring@(255),
		ORIGINATOR_COUNTRY_CD		@ustring@(255),
		ORIGINATOR_PARTY_TYPE_CD	@ustring@(255),
		ORIGINATOR_PO_BOX	@ustring@(255),
		ORIGINATOR_STATE_PROVINCE	@ustring@(255),
		ORIGINATOR_ZIP_CD	@ustring@(255),
		ORIGINATOR_ADDITIONAL_INFO @clob@,
		ORIGINATING_FI_CD	@ustring@(255),
		ORIGINATING_FI_COUNTRY_CD	@ustring@(255),
		ORIGINATING_FI_ORG_NAME		@ustring@(500),
		BENEFICIARY_PRIMARY_NAME	@ustring@(500),
		BENEFICIARY_PARTY_IDS		@clob@,
		BENEFICIARY_ADDRESS_LINE_1	@ustring@(500),
		BENEFICIARY_ADDRESS_LINE_2	@ustring@(500),
		BENEFICIARY_ADDRESS_LINE_3	@ustring@(500),
		BENEFICIARY_PO_BOX		@ustring@(255),
		BENEFICIARY_CITY		@ustring@(255),
		BENEFICIARY_STATE_PROVINCE	@ustring@(255),
		BENEFICIARY_ZIP_CD		@ustring@(255),
		BENEFICIARY_COUNTRY_CD		@ustring@(255),
		BENEFICIARY_ADDITIONAL_INFO	@clob@,
		BENEFICIARY_FI_ORG_NAME		@ustring@(500),
		BENEFICIARY_FI_CD		@ustring@(255),
		BENEFICIARY_FI_PARTY_TYPE_CD	@ustring@(255),
		BENEFICIARY_FI_COUNTRY_CD	@ustring@(255),
		RECEIVING_FI_ADDITIONAL_INFO	@clob@,
		RECEIVING_FI_CD		@ustring@(255),
		RECEIVING_FI_COUNTRY_CD		@ustring@(255),
		RECEIVING_FI_ORGANIZATION_NAME		@ustring@(500),
		SENDING_FI_ADDITIONAL_INFO	@clob@,
		SENDING_FI_CD		@ustring@(255),
		SENDING_FI_COUNTRY_CD		@ustring@(255),
		SENDING_FI_ORGANIZATION_NAME		@ustring@(500),
		FI_TO_FI_INFO		@clob@,
		CUSTOM_FIELD1		@ustring@(500),
		CUSTOM_FIELD2		@ustring@(500),
		CUSTOM_FIELD3		@ustring@(500),
		CUSTOM_FIELD4		@ustring@(500),
		CUSTOM_FIELD5		@ustring@(500),
		CUSTOM_FIELD6		@ustring@(500),
		CUSTOM_FIELD7		@ustring@(500),
		CUSTOM_FIELD8		@ustring@(500),
		CUSTOM_FIELD9		@ustring@(500),
		CUSTOM_FIELD10		@ustring@(500),
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@tinyint@,
		CUSTOM_FIELD17		@tinyint@,
		CUSTOM_FIELD18		@tinyint@,
		CUSTOM_FIELD19		@tinyint@,
		CUSTOM_FIELD20		@tinyint@
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE ADD
		CONSTRAINT PK_RL_MESSAGE PRIMARY KEY @nonclustered@
		(
			ID,
			INSTANCE_ID,
			JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	/* ------------------------------------------------------------ */
	/*  WLF_RL_MESSAGE_INTERMEDIATE_FI								*/
	/* ------------------------------------------------------------ */
	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI', 'WLF_RL_MESSAGE_INTERMEDIAT_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIAT_BKP drop constraint PK_WLF_RL_MSG_INTERMEDIATE_FI
	@go@



	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI(
		ID 					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		WLF_RL_MESSAGE_ID	@int@ NOT NULL,
		FI_CODE				@ustring@(255),
		FI_COUNTRY_CODE		@ustring@(255),
		FI_NAME				@ustring@(500),
		JOB_ID				@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI ADD
		CONSTRAINT PK_WLF_RL_MSG_INTERMEDIATE_FI PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,WLF_RL_MESSAGE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI ADD
		CONSTRAINT FK_WLF_RL_MSG_INTERMEDIATE_FI
		FOREIGN KEY (WLF_RL_MESSAGE_ID, INSTANCE_ID,JOB_ID)
		REFERENCES @env:lm_schema_name@.WLF_RL_MESSAGE(ID, INSTANCE_ID,JOB_ID)
	@go@



	/* ------------------------------------------------------------ */
	/*  RESULT LOG MESSAGE HIT TABLE 								*/
	/* ------------------------------------------------------------ */


	EXEC sp_rename '@env:lm_schema_name@.WLF_RL_MESSAGE_HIT', 'WLF_RL_MESSAGE_HIT_BKP'
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_BKP drop constraint PK_RL_MESSAGE_HIT
	@go@

	drop index WLF_RL_MESSAGE_HIT_BKP.WLF_RL_MESSAGE_HIT_IX1
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT (
		ID				@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		WLF_RL_MESSAGE_ID	@int@ NOT NULL,
		LIST_ID			@ustring@(255),
		LIST_UPDATE_DATE	@datetime@,
		ENTRY_ID		@ustring@(255),
		ENTRY_UPDATE_DATE	@datetime@,
		TYPE			@ustring@(255),
		NAME			@ustring@(255),
		SCORE			@int@,
		GENDER			@ustring@(10),
		CUSTOM_FIELD1		@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@ustring@(4000),
		CUSTOM_FIELD17		@ustring@(4000),
		CUSTOM_FIELD18		@ustring@(4000),
		JOB_ID			@ustring@(50) NOT NULL
	)
	ON rl_partscheme (JOB_ID)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT ADD
		CONSTRAINT PK_RL_MESSAGE_HIT PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_MESSAGE_HIT_IX1 on @env:lm_schema_name@.WLF_RL_MESSAGE_HIT(JOB_ID,WLF_RL_MESSAGE_ID)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@




	/* ------------------------------------------------------------ */
	/* 			create RL partition 								*/
	/* ------------------------------------------------------------ */
	CREATE PROCEDURE @env:lm_schema_name@.WLF_RL_CREATE_PARTITION
	@JOB_ID @ustring@(50)
	AS
	BEGIN

      BEGIN TRY

         DECLARE
			@var1 int,
            @P_PART_NAME varchar(30),
			@EXEC_STR varchar(1000)

			SET @P_PART_NAME = @JOB_ID + 'Z';
                  BEGIN

				  SELECT  @var1 = COUNT(*)
            FROM sys.partition_functions AS spf INNER JOIN sys.partition_range_values sprv ON sprv.function_id=spf.function_id
            WHERE (spf.name=N'rl_partfunc') and  sprv.value = @P_PART_NAME;

						IF @var1 <> 1
						BEGIN
							ALTER PARTITION SCHEME rl_partscheme NEXT USED [PRIMARY];

							SET @EXEC_STR =
								'alter partition function rl_partfunc()
								SPLIT RANGE (''' + @P_PART_NAME + ''');'
							EXECUTE (@EXEC_STR)
						END
                  END
      END TRY

      BEGIN CATCH

         SELECT
		 ERROR_NUMBER() AS ErrorNumber
		,ERROR_SEVERITY() AS ErrorSeverity
		,ERROR_STATE() AS ErrorState
		,ERROR_PROCEDURE() AS ErrorProcedure
		,ERROR_LINE() AS ErrorLine
		,ERROR_MESSAGE() AS ErrorMessage;
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;

		RETURN 1;

      END CATCH

	END
    @go@

	/* ------------------------------------------------------------ */
	/*	RL_MS create partition		*/
	/* ------------------------------------------------------------ */

	CREATE PROCEDURE @env:lm_schema_name@.WLF_RL_MS_CREATE_PARTITION
	@JOB_ID @ustring@(50)
	AS
	BEGIN

      BEGIN TRY

         DECLARE
			@var1 int,
            @P_PART_NAME varchar(30),
			@EXEC_STR varchar(1000)

			SET @P_PART_NAME = @JOB_ID + 'Z';
                  BEGIN

				  SELECT  @var1 = COUNT(*)
            FROM sys.partition_functions AS spf INNER JOIN sys.partition_range_values sprv ON sprv.function_id=spf.function_id
            WHERE (spf.name=N'rl_ms_partfunc') and  sprv.value = @P_PART_NAME;

						IF @var1 <> 1
						BEGIN
							ALTER PARTITION SCHEME rl_ms_partscheme NEXT USED [PRIMARY];

							SET @EXEC_STR =
								'alter partition function rl_ms_partfunc()
								SPLIT RANGE (''' + @P_PART_NAME + ''');'
							EXECUTE (@EXEC_STR)
						END
                  END
      END TRY

      BEGIN CATCH

         SELECT
		 ERROR_NUMBER() AS ErrorNumber
		,ERROR_SEVERITY() AS ErrorSeverity
		,ERROR_STATE() AS ErrorState
		,ERROR_PROCEDURE() AS ErrorProcedure
		,ERROR_LINE() AS ErrorLine
		,ERROR_MESSAGE() AS ErrorMessage;
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;

		RETURN 1;

      END CATCH

	END
	@go@

	/* ------------------------------------------------------------ */
	/* create initial partitions to upgrade RL tables */
	/* ------------------------------------------------------------ */

	CREATE PROCEDURE @env:lm_schema_name@.WLF_UPGRADE_RL_TABLES
	AS
	BEGIN

      BEGIN TRY

         DECLARE
            @RL_JOB_ID varchar(30),
            @MS_JOB_ID varchar(30),
            @EXEC_STR varchar(1000),
            @EXEC_STR2 varchar(1000)

		SET NOCOUNT ON;


		BEGIN
			DECLARE RL_JOB_ID_CURSOR CURSOR LOCAL FOR
			SELECT DISTINCT JOB_ID
			FROM @env:lm_schema_name@.WLF_RL_PARTY_BKP
			ORDER BY JOB_ID;

			DECLARE MS_JOB_ID_CURSOR CURSOR LOCAL FOR
			SELECT DISTINCT JOB_ID
			FROM @env:lm_schema_name@.WLF_RL_MESSAGE_BKP
			ORDER BY JOB_ID;

		OPEN RL_JOB_ID_CURSOR

		FETCH NEXT FROM RL_JOB_ID_CURSOR
		INTO @RL_JOB_ID


		WHILE @@FETCH_STATUS = 0
			BEGIN

				SET @EXEC_STR = 'EXECUTE @env:lm_schema_name@.WLF_RL_CREATE_PARTITION N''' + @RL_JOB_ID + ''''
				EXECUTE (@EXEC_STR)

				FETCH NEXT FROM RL_JOB_ID_CURSOR
				INTO @RL_JOB_ID

			END

		CLOSE RL_JOB_ID_CURSOR;
		DEALLOCATE RL_JOB_ID_CURSOR;

		OPEN MS_JOB_ID_CURSOR

		FETCH NEXT FROM MS_JOB_ID_CURSOR
		INTO @MS_JOB_ID


		WHILE @@FETCH_STATUS = 0
			BEGIN

				SET @EXEC_STR2 = 'EXECUTE @env:lm_schema_name@.WLF_RL_MS_CREATE_PARTITION N''' + @MS_JOB_ID + ''''
				EXECUTE (@EXEC_STR2)

				FETCH NEXT FROM MS_JOB_ID_CURSOR
				INTO @MS_JOB_ID

			END
		CLOSE MS_JOB_ID_CURSOR;
		DEALLOCATE MS_JOB_ID_CURSOR;

		END

		END TRY

		BEGIN CATCH

         SELECT
		 ERROR_NUMBER() AS ErrorNumber
		,ERROR_SEVERITY() AS ErrorSeverity
		,ERROR_STATE() AS ErrorState
		,ERROR_PROCEDURE() AS ErrorProcedure
		,ERROR_LINE() AS ErrorLine
		,ERROR_MESSAGE() AS ErrorMessage;
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;

		RETURN 1;

      END CATCH

	END;
	@go@

	execute @env:lm_schema_name@.WLF_UPGRADE_RL_TABLES
	@go@

	drop procedure @env:lm_schema_name@.WLF_UPGRADE_RL_TABLES
	@go@
]
[oracle

	 /*----------------------------------------------------------------*/
	 /* Adding the JOB_ID column and its values                        */
	 /*----------------------------------------------------------------*/


	create table @env:lm_schema_name@.WLF_RL_NATIONALITY_TMP as ( select t1.*, cast( (select t2.job_id from @env:lm_schema_name@.WLF_RL_PARTY t2 where t1.PARTY_ID = t2.ID
                   and t1.INSTANCE_ID = t2.INSTANCE_ID) as varchar2(50) ) as job_id
				   from @env:lm_schema_name@.WLF_RL_NATIONALITY t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY
	@go@

	RENAME WLF_RL_NATIONALITY_TMP TO WLF_RL_NATIONALITY
	@go@


	create table @env:lm_schema_name@.WLF_RL_ADDRESS_TMP as ( select t1.*,cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_PARTY t2 where t1.PARTY_ID = t2.ID
										and t1.INSTANCE_ID = t2.INSTANCE_ID) as varchar2(50) ) as job_id
										from @env:lm_schema_name@.WLF_RL_ADDRESS t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_ADDRESS
	@go@

	RENAME WLF_RL_ADDRESS_TMP TO WLF_RL_ADDRESS
	@go@


	create table @env:lm_schema_name@.WLF_RL_ID_TMP as ( select t1.*,cast( (select t2.job_id from  @env:lm_schema_name@.WLF_RL_PARTY t2 where t1.PARTY_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_ID t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_ID
	@go@

	RENAME WLF_RL_ID_TMP TO WLF_RL_ID
	@go@

	create table @env:lm_schema_name@.WLF_RL_ALIAS_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_PARTY t2 where t1.PARTY_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_ALIAS t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_ALIAS
	@go@

	RENAME WLF_RL_ALIAS_TMP TO WLF_RL_ALIAS
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_PARTY t2 where t1.PARTY_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT
	@go@

	RENAME WLF_RL_HIT_TMP TO WLF_RL_HIT
	@go@



	create table @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TMP as ( select t1.*,cast( (select t2.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE t2 where t1.WLF_RL_MESSAGE_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT
	@go@

	RENAME WLF_RL_MESSAGE_HIT_TMP TO WLF_RL_MESSAGE_HIT
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_ID_TMP as ( select t1.*,cast( (select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_ID t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_ID
	@go@

	RENAME WLF_RL_HIT_ID_TMP TO WLF_RL_HIT_ID
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_ADDRESS t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS
	@go@

	RENAME  WLF_RL_HIT_ADDRESS_TMP TO WLF_RL_HIT_ADDRESS
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_TMP as ( select t1.*,cast( (select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY
	@go@

	RENAME WLF_RL_HIT_NATIONALITY_TMP TO WLF_RL_HIT_NATIONALITY
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_ALIAS_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_ALIAS t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS
	@go@

	RENAME WLF_RL_HIT_ALIAS_TMP TO WLF_RL_HIT_ALIAS
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_CATEGORY t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY
	@go@

	RENAME WLF_RL_HIT_CATEGORY_TMP TO WLF_RL_HIT_CATEGORY
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_KEYWORD t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD
	@go@

	RENAME WLF_RL_HIT_KEYWORD_TMP TO WLF_RL_HIT_KEYWORD
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_POB_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_POB t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_POB
	@go@

	RENAME WLF_RL_HIT_POB_TMP TO WLF_RL_HIT_POB
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_ADDINFO t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO
	@go@

	RENAME WLF_RL_HIT_ADDINFO_TMP TO WLF_RL_HIT_ADDINFO
	@go@


	create table @env:lm_schema_name@.WLF_RL_HIT_DOB_TMP as ( select t1.*,cast( (select t2.job_id from  @env:lm_schema_name@.WLF_RL_HIT t2 where t1.HIT_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID union select t3.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE_HIT t3 where t1.HIT_ID = t3.ID
					   and t1.INSTANCE_ID = t3.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_HIT_DOB t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB
	@go@

	RENAME WLF_RL_HIT_DOB_TMP TO WLF_RL_HIT_DOB
	@go@



	create table @env:lm_schema_name@.WLF_RL_MESSAGE_INTERM_FI_TMP as ( select t1.*, cast((select t2.job_id from  @env:lm_schema_name@.WLF_RL_MESSAGE t2 where t1.WLF_RL_MESSAGE_ID = t2.ID
					   and t1.INSTANCE_ID = t2.INSTANCE_ID) as varchar2(50) ) as job_id
					   from @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI t1)
	@go@

	DROP TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI
	@go@

	RENAME WLF_RL_MESSAGE_INTERM_FI_TMP TO WLF_RL_MESSAGE_INTERMEDIATE_FI
	@go@


	ALTER TABLE
	WLF_RL_NATIONALITY
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_ADDRESS
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_ID
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_ALIAS
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_ID
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_ADDRESS
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_NATIONALITY
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_ALIAS
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_CATEGORY
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_KEYWORD
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_POB
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_ADDINFO
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_HIT_DOB
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_MESSAGE_HIT
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	ALTER TABLE
	WLF_RL_MESSAGE_INTERMEDIATE_FI
	MODIFY
	(
	job_id @ustring@(50 CHAR) NOT NULL ENABLE
	)
	@go@

	/*-----------------------*/
	/* create interim tables */
	/*-----------------------*/

	CREATE TABLE @env:lm_schema_name@.WLF_RL_PARTY_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_PARTY where 1=0
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_ID_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_ID where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_KEYWORD where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_POB_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_POB where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_MESSAGE_HIT where 1=0
	@go@

    CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ID_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_ID where 1=0
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_ALIAS where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_ADDRESS_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_ADDRESS where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_MESSAGE where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMED_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_NATIONALITY where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_DOB where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_ADDRESS where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_ADDINFO where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_CATEGORY where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY where 1=0
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_ALIAS_NEW
	PARTITION BY LIST (JOB_ID)
	(
		PARTITION P0 values ('00-00')
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_RL_ALIAS where 1=0
	@go@

	CREATE OR REPLACE PROCEDURE @env:lm_schema_name@.WLF_RL_CREATE_PARTITION ( JOB_ID VARCHAR2 )
	AS

	CURSOR	PARTITIONED_TABLES_SET IS
	SELECT	DISTINCT TABLE_NAME
	FROM	USER_TAB_PARTITIONS WHERE TABLE_NAME LIKE 'WLF_RL%' AND TABLE_NAME NOT LIKE 'WLF_RL_MESSAGE%'
	ORDER BY TABLE_NAME;

	PARTITIONED_TABLE	PARTITIONED_TABLES_SET%ROWTYPE;

	P_TABLE_NAME		VARCHAR2(30);
	P_PART_NAME		VARCHAR2(30);
	P_COUNTER		NUMBER;
	EXEC_STR		VARCHAR2(1000);

	BEGIN

		/* Generated the partition name */
		P_PART_NAME := 'P' || rtrim(substr(JOB_ID,1,2)) || '_' || rtrim(substr(JOB_ID,4,10));


			OPEN PARTITIONED_TABLES_SET;

		LOOP

			FETCH PARTITIONED_TABLES_SET INTO PARTITIONED_TABLE;
			EXIT WHEN PARTITIONED_TABLES_SET%NOTFOUND;

			P_TABLE_NAME := PARTITIONED_TABLE.TABLE_NAME;
			--DBMS_OUTPUT.put_line ('Table Name: ' || to_char(P_TABLE_NAME));

			SELECT	count(*)
			INTO	P_COUNTER
			FROM	USER_TAB_PARTITIONS
			WHERE	TABLE_NAME = P_TABLE_NAME and PARTITION_NAME = P_PART_NAME;

			--DBMS_OUTPUT.put_line ('Counter: ' || to_char(P_COUNTER));

			IF P_COUNTER = 0 THEN
				BEGIN
					EXEC_STR := 'alter table @env:lm_schema_name@.' || P_TABLE_NAME || ' add partition ' ||
						P_PART_NAME || ' values (''' || JOB_ID || ''') storage (initial @env:initial_extent@)' ;

					--DBMS_OUTPUT.put_line (EXEC_STR);
					EXECUTE IMMEDIATE (EXEC_STR);
				END;
			END IF;

		END LOOP;

		CLOSE PARTITIONED_TABLES_SET;

		EXCEPTION
			WHEN OTHERS THEN
				RAISE;
	END;
	@go@

	/* ------------------------------------------------------------ */
	/* MESSAGE SCREENING RL TABLES PARTITIONING  procedure */
	/* ------------------------------------------------------------ */

	CREATE OR REPLACE PROCEDURE @env:lm_schema_name@.WLF_RL_MS_CREATE_PARTITION ( JOB_ID VARCHAR2 )
	AS

	CURSOR	PARTITIONED_TABLES_SET IS
	SELECT	DISTINCT TABLE_NAME
	FROM	USER_TAB_PARTITIONS WHERE TABLE_NAME LIKE 'WLF_RL_MESSAGE%'
	ORDER BY TABLE_NAME;

	PARTITIONED_TABLE	PARTITIONED_TABLES_SET%ROWTYPE;

	P_TABLE_NAME		VARCHAR2(30);
	P_PART_NAME		VARCHAR2(30);
	P_COUNTER		NUMBER;
	EXEC_STR		VARCHAR2(1000);

	BEGIN

		/* Generated the partition name */
		P_PART_NAME := 'P' || rtrim(substr(JOB_ID,1,2)) || '_' || rtrim(substr(JOB_ID,4,10));


			OPEN PARTITIONED_TABLES_SET;

		LOOP

			FETCH PARTITIONED_TABLES_SET INTO PARTITIONED_TABLE;
			EXIT WHEN PARTITIONED_TABLES_SET%NOTFOUND;

			P_TABLE_NAME := PARTITIONED_TABLE.TABLE_NAME;
			--DBMS_OUTPUT.put_line ('Table Name: ' || to_char(P_TABLE_NAME));

			SELECT	count(*)
			INTO	P_COUNTER
			FROM	USER_TAB_PARTITIONS
			WHERE	TABLE_NAME = P_TABLE_NAME and PARTITION_NAME = P_PART_NAME;

			--DBMS_OUTPUT.put_line ('Counter: ' || to_char(P_COUNTER));

			IF P_COUNTER = 0 THEN
				BEGIN
					EXEC_STR := 'alter table @env:lm_schema_name@.' || P_TABLE_NAME || ' add partition ' ||
						P_PART_NAME || ' values (''' || JOB_ID || ''') storage (initial @env:initial_extent@)' ;

					--DBMS_OUTPUT.put_line (EXEC_STR);
					EXECUTE IMMEDIATE (EXEC_STR);
				END;
			END IF;

		END LOOP;

		CLOSE PARTITIONED_TABLES_SET;


		EXCEPTION
			WHEN OTHERS THEN
				RAISE;
	END;

	@go@

	/* ------------------------------------------------------------ */
	/* create initial partitioning for upgrading RL and RL_MS tables */
	/* ------------------------------------------------------------ */

	CREATE OR REPLACE PROCEDURE  @env:lm_schema_name@.WLF_UPGRADE_RL_TABLES
	AS
	CURSOR ALL_JOB_ID_SET IS
		SELECT DISTINCT JOB_ID from @env:lm_schema_name@.WLF_RL_PARTY
		UNION
		SELECT DISTINCT JOB_ID from @env:lm_schema_name@.WLF_RL_MESSAGE
		ORDER BY JOB_ID;

	ALL_EXISTING_JOB_ID	ALL_JOB_ID_SET%ROWTYPE;
	ALL_JOB_ID		VARCHAR2(30);
	EXEC_STR		VARCHAR2(1000);
	MS_JOB_ID		VARCHAR2(30);
	EXEC_STR2   VARCHAR2(1000);
	BEGIN
		OPEN ALL_JOB_ID_SET;
		LOOP
			FETCH ALL_JOB_ID_SET INTO ALL_EXISTING_JOB_ID;
			EXIT WHEN ALL_JOB_ID_SET%NOTFOUND;
			ALL_JOB_ID := ALL_EXISTING_JOB_ID.JOB_ID;
			@env:lm_schema_name@.WLF_RL_CREATE_PARTITION(ALL_JOB_ID);
			@env:lm_schema_name@.WLF_RL_MS_CREATE_PARTITION(ALL_JOB_ID);
		END LOOP;
		CLOSE ALL_JOB_ID_SET;
		EXCEPTION
		WHEN OTHERS THEN
			RAISE;
	END;

	@go@

	/*---------------------------------------------------------------------------*/
	/* call the procedure to create initial partitioning in RL and RL_MS tables */
	/*--------------------------------------------------------------------------*/

	EXEC @env:lm_schema_name@.WLF_UPGRADE_RL_TABLES
	@go@

	drop procedure @env:lm_schema_name@.WLF_UPGRADE_RL_TABLES
	@go@

	/*------------------------------------------------------------------------------*/
	/* Start redefinition of RL and RL MS tables, move data and drop interim tables */
	/*------------------------------------------------------------------------------*/

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_PARTY','WLF_RL_PARTY_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_PARTY', 'WLF_RL_PARTY_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_PARTY','WLF_RL_PARTY_NEW')

	drop table @env:lm_schema_name@.WLF_RL_PARTY_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_ID','WLF_RL_ID_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_ID', 'WLF_RL_ID_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_ID','WLF_RL_ID_NEW')

	drop table @env:lm_schema_name@.WLF_RL_ID_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_KEYWORD','WLF_RL_HIT_KEYWORD_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_KEYWORD', 'WLF_RL_HIT_KEYWORD_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_KEYWORD','WLF_RL_HIT_KEYWORD_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_POB','WLF_RL_HIT_POB_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_POB', 'WLF_RL_HIT_POB_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_POB','WLF_RL_HIT_POB_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_POB_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_MESSAGE_HIT','WLF_RL_MESSAGE_HIT_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_MESSAGE_HIT', 'WLF_RL_MESSAGE_HIT_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_MESSAGE_HIT','WLF_RL_MESSAGE_HIT_NEW')

	drop table @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_ID','WLF_RL_HIT_ID_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_ID', 'WLF_RL_HIT_ID_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_ID','WLF_RL_HIT_ID_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_ID_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_ALIAS','WLF_RL_HIT_ALIAS_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_ALIAS', 'WLF_RL_HIT_ALIAS_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_ALIAS','WLF_RL_HIT_ALIAS_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_ALIAS_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_ADDRESS','WLF_RL_ADDRESS_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_ADDRESS', 'WLF_RL_ADDRESS_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_ADDRESS','WLF_RL_ADDRESS_NEW')

	drop table @env:lm_schema_name@.WLF_RL_ADDRESS_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_MESSAGE','WLF_RL_MESSAGE_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_MESSAGE', 'WLF_RL_MESSAGE_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_MESSAGE','WLF_RL_MESSAGE_NEW')

	drop table @env:lm_schema_name@.WLF_RL_MESSAGE_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_MESSAGE_INTERMEDIATE_FI','WLF_RL_MESSAGE_INTERMED_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_MESSAGE_INTERMEDIATE_FI', 'WLF_RL_MESSAGE_INTERMED_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_MESSAGE_INTERMEDIATE_FI','WLF_RL_MESSAGE_INTERMED_NEW')

	drop table @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMED_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_NATIONALITY','WLF_RL_NATIONALITY_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_NATIONALITY', 'WLF_RL_NATIONALITY_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_NATIONALITY','WLF_RL_NATIONALITY_NEW')

	drop table @env:lm_schema_name@.WLF_RL_NATIONALITY_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_DOB','WLF_RL_HIT_DOB_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_DOB', 'WLF_RL_HIT_DOB_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_DOB','WLF_RL_HIT_DOB_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_DOB_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_ADDRESS','WLF_RL_HIT_ADDRESS_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_ADDRESS', 'WLF_RL_HIT_ADDRESS_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_ADDRESS','WLF_RL_HIT_ADDRESS_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT','WLF_RL_HIT_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT', 'WLF_RL_HIT_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT','WLF_RL_HIT_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_ADDINFO','WLF_RL_HIT_ADDINFO_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_ADDINFO', 'WLF_RL_HIT_ADDINFO_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_ADDINFO','WLF_RL_HIT_ADDINFO_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_CATEGORY','WLF_RL_HIT_CATEGORY_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_CATEGORY', 'WLF_RL_HIT_CATEGORY_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_CATEGORY','WLF_RL_HIT_CATEGORY_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_HIT_NATIONALITY','WLF_RL_HIT_NATIONALITY_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_HIT_NATIONALITY', 'WLF_RL_HIT_NATIONALITY_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_HIT_NATIONALITY','WLF_RL_HIT_NATIONALITY_NEW')

	drop table @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_NEW cascade constraints purge
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_RL_ALIAS','WLF_RL_ALIAS_NEW',NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_RL_ALIAS', 'WLF_RL_ALIAS_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_RL_ALIAS','WLF_RL_ALIAS_NEW')

	drop table @env:lm_schema_name@.WLF_RL_ALIAS_NEW cascade constraints purge
	@go@

	/*----------------------------------------------------------------*/
	/* Add indexes and primary key constraints to RL and RL MS tables */
	/*----------------------------------------------------------------*/

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY ADD
	CONSTRAINT PK_RL_PARTY PRIMARY KEY @nonclustered@
	(
		ID,INSTANCE_ID,JOB_ID
	) 	 using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY ADD
	CONSTRAINT PK_RL_NATIONALITY PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,PARTY_ID
	) 	 using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_NAT_IX1 on @env:lm_schema_name@.WLF_RL_NATIONALITY(JOB_ID,PARTY_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS ADD
	CONSTRAINT PK_RL_ADDRESS PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,PARTY_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ADDR_IX1 on @env:lm_schema_name@.WLF_RL_ADDRESS(JOB_ID,PARTY_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local

	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID ADD
	CONSTRAINT PK_RL_ID PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,PARTY_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ID_IX1 on @env:lm_schema_name@.WLF_RL_ID(JOB_ID,PARTY_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ALIAS ADD
	CONSTRAINT PK_RL_ALIAS PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,PARTY_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_ALIAS_IX1 on @env:lm_schema_name@.WLF_RL_ALIAS(JOB_ID,PARTY_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT ADD
	CONSTRAINT PK_RL_HIT PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_IX1 on @env:lm_schema_name@.WLF_RL_HIT(JOB_ID,PARTY_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID ADD
	CONSTRAINT PK_RL_HIT_ID PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ID_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ID(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS ADD
	CONSTRAINT PK_RL_HIT_ADDRESS PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ADDR_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ADDRESS(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY ADD
	CONSTRAINT PK_RL_HIT_NATIONALITY PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_NAT_IX1 on @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS ADD
	CONSTRAINT PK_RL_HIT_ALIAS PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ALIAS_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ALIAS(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY ADD
	CONSTRAINT PK_RL_HIT_CATEGORY PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_CAT_IX1 on @env:lm_schema_name@.WLF_RL_HIT_CATEGORY(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD ADD
	CONSTRAINT PK_RL_HIT_KEYWORD PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

    create index WLF_RL_HIT_KEY_IX1 on @env:lm_schema_name@.WLF_RL_HIT_KEYWORD(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_POB ADD
	CONSTRAINT PK_RL_HIT_POB PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_POB_IX1 on @env:lm_schema_name@.WLF_RL_HIT_POB(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO ADD
	CONSTRAINT PK_RL_HIT_ADDINFO PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_ADDINFO_IX1 on @env:lm_schema_name@.WLF_RL_HIT_ADDINFO(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB ADD
	CONSTRAINT PK_RL_HIT_DOB PRIMARY KEY @nonclustered@
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_HIT_DOB_IX1 on @env:lm_schema_name@.WLF_RL_HIT_DOB(JOB_ID,HIT_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE ADD
		CONSTRAINT PK_RL_MESSAGE PRIMARY KEY @nonclustered@
		(
			ID,
			INSTANCE_ID,
			JOB_ID
		) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT ADD
		CONSTRAINT PK_RL_MESSAGE_HIT PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID
		) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_RL_MESSAGE_HIT_IX1 on @env:lm_schema_name@.WLF_RL_MESSAGE_HIT(JOB_ID,WLF_RL_MESSAGE_ID)
    @storage_index_insert_update @env:tablespace_index@ default@ local
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI ADD
		CONSTRAINT PK_WLF_RL_MSG_INTERMEDIATE_FI PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,WLF_RL_MESSAGE_ID
		) using index local @storage_index_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI ADD
		CONSTRAINT FK_WLF_RL_MSG_INTERMEDIATE_FI
		FOREIGN KEY (WLF_RL_MESSAGE_ID, INSTANCE_ID,JOB_ID)
		REFERENCES @env:lm_schema_name@.WLF_RL_MESSAGE(ID, INSTANCE_ID,JOB_ID)
	@go@

]



[mssql

	/* ------------------------------------------------------------ */
	/* INSERT INTO RL TABLES FROM BKP TABLES AND DROP BKP TABLES */
	/* ------------------------------------------------------------ */

	insert into @env:lm_schema_name@.WLF_RL_PARTY (ID
    ,INSTANCE_ID,JOB_ID,PROCESS_DATE,PARTY_KEY,PARTY_TYPE,PARTY_NAME,PARTY_DOB,PARTY_BIRTH_COUNTRY,GENDER,CUSTOM_FIELD1,CUSTOM_FIELD2
    ,CUSTOM_FIELD3,CUSTOM_FIELD4,CUSTOM_FIELD5,CUSTOM_FIELD6,CUSTOM_FIELD7,CUSTOM_FIELD8,CUSTOM_FIELD9,CUSTOM_FIELD10,CUSTOM_FIELD11
    ,CUSTOM_FIELD12,CUSTOM_FIELD13,CUSTOM_FIELD14,CUSTOM_FIELD15,CUSTOM_FIELD16,CUSTOM_FIELD17,CUSTOM_FIELD18)
	select ID,INSTANCE_ID,JOB_ID,PROCESS_DATE,PARTY_KEY,PARTY_TYPE,PARTY_NAME,PARTY_DOB,PARTY_BIRTH_COUNTRY,GENDER,CUSTOM_FIELD1
    ,CUSTOM_FIELD2,CUSTOM_FIELD3,CUSTOM_FIELD4,CUSTOM_FIELD5,CUSTOM_FIELD6,CUSTOM_FIELD7,CUSTOM_FIELD8,CUSTOM_FIELD9,CUSTOM_FIELD10
    ,CUSTOM_FIELD11,CUSTOM_FIELD12,CUSTOM_FIELD13,CUSTOM_FIELD14,CUSTOM_FIELD15,CUSTOM_FIELD16,CUSTOM_FIELD17,CUSTOM_FIELD18
	from @env:lm_schema_name@.WLF_RL_PARTY_BKP
	@go@


	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_PARTY_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_PARTY)
	drop table @env:lm_schema_name@.WLF_RL_PARTY_BKP
	else
	RAISERROR ('WLF_RL_PARTY_BKP table record count doesn''t match WLF_RL_PARTY table', 20, 1) WITH LOG
	@go@

	insert into @env:lm_schema_name@.WLF_RL_NATIONALITY (ID,JOB_ID,INSTANCE_ID,PARTY_ID,COUNTRY_CODE)
    select a.ID,b.JOB_ID,a.INSTANCE_ID,a.PARTY_ID,a.COUNTRY_CODE FROM @env:lm_schema_name@.WLF_RL_NATIONALITY_BKP a,
	@env:lm_schema_name@.WLF_RL_PARTY b where a.PARTY_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_NATIONALITY_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_NATIONALITY)
	drop table @env:lm_schema_name@.WLF_RL_NATIONALITY_BKP
	else
	RAISERROR ('WLF_RL_NATIONALITY_BKP table record count doesn''t match WLF_RL_NATIONALITY table', 20, 1) WITH LOG
	@go@

	insert into @env:lm_schema_name@.WLF_RL_ADDRESS
	(ID,JOB_ID,INSTANCE_ID,PARTY_ID,ADDRESS1,ADDRESS2,CITY,ZIP_CODE,STATE_PROVIDENCE,COUNTRY)
	select a.ID,b.JOB_ID,a.INSTANCE_ID,a.PARTY_ID,a.ADDRESS1,a.ADDRESS2,a.CITY,a.ZIP_CODE,a.STATE_PROVIDENCE,a.COUNTRY
	from @env:lm_schema_name@.WLF_RL_ADDRESS_BKP a, @env:lm_schema_name@.WLF_RL_PARTY b
	where a.PARTY_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_ADDRESS_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_ADDRESS)
	drop table @env:lm_schema_name@.WLF_RL_ADDRESS_BKP
	else
	RAISERROR ('WLF_RL_ADDRESS_BKP table record count doesn''t match WLF_RL_ADDRESS table', 20, 1) WITH LOG
	@go@

	insert into @env:lm_schema_name@.WLF_RL_ID (ID,JOB_ID,INSTANCE_ID,PARTY_ID,ID_TYPE,ID_NUMBER,ID_COUNTRY)
	select a.ID,b.JOB_ID,a.INSTANCE_ID,a.PARTY_ID,a.ID_TYPE,a.ID_NUMBER,a.ID_COUNTRY from @env:lm_schema_name@.WLF_RL_ID_BKP a,
	@env:lm_schema_name@.WLF_RL_PARTY b where a.PARTY_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_ID_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_ID)
	drop table @env:lm_schema_name@.WLF_RL_ID_BKP
	else
	RAISERROR ('WLF_RL_ID_BKP table record count doesn''t match WLF_RL_ID table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_ALIAS (ID,JOB_ID,INSTANCE_ID,PARTY_ID,ALIAS_FIRST_NAME,ALIAS_MIDDLE_NAME,ALIAS_MAIDEN_NAME,ALIAS_LAST_NAME,
	ALIAS_FULL_NAME,ALIAS_IS_BROKEN_NAME) SELECT a.ID,b.JOB_ID,a.INSTANCE_ID,a.PARTY_ID,a.ALIAS_FIRST_NAME,a.ALIAS_MIDDLE_NAME,a.ALIAS_MAIDEN_NAME,
	a.ALIAS_LAST_NAME,a.ALIAS_FULL_NAME,a.ALIAS_IS_BROKEN_NAME FROM @env:lm_schema_name@.WLF_RL_ALIAS_BKP a,
	@env:lm_schema_name@.WLF_RL_PARTY b where a.PARTY_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_ALIAS_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_ALIAS)
	drop table @env:lm_schema_name@.WLF_RL_ALIAS_BKP
	else
	RAISERROR ('WLF_RL_ALIAS_BKP table record count doesn''t match WLF_RL_ALIAS table', 20, 1) WITH LOG
	@go@

	insert into @env:lm_schema_name@.WLF_RL_HIT (ID,JOB_ID,INSTANCE_ID,PARTY_ID,LIST_ID,LIST_UPDATE_DATE,ENTRY_ID,ENTRY_UPDATE_DATE,TYPE,
	NAME,SCORE,GENDER,CUSTOM_FIELD1,CUSTOM_FIELD2,CUSTOM_FIELD3,CUSTOM_FIELD4,CUSTOM_FIELD5,CUSTOM_FIELD6,CUSTOM_FIELD7,CUSTOM_FIELD8,
	CUSTOM_FIELD9,CUSTOM_FIELD10,CUSTOM_FIELD11,CUSTOM_FIELD12,CUSTOM_FIELD13,CUSTOM_FIELD14,CUSTOM_FIELD15,CUSTOM_FIELD16,CUSTOM_FIELD17,
	CUSTOM_FIELD18,HIT_DATA_ENTERED,DATE_OF_DEATH,TITLE,POSITION,HIT_ENTRY_TYPE)
	select a.ID,b.JOB_ID,a.INSTANCE_ID,a.PARTY_ID,a.LIST_ID,a.LIST_UPDATE_DATE,a.ENTRY_ID,a.ENTRY_UPDATE_DATE,a.TYPE,a.NAME,a.SCORE,
	a.GENDER,a.CUSTOM_FIELD1,a.CUSTOM_FIELD2,a.CUSTOM_FIELD3,a.CUSTOM_FIELD4,a.CUSTOM_FIELD5,a.CUSTOM_FIELD6,a.CUSTOM_FIELD7,
	a.CUSTOM_FIELD8,a.CUSTOM_FIELD9,a.CUSTOM_FIELD10,a.CUSTOM_FIELD11,a.CUSTOM_FIELD12,a.CUSTOM_FIELD13,a.CUSTOM_FIELD14,
	a.CUSTOM_FIELD15,a.CUSTOM_FIELD16,a.CUSTOM_FIELD17,a.CUSTOM_FIELD18,a.HIT_DATA_ENTERED,a.DATE_OF_DEATH,a.TITLE,a.POSITION,
	a.HIT_ENTRY_TYPE from @env:lm_schema_name@.WLF_RL_HIT_BKP a, @env:lm_schema_name@.WLF_RL_PARTY b where a.PARTY_ID = b.ID
	and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT)
	drop table @env:lm_schema_name@.WLF_RL_HIT_BKP
	else
	RAISERROR ('WLF_RL_HIT_BKP table record count doesn''t match WLF_RL_HIT table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_MESSAGE
    (ID,INSTANCE_ID,JOB_ID,JOB_TIMESTAMP,PARTY_KEY,MESSAGE_KEY,MESSAGE_INSTANCE_NUMBER,MESSAGE_REF_NUMBER,MESSAGE_SOURCE_TYPE,
	MESSAGE_TYPE_CD,MESSAGE_DATE_TIME,AMOUNT,CURRENCY_CD,PRODUCT_KEY,MESSAGE_DIRECTION,MESSAGE_INSTRUCTIONS,ADDITIONAL_MESSAGE_TEXT,
	MESSAGE_TEXT,ORIGINATOR_NAME,ORIGINATOR_PARTY_IDS,ORIGINATOR_ADDRESS_LINE_1,ORIGINATOR_ADDRESS_LINE_2,ORIGINATOR_ADDRESS_LINE_3,
	ORIGINATOR_CITY,ORIGINATOR_COUNTRY_CD,ORIGINATOR_PARTY_TYPE_CD,ORIGINATOR_PO_BOX,ORIGINATOR_STATE_PROVINCE,ORIGINATOR_ZIP_CD,
	ORIGINATOR_ADDITIONAL_INFO,ORIGINATING_FI_CD,ORIGINATING_FI_COUNTRY_CD,ORIGINATING_FI_ORG_NAME,BENEFICIARY_PRIMARY_NAME,
	BENEFICIARY_PARTY_IDS,BENEFICIARY_ADDRESS_LINE_1,BENEFICIARY_ADDRESS_LINE_2,BENEFICIARY_ADDRESS_LINE_3,BENEFICIARY_PO_BOX,
	BENEFICIARY_CITY,BENEFICIARY_STATE_PROVINCE,BENEFICIARY_ZIP_CD,BENEFICIARY_COUNTRY_CD,BENEFICIARY_ADDITIONAL_INFO,
	BENEFICIARY_FI_ORG_NAME,BENEFICIARY_FI_CD,BENEFICIARY_FI_PARTY_TYPE_CD,BENEFICIARY_FI_COUNTRY_CD,RECEIVING_FI_ADDITIONAL_INFO,
	RECEIVING_FI_CD,RECEIVING_FI_COUNTRY_CD,RECEIVING_FI_ORGANIZATION_NAME,SENDING_FI_ADDITIONAL_INFO,SENDING_FI_CD,SENDING_FI_COUNTRY_CD,
	SENDING_FI_ORGANIZATION_NAME,FI_TO_FI_INFO,CUSTOM_FIELD1,CUSTOM_FIELD2,CUSTOM_FIELD3,CUSTOM_FIELD4,CUSTOM_FIELD5,CUSTOM_FIELD6,
	CUSTOM_FIELD7,CUSTOM_FIELD8,CUSTOM_FIELD9,CUSTOM_FIELD10,CUSTOM_FIELD11,CUSTOM_FIELD12,CUSTOM_FIELD13,CUSTOM_FIELD14,CUSTOM_FIELD15,
	CUSTOM_FIELD16,CUSTOM_FIELD17,CUSTOM_FIELD18,CUSTOM_FIELD19,CUSTOM_FIELD20)
	SELECT ID,INSTANCE_ID,JOB_ID,JOB_TIMESTAMP,PARTY_KEY,MESSAGE_KEY,MESSAGE_INSTANCE_NUMBER,MESSAGE_REF_NUMBER,MESSAGE_SOURCE_TYPE,
	MESSAGE_TYPE_CD,MESSAGE_DATE_TIME,AMOUNT,CURRENCY_CD,PRODUCT_KEY,MESSAGE_DIRECTION,MESSAGE_INSTRUCTIONS,ADDITIONAL_MESSAGE_TEXT,
	MESSAGE_TEXT,ORIGINATOR_NAME,ORIGINATOR_PARTY_IDS,ORIGINATOR_ADDRESS_LINE_1,ORIGINATOR_ADDRESS_LINE_2,ORIGINATOR_ADDRESS_LINE_3,
	ORIGINATOR_CITY,ORIGINATOR_COUNTRY_CD,ORIGINATOR_PARTY_TYPE_CD,ORIGINATOR_PO_BOX,ORIGINATOR_STATE_PROVINCE,ORIGINATOR_ZIP_CD,
	ORIGINATOR_ADDITIONAL_INFO,ORIGINATING_FI_CD,ORIGINATING_FI_COUNTRY_CD,ORIGINATING_FI_ORG_NAME,BENEFICIARY_PRIMARY_NAME,
	BENEFICIARY_PARTY_IDS,BENEFICIARY_ADDRESS_LINE_1,BENEFICIARY_ADDRESS_LINE_2,BENEFICIARY_ADDRESS_LINE_3,BENEFICIARY_PO_BOX,
	BENEFICIARY_CITY,BENEFICIARY_STATE_PROVINCE,BENEFICIARY_ZIP_CD,BENEFICIARY_COUNTRY_CD,BENEFICIARY_ADDITIONAL_INFO,
	BENEFICIARY_FI_ORG_NAME,BENEFICIARY_FI_CD,BENEFICIARY_FI_PARTY_TYPE_CD,BENEFICIARY_FI_COUNTRY_CD,RECEIVING_FI_ADDITIONAL_INFO,
	RECEIVING_FI_CD,RECEIVING_FI_COUNTRY_CD,RECEIVING_FI_ORGANIZATION_NAME,SENDING_FI_ADDITIONAL_INFO,SENDING_FI_CD,SENDING_FI_COUNTRY_CD,
	SENDING_FI_ORGANIZATION_NAME,FI_TO_FI_INFO,CUSTOM_FIELD1,CUSTOM_FIELD2,CUSTOM_FIELD3,CUSTOM_FIELD4,CUSTOM_FIELD5,CUSTOM_FIELD6,
	CUSTOM_FIELD7,CUSTOM_FIELD8,CUSTOM_FIELD9,CUSTOM_FIELD10,CUSTOM_FIELD11,CUSTOM_FIELD12,CUSTOM_FIELD13,CUSTOM_FIELD14,CUSTOM_FIELD15,
	CUSTOM_FIELD16,CUSTOM_FIELD17,CUSTOM_FIELD18,CUSTOM_FIELD19,CUSTOM_FIELD20 FROM @env:lm_schema_name@.WLF_RL_MESSAGE_BKP
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_MESSAGE_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_MESSAGE)
	drop table @env:lm_schema_name@.WLF_RL_MESSAGE_BKP
	else
	RAISERROR ('WLF_RL_MESSAGE_BKP table record count doesn''t match WLF_RL_MESSAGE table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_MESSAGE_HIT
    (ID,JOB_ID,INSTANCE_ID,WLF_RL_MESSAGE_ID,LIST_ID,LIST_UPDATE_DATE,ENTRY_ID,ENTRY_UPDATE_DATE,TYPE,NAME,SCORE,GENDER,CUSTOM_FIELD1,
	CUSTOM_FIELD2,CUSTOM_FIELD3,CUSTOM_FIELD4,CUSTOM_FIELD5,CUSTOM_FIELD6,CUSTOM_FIELD7,CUSTOM_FIELD8,CUSTOM_FIELD9,CUSTOM_FIELD10,
	CUSTOM_FIELD11,CUSTOM_FIELD12,CUSTOM_FIELD13,CUSTOM_FIELD14,CUSTOM_FIELD15,CUSTOM_FIELD16,CUSTOM_FIELD17,CUSTOM_FIELD18)
	SELECT a.ID,b.JOB_ID,a.INSTANCE_ID,a.WLF_RL_MESSAGE_ID,a.LIST_ID,a.LIST_UPDATE_DATE,a.ENTRY_ID,a.ENTRY_UPDATE_DATE,a.TYPE,a.NAME,a.SCORE,a.GENDER,
	a.CUSTOM_FIELD1,a.CUSTOM_FIELD2,a.CUSTOM_FIELD3,a.CUSTOM_FIELD4,a.CUSTOM_FIELD5,a.CUSTOM_FIELD6,a.CUSTOM_FIELD7,a.CUSTOM_FIELD8,
	a.CUSTOM_FIELD9,a.CUSTOM_FIELD10,a.CUSTOM_FIELD11,a.CUSTOM_FIELD12,a.CUSTOM_FIELD13,a.CUSTOM_FIELD14,a.CUSTOM_FIELD15,a.CUSTOM_FIELD16,
	a.CUSTOM_FIELD17,a.CUSTOM_FIELD18 FROM @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_BKP a, @env:lm_schema_name@.WLF_RL_MESSAGE b
	WHERE a.WLF_RL_MESSAGE_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_MESSAGE_HIT)
	drop table @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_BKP
	else
	RAISERROR ('WLF_RL_MESSAGE_HIT_BKP table record count doesn''t match WLF_RL_MESSAGE_HIT table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_ID (ID,JOB_ID,INSTANCE_ID,HIT_ID,ID_TYPE,ID_NUMBER,ID_COUNTRY)
	SELECT a.ID,b.JOB_ID,a.INSTANCE_ID,a.HIT_ID,a.ID_TYPE,a.ID_NUMBER,a.ID_COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_ID_BKP a,
	@env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION
	SELECT a.ID,b.JOB_ID,a.INSTANCE_ID,a.HIT_ID,a.ID_TYPE,a.ID_NUMBER,a.ID_COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_ID_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_ID_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_ID)
	drop table @env:lm_schema_name@.WLF_RL_HIT_ID_BKP
	else
	RAISERROR ('WLF_RL_HIT_ID_BKP table record count doesn''t match WLF_RL_HIT_ID table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_ADDRESS (ID, JOB_ID, INSTANCE_ID, HIT_ID, ADDRESS1, ADDRESS2, CITY, STATE_PROVINCE, POSTAL_CODE, COUNTRY)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.ADDRESS1, a.ADDRESS2, a.CITY, a.STATE_PROVINCE, a.POSTAL_CODE, a.COUNTRY
	FROM @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_BKP a, @env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION
	SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.ADDRESS1, a.ADDRESS2, a.CITY, a.STATE_PROVINCE, a.POSTAL_CODE, a.COUNTRY
	FROM @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_BKP a,	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_ADDRESS)
	drop table @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_BKP
	else
	RAISERROR ('WLF_RL_HIT_ADDRESS_BKP table record count doesn''t match WLF_RL_HIT_ADDRESS table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY (ID, JOB_ID, INSTANCE_ID, HIT_ID, COUNTRY)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_BKP a,
	@env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION
	SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY)
	drop table @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_BKP
	else
	RAISERROR ('WLF_RL_HIT_NATIONALITY_BKP table record count doesn''t match WLF_RL_HIT_NATIONALITY table', 20, 1) WITH LOG
	@go@

    INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_ALIAS (ID, JOB_ID, INSTANCE_ID, HIT_ID, NAME, MATCH_STRENGTH)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.NAME, a.MATCH_STRENGTH FROM @env:lm_schema_name@.WLF_RL_HIT_ALIAS_BKP a,
	@env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION
	SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.NAME, a.MATCH_STRENGTH FROM @env:lm_schema_name@.WLF_RL_HIT_ALIAS_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_ALIAS_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_ALIAS)
	drop table @env:lm_schema_name@.WLF_RL_HIT_ALIAS_BKP
	else
	RAISERROR ('WLF_RL_HIT_ALIAS_BKP table record count doesn''t match WLF_RL_HIT_ALIAS table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_CATEGORY (ID, JOB_ID, INSTANCE_ID, HIT_ID, CATEGORY)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.CATEGORY FROM @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_BKP a,
	@env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION
	SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.CATEGORY FROM @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_CATEGORY)
	drop table @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_BKP
	else
	RAISERROR ('WLF_RL_HIT_CATEGORY_BKP table record count doesn''t match WLF_RL_HIT_CATEGORY table', 20, 1) WITH LOG
	@go@

    INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_POB (ID, JOB_ID, INSTANCE_ID, HIT_ID, PLACE, COUNTRY)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.PLACE, a.COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_POB_BKP a,
	@env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION
	SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.PLACE, a.COUNTRY FROM @env:lm_schema_name@.WLF_RL_HIT_POB_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_POB_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_POB)
	drop table @env:lm_schema_name@.WLF_RL_HIT_POB_BKP
	else
	RAISERROR ('WLF_RL_HIT_POB_BKP table record count doesn''t match WLF_RL_HIT_POB table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_ADDINFO (ID, JOB_ID, INSTANCE_ID, HIT_ID, TYPE, VALUE)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.TYPE, a.VALUE FROM @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_BKP a,
	@env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION ALL
	SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.TYPE, a.VALUE FROM @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_ADDINFO)
	drop table @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_BKP
	else
	RAISERROR ('WLF_RL_HIT_ADDINFO_BKP table record count doesn''t match WLF_RL_HIT_ADDINFO table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_DOB (ID, JOB_ID, INSTANCE_ID, HIT_ID, DOB, YOB)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.DOB, a.YOB FROM @env:lm_schema_name@.WLF_RL_HIT_DOB_BKP a,
	@env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION
	SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.DOB, a.YOB FROM @env:lm_schema_name@.WLF_RL_HIT_DOB_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_DOB_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_DOB)
	drop table @env:lm_schema_name@.WLF_RL_HIT_DOB_BKP
	else
	RAISERROR ('WLF_RL_HIT_DOB_BKP table record count doesn''t match WLF_RL_HIT_DOB table', 20, 1) WITH LOG
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_RL_HIT_KEYWORD (ID, JOB_ID, INSTANCE_ID, HIT_ID, KEYWORD)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.KEYWORD FROM @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_BKP a,
	@env:lm_schema_name@.WLF_RL_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	UNION
	SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.HIT_ID, a.KEYWORD FROM @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE_HIT b where a.HIT_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_HIT_KEYWORD)
	drop table @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_BKP
	else
	RAISERROR ('WLF_RL_HIT_KEYWORD_BKP table record count doesn''t match WLF_RL_HIT_KEYWORD table', 20, 1) WITH LOG
	@go@


    INSERT INTO @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI (ID, JOB_ID, INSTANCE_ID, WLF_RL_MESSAGE_ID, FI_CODE, FI_COUNTRY_CODE, FI_NAME)
    SELECT a.ID, b.JOB_ID, a.INSTANCE_ID, a.WLF_RL_MESSAGE_ID, a.FI_CODE, a.FI_COUNTRY_CODE, a.FI_NAME
	FROM @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIAT_BKP a,
	@env:lm_schema_name@.WLF_RL_MESSAGE b WHERE a.WLF_RL_MESSAGE_ID = b.ID and a.INSTANCE_ID = b.INSTANCE_ID
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIAT_BKP) =  (select COUNT(*) from @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI)
	drop table @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIAT_BKP
	else
	RAISERROR ('WLF_RL_MESSAGE_INTERMEDIAT_BKP table record count doesn''t match WLF_RL_MESSAGE_INTERMEDIATE_FI table', 20, 1) WITH LOG
	@go@

	/*-----------------------------------------------*/
	/*	create temp tables for partition switching	*/
	/*---------------------------------------------*/

	CREATE TABLE @env:lm_schema_name@.WLF_RL_PARTY_TEMP (
		ID					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		JOB_ID				@ustring@(255) NOT NULL,
		PROCESS_DATE		@datetime@,
		PARTY_KEY			@ustring@(255),
		PARTY_TYPE			@ustring@(255),
		PARTY_NAME			@ustring@(255),
		PARTY_DOB			@datetime@,
		PARTY_BIRTH_COUNTRY		@ustring@(255),
		GENDER					@ustring@(20),
		CUSTOM_FIELD1			@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16 		@ustring@(4000)   NULL,
		CUSTOM_FIELD17 		@ustring@(4000)   NULL,
		CUSTOM_FIELD18 		@ustring@(4000)   NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY_TEMP ADD
		CONSTRAINT PK_RL_PARTY_T PRIMARY KEY @nonclustered@
		(
			ID,INSTANCE_ID,JOB_ID
		)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY_TEMP (
	ID				@int@ NOT NULL,
	INSTANCE_ID		@ustring@(255) NOT NULL,
	PARTY_ID		@int@ NOT NULL,
	COUNTRY_CODE	@ustring@(255),
	JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_NATIONALITY_TEMP ADD
	CONSTRAINT PK_RL_NATIONALITY_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,PARTY_ID
	)
	@go@

	create index WLF_RL_NAT_IX1_T on @env:lm_schema_name@.WLF_RL_NATIONALITY_TEMP(JOB_ID,PARTY_ID)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_ADDRESS_TEMP (
		ID				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		ADDRESS1		@ustring@(255),
		ADDRESS2		@ustring@(255),
		CITY			@ustring@(255),
		ZIP_CODE		@ustring@(255),
		STATE_PROVIDENCE	@ustring@(255),
		COUNTRY				@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS_TEMP ADD
		CONSTRAINT PK_RL_ADDRESS_T PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,PARTY_ID
		)
	@go@

	create index WLF_RL_ADDR_IX1_T on @env:lm_schema_name@.WLF_RL_ADDRESS_TEMP(JOB_ID,PARTY_ID)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_ID_TEMP (
		ID				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		PARTY_ID		@int@ NOT NULL,
		ID_TYPE			@ustring@(255),
		ID_NUMBER		@ustring@(255),
		ID_COUNTRY		@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID_TEMP ADD
		CONSTRAINT PK_RL_ID_T PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,PARTY_ID
		)
	@go@

	create index WLF_RL_ID_IX1_T on @env:lm_schema_name@.WLF_RL_ID_TEMP(JOB_ID,PARTY_ID)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_ALIAS_TEMP (
		ID						@int@ NOT NULL,
		INSTANCE_ID				@ustring@(255) NOT NULL,
		PARTY_ID				@int@ NOT NULL,
		ALIAS_FIRST_NAME		@ustring@(255),
		ALIAS_MIDDLE_NAME		@ustring@(255),
		ALIAS_MAIDEN_NAME		@ustring@(255),
		ALIAS_LAST_NAME			@ustring@(255),
		ALIAS_FULL_NAME			@ustring@(2000),
		ALIAS_IS_BROKEN_NAME	@tinyint@,
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ALIAS_TEMP ADD
		CONSTRAINT PK_RL_ALIAS_T PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,PARTY_ID
		)
	@go@

	create index WLF_RL_ALIAS_IX1_T on @env:lm_schema_name@.WLF_RL_ALIAS_TEMP(JOB_ID,PARTY_ID)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_TEMP (
		ID				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		PARTY_ID		@int@,
		LIST_ID			@ustring@(255),
		LIST_UPDATE_DATE	@datetime@,
		ENTRY_ID		@ustring@(255),
		ENTRY_UPDATE_DATE	@datetime@,
		TYPE			@ustring@(255),
		NAME			@ustring@(255),
		SCORE			@int@,
		GENDER			@ustring@(10),
		CUSTOM_FIELD1		@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@ustring@(4000),
		CUSTOM_FIELD17		@ustring@(4000),
		CUSTOM_FIELD18		@ustring@(4000),
		HIT_DATA_ENTERED 	@datetime@,
		DATE_OF_DEATH 		@datetime@,
		TITLE          		@ustring@(255),
		POSITION       		@ustring@(255),
		HIT_ENTRY_TYPE 		@ustring@(50),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_TEMP ADD
		CONSTRAINT PK_RL_HIT_T PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID
		)
	@go@

	create index WLF_RL_HIT_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_TEMP(JOB_ID,PARTY_ID)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ID_TEMP (
		ID 			@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		ID_TYPE		@ustring@(255),
		ID_NUMBER	@ustring@(255),
		ID_COUNTRY	@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID_TEMP ADD
	CONSTRAINT PK_RL_HIT_ID_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@

	create index WLF_RL_HIT_ID_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_ID_TEMP(JOB_ID,HIT_ID)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_TEMP (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		ADDRESS1		@ustring@(255),
		ADDRESS2		@ustring@(255),
		CITY			@ustring@(255),
		STATE_PROVINCE		@ustring@(255),
		POSTAL_CODE		@ustring@(255),
		COUNTRY			@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_TEMP ADD
	CONSTRAINT PK_RL_HIT_ADDRESS_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@

	create index WLF_RL_HIT_ADDR_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_TEMP(JOB_ID,HIT_ID)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_TEMP(
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		COUNTRY			@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_TEMP ADD
	CONSTRAINT PK_RL_HIT_NATIONALITY_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@

	create index WLF_RL_HIT_NAT_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY_TEMP(JOB_ID,HIT_ID)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS_TEMP (
		ID 					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		HIT_ID				@int@ NOT NULL,
		NAME				@ustring@(2000),
		MATCH_STRENGTH		@ustring@(20),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ALIAS_TEMP ADD
	CONSTRAINT PK_RL_HIT_ALIAS_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@

	create index WLF_RL_HIT_ALIAS_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_ALIAS_TEMP(JOB_ID,HIT_ID)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_TEMP (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		CATEGORY		@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_TEMP ADD
	CONSTRAINT PK_RL_HIT_CATEGORY_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@

	create index WLF_RL_HIT_CAT_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_CATEGORY_TEMP(JOB_ID,HIT_ID)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_TEMP (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		KEYWORD			@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_TEMP ADD
	CONSTRAINT PK_RL_HIT_KEYWORD_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@

    create index WLF_RL_HIT_KEY_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_KEYWORD_TEMP(JOB_ID,HIT_ID)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_POB_TEMP (
		ID 			@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		PLACE		@ustring@(255),
		COUNTRY		@ustring@(255),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_POB_TEMP ADD
	CONSTRAINT PK_RL_HIT_POB_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@

	create index WLF_RL_HIT_POB_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_POB_TEMP(JOB_ID,HIT_ID)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_TEMP (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID		@int@ NOT NULL,
		TYPE		@ustring@(255),
		VALUE		@clob@,
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_TEMP ADD
	CONSTRAINT PK_RL_HIT_ADDINFO_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@

	create index WLF_RL_HIT_ADDINFO_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_ADDINFO_TEMP(JOB_ID,HIT_ID)
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB_TEMP (
		ID 				@int@ NOT NULL,
		INSTANCE_ID		@ustring@(255) NOT NULL,
		HIT_ID			@int@ NOT NULL,
		DOB				@ustring@(20),
		YOB				@ustring@(20),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB_TEMP ADD
	CONSTRAINT PK_RL_HIT_DOB_T PRIMARY KEY nonclustered
	(
		ID,JOB_ID,INSTANCE_ID,HIT_ID
	)
	@go@


	create index WLF_RL_HIT_DOB_IX1_T on @env:lm_schema_name@.WLF_RL_HIT_DOB_TEMP(JOB_ID,HIT_ID)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_TEMP (
		ID					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		JOB_ID				@ustring@(50) NOT NULL,
		JOB_TIMESTAMP		@datetime@,
		PARTY_KEY			@ustring@(255),
		MESSAGE_KEY			@ustring@(255),
		MESSAGE_INSTANCE_NUMBER	@int@,
		MESSAGE_REF_NUMBER	@int@,
		MESSAGE_SOURCE_TYPE	@ustring@(255),
		MESSAGE_TYPE_CD		@ustring@(255),
		MESSAGE_DATE_TIME	@datetime@,
		AMOUNT				@float@,
		CURRENCY_CD			@ustring@(255),
		PRODUCT_KEY			@ustring@(255),
		MESSAGE_DIRECTION	@ustring@(255),
		MESSAGE_INSTRUCTIONS	@clob@,
		ADDITIONAL_MESSAGE_TEXT @clob@,
		MESSAGE_TEXT		@clob@,
		ORIGINATOR_NAME		@ustring@(500),
		ORIGINATOR_PARTY_IDS		@clob@,
		ORIGINATOR_ADDRESS_LINE_1	@ustring@(500),
		ORIGINATOR_ADDRESS_LINE_2	@ustring@(500),
		ORIGINATOR_ADDRESS_LINE_3	@ustring@(500),
		ORIGINATOR_CITY		@ustring@(255),
		ORIGINATOR_COUNTRY_CD		@ustring@(255),
		ORIGINATOR_PARTY_TYPE_CD	@ustring@(255),
		ORIGINATOR_PO_BOX	@ustring@(255),
		ORIGINATOR_STATE_PROVINCE	@ustring@(255),
		ORIGINATOR_ZIP_CD	@ustring@(255),
		ORIGINATOR_ADDITIONAL_INFO @clob@,
		ORIGINATING_FI_CD	@ustring@(255),
		ORIGINATING_FI_COUNTRY_CD	@ustring@(255),
		ORIGINATING_FI_ORG_NAME		@ustring@(500),
		BENEFICIARY_PRIMARY_NAME	@ustring@(500),
		BENEFICIARY_PARTY_IDS		@clob@,
		BENEFICIARY_ADDRESS_LINE_1	@ustring@(500),
		BENEFICIARY_ADDRESS_LINE_2	@ustring@(500),
		BENEFICIARY_ADDRESS_LINE_3	@ustring@(500),
		BENEFICIARY_PO_BOX		@ustring@(255),
		BENEFICIARY_CITY		@ustring@(255),
		BENEFICIARY_STATE_PROVINCE	@ustring@(255),
		BENEFICIARY_ZIP_CD		@ustring@(255),
		BENEFICIARY_COUNTRY_CD		@ustring@(255),
		BENEFICIARY_ADDITIONAL_INFO	@clob@,
		BENEFICIARY_FI_ORG_NAME		@ustring@(500),
		BENEFICIARY_FI_CD		@ustring@(255),
		BENEFICIARY_FI_PARTY_TYPE_CD	@ustring@(255),
		BENEFICIARY_FI_COUNTRY_CD	@ustring@(255),
		RECEIVING_FI_ADDITIONAL_INFO	@clob@,
		RECEIVING_FI_CD		@ustring@(255),
		RECEIVING_FI_COUNTRY_CD		@ustring@(255),
		RECEIVING_FI_ORGANIZATION_NAME		@ustring@(500),
		SENDING_FI_ADDITIONAL_INFO	@clob@,
		SENDING_FI_CD		@ustring@(255),
		SENDING_FI_COUNTRY_CD		@ustring@(255),
		SENDING_FI_ORGANIZATION_NAME		@ustring@(500),
		FI_TO_FI_INFO		@clob@,
		CUSTOM_FIELD1		@ustring@(500),
		CUSTOM_FIELD2		@ustring@(500),
		CUSTOM_FIELD3		@ustring@(500),
		CUSTOM_FIELD4		@ustring@(500),
		CUSTOM_FIELD5		@ustring@(500),
		CUSTOM_FIELD6		@ustring@(500),
		CUSTOM_FIELD7		@ustring@(500),
		CUSTOM_FIELD8		@ustring@(500),
		CUSTOM_FIELD9		@ustring@(500),
		CUSTOM_FIELD10		@ustring@(500),
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@tinyint@,
		CUSTOM_FIELD17		@tinyint@,
		CUSTOM_FIELD18		@tinyint@,
		CUSTOM_FIELD19		@tinyint@,
		CUSTOM_FIELD20		@tinyint@
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_TEMP ADD
		CONSTRAINT PK_RL_MESSAGE_T PRIMARY KEY @nonclustered@
		(
			ID,
			INSTANCE_ID,
			JOB_ID
		)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP (
		ID				@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		WLF_RL_MESSAGE_ID	@int@ NOT NULL,
		LIST_ID			@ustring@(255),
		LIST_UPDATE_DATE	@datetime@,
		ENTRY_ID		@ustring@(255),
		ENTRY_UPDATE_DATE	@datetime@,
		TYPE			@ustring@(255),
		NAME			@ustring@(255),
		SCORE			@int@,
		GENDER			@ustring@(10),
		CUSTOM_FIELD1		@ustring@(255),
		CUSTOM_FIELD2		@ustring@(255),
		CUSTOM_FIELD3		@ustring@(255),
		CUSTOM_FIELD4		@ustring@(255),
		CUSTOM_FIELD5		@ustring@(255),
		CUSTOM_FIELD6		@tinyint@,
		CUSTOM_FIELD7		@tinyint@,
		CUSTOM_FIELD8		@tinyint@,
		CUSTOM_FIELD9		@tinyint@,
		CUSTOM_FIELD10		@tinyint@,
		CUSTOM_FIELD11		@datetime@,
		CUSTOM_FIELD12		@datetime@,
		CUSTOM_FIELD13		@datetime@,
		CUSTOM_FIELD14		@datetime@,
		CUSTOM_FIELD15		@datetime@,
		CUSTOM_FIELD16		@ustring@(4000),
		CUSTOM_FIELD17		@ustring@(4000),
		CUSTOM_FIELD18		@ustring@(4000),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP ADD
		CONSTRAINT PK_RL_MESSAGE_HIT_T PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID
		)
	@go@

	create index WLF_RL_MESSAGE_HIT_IX1_T on @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP(JOB_ID,WLF_RL_MESSAGE_ID)
	@go@


	CREATE TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMED_TEMP(
		ID 					@int@ NOT NULL,
		INSTANCE_ID			@ustring@(255) NOT NULL,
		WLF_RL_MESSAGE_ID	@int@ NOT NULL,
		FI_CODE				@ustring@(255),
		FI_COUNTRY_CODE		@ustring@(255),
		FI_NAME				@ustring@(500),
		JOB_ID			@ustring@(50) NOT NULL
	)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMED_TEMP ADD
		CONSTRAINT PK_WLF_RL_MSG_INTERMED_T PRIMARY KEY @nonclustered@
		(
			ID,JOB_ID,INSTANCE_ID,WLF_RL_MESSAGE_ID
		)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMED_TEMP ADD
		CONSTRAINT FK_WLF_RL_MSG_INTERMED_T
		FOREIGN KEY (WLF_RL_MESSAGE_ID, INSTANCE_ID,JOB_ID)
		REFERENCES @env:lm_schema_name@.WLF_RL_MESSAGE_TEMP(ID, INSTANCE_ID,JOB_ID)
	@go@


]



[mssql

	/*	*****************************************/
	/* SRCH LOG TABLE PARTITIONING AND UPGRADE */
	/*	***************************************/

	CREATE PARTITION FUNCTION srch_log_partfunc (datetime)
					 AS RANGE LEFT FOR VALUES ('19800101')
	@go@

	CREATE PARTITION SCHEME srch_log_partscheme
						AS PARTITION srch_log_partfunc
						ALL TO   ([PRIMARY])
	@go@
]

[mssql

	exec sp_rename '@env:lm_schema_name@.WLF_SRCH_LOG','WLF_SRCH_LOG_BKP'
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG_BKP drop constraint PK_SRCH_LOG
	@go@
]
[oracle

	CREATE TABLE @env:lm_schema_name@.WLF_SRCH_LOG_NEW
	PARTITION BY RANGE (JOB_TIMESTAMP)
	INTERVAL (NUMTOYMINTERVAL(1,'MONTH'))
	(
	PARTITION part_01 values LESS THAN (TO_DATE('01-JAN-1980','DD-MON-YYYY'))
	)
	tablespace @env:tablespace_default@
			pctfree     10
			initrans    8
			storage   (buffer_pool default)
	AS SELECT * FROM @env:lm_schema_name@.WLF_SRCH_LOG where 1=0
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_SRCH_LOG','WLF_SRCH_LOG_NEW')

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_SRCH_LOG', 'WLF_SRCH_LOG_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_SRCH_LOG','WLF_SRCH_LOG_NEW')

	drop table @env:lm_schema_name@.WLF_SRCH_LOG_NEW cascade constraints purge
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG ADD
	CONSTRAINT PK_SRCH_LOG PRIMARY KEY
	(
		ID, JOB_ID, JOB_TIMESTAMP
	)
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_SRCH_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_SRCH_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_SRCH_LOG_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

]

[mssql
		CREATE TABLE @env:lm_schema_name@.WLF_SRCH_LOG(
		ID numeric(15, 0) IDENTITY(1,1) NOT NULL,
		JOB_ID			@ustring@(255) NOT NULL,
		JOB_NAME		@ustring@(255),
		JOB_TIMESTAMP	@datetime@ NOT NULL,
		PARTY_KEY		@ustring@(255),
		PARTY_FULL_NAME		@ustring@(255),
		PARTY_IDS		@ustring@(255),
		PARTY_COUNTRIES		@ustring@(255),
		IS_PRE_FILTERED		@tinyint@,
		NUMBER_OF_HITS		@int@,
		IS_ALERT			@tinyint@,
		ACT_ALERT_SCORE		@int@
	)
	on srch_log_partscheme (JOB_TIMESTAMP)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG ADD
	CONSTRAINT PK_SRCH_LOG PRIMARY KEY nonclustered
	(
		ID, JOB_ID, JOB_TIMESTAMP
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP(
		ID numeric(15, 0) IDENTITY(1,1) NOT NULL,
		JOB_ID			@ustring@(255) NOT NULL,
		JOB_NAME		@ustring@(255),
		JOB_TIMESTAMP	@datetime@ NOT NULL,
		PARTY_KEY		@ustring@(255),
		PARTY_FULL_NAME		@ustring@(255),
		PARTY_IDS		@ustring@(255),
		PARTY_COUNTRIES		@ustring@(255),
		IS_PRE_FILTERED		@tinyint@,
		NUMBER_OF_HITS		@int@,
		IS_ALERT			@tinyint@,
		ACT_ALERT_SCORE		@int@)

	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP ADD
	CONSTRAINT PK_SRCH_LOG_TEMP PRIMARY KEY nonclustered
	(
		ID, JOB_ID, JOB_TIMESTAMP
	)
	@go@


	CREATE PROCEDURE @env:lm_schema_name@.WLF_SRCHLOG_UPGRADE
	AS
	BEGIN

      BEGIN TRY
         DECLARE
            @SRCH_LOG_DATE varchar(8),
            @EXEC_STR varchar(1000)

	SET NOCOUNT ON;

	BEGIN
		DECLARE SRCH_LOG_CURSOR CURSOR LOCAL FOR
		select  distinct
		substring(CONVERT(VARCHAR(8), DATEADD(MM,1,JOB_TIMESTAMP), 112),1,6)+'01'
		from @env:lm_schema_name@.WLF_SRCH_LOG_BKP;

	OPEN SRCH_LOG_CURSOR
	FETCH NEXT FROM SRCH_LOG_CURSOR
	INTO @SRCH_LOG_DATE


	WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @EXEC_STR =
                        'alter partition function srch_log_partfunc()
						SPLIT RANGE (''' + @SRCH_LOG_DATE + ''');'

                     EXECUTE (@EXEC_STR)

                     ALTER PARTITION SCHEME srch_log_partscheme NEXT USED [PRIMARY];

			FETCH NEXT FROM SRCH_LOG_CURSOR
			INTO @SRCH_LOG_DATE

		END

	CLOSE SRCH_LOG_CURSOR;
	DEALLOCATE SRCH_LOG_CURSOR;
	END

      END TRY

      BEGIN CATCH

         SELECT
		 ERROR_NUMBER() AS ErrorNumber
		,ERROR_SEVERITY() AS ErrorSeverity
		,ERROR_STATE() AS ErrorState
		,ERROR_PROCEDURE() AS ErrorProcedure
		,ERROR_LINE() AS ErrorLine
		,ERROR_MESSAGE() AS ErrorMessage;
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;

		RETURN 1;

      END CATCH

	END

	@go@

	execute @env:lm_schema_name@.WLF_SRCHLOG_UPGRADE
	@go@

	drop procedure @env:lm_schema_name@.WLF_SRCHLOG_UPGRADE
	@go@

	insert into @env:lm_schema_name@.WLF_SRCH_LOG (JOB_ID,JOB_NAME,JOB_TIMESTAMP,PARTY_KEY,PARTY_FULL_NAME,PARTY_IDS,PARTY_COUNTRIES,IS_PRE_FILTERED,
	NUMBER_OF_HITS,IS_ALERT,ACT_ALERT_SCORE) select JOB_ID,JOB_NAME,JOB_TIMESTAMP,PARTY_KEY,PARTY_FULL_NAME,PARTY_IDS,PARTY_COUNTRIES,IS_PRE_FILTERED,
	NUMBER_OF_HITS,IS_ALERT,ACT_ALERT_SCORE from @env:lm_schema_name@.WLF_SRCH_LOG_BKP
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_SRCH_LOG) =  (select COUNT(*) from @env:lm_schema_name@.WLF_SRCH_LOG_BKP)
	drop table @env:lm_schema_name@.WLF_SRCH_LOG_BKP
	else
	RAISERROR ('WLF_SRCH_LOG_BKP table record count doesn''t match WLF_SRCH_LOG table', 20, 1) WITH LOG
	@go@
]

[mssql

	CREATE PARTITION FUNCTION srch_log_ms_partfunc (datetime)
					 AS RANGE LEFT FOR VALUES ('19800101')
	@go@

	CREATE PARTITION SCHEME srch_log_ms_partscheme
						AS PARTITION srch_log_ms_partfunc
						ALL TO   ([PRIMARY])
	@go@

	exec sp_rename '@env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG','WLF_MS_SRCH_LOG_BKP'
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MS_SRCH_LOG_BKP drop constraint PK_MESSAGE_SEARCH_LOG
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG(
	ID @int@ IDENTITY(1,1) NOT NULL,
	JOB_ID @ustring@(255) NOT NULL,
	JOB_NAME @ustring@(255) NULL,
	JOB_TIMESTAMP @datetime@ NOT NULL,
	MESSAGE_KEY @ustring@(255) NULL,
	MESSAGE_INSTANCE_NUMBER @int@ NULL,
	MESSAGE_NAMES @clob@ NULL,
	MESSAGE_IDS @clob@ NULL,
	MESSAGE_COUNTRIES @clob@ NULL,
	MESSAGE_TEXT @clob@ NULL,
	NUMBER_OF_HITS @int@ NULL,
	IS_ALERT @tinyint@ NULL,
	ACT_ALERT_SCORE @int@ NULL
	)
	ON srch_log_ms_partscheme (JOB_TIMESTAMP)

	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG ADD
	CONSTRAINT PK_MESSAGE_SEARCH_LOG PRIMARY KEY nonclustered
	(
		ID, JOB_ID, JOB_TIMESTAMP
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	CREATE TABLE @env:lm_schema_name@.WLF_MS_SRCH_LOG_TEMP(
	ID @int@ IDENTITY(1,1) NOT NULL,
	JOB_ID @ustring@(255) NOT NULL,
	JOB_NAME @ustring@(255) NULL,
	JOB_TIMESTAMP @datetime@ NOT NULL,
	MESSAGE_KEY @ustring@(255) NULL,
	MESSAGE_INSTANCE_NUMBER @int@ NULL,
	MESSAGE_NAMES @clob@ NULL,
	MESSAGE_IDS @clob@ NULL,
	MESSAGE_COUNTRIES @clob@ NULL,
	MESSAGE_TEXT @clob@ NULL,
	NUMBER_OF_HITS @int@ NULL,
	IS_ALERT @tinyint@ NULL,
	ACT_ALERT_SCORE @int@ NULL)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MS_SRCH_LOG_TEMP ADD
	CONSTRAINT PK_MS_SRCH_LOG_TEMP PRIMARY KEY nonclustered
	(
		ID, JOB_ID, JOB_TIMESTAMP
	)
	@go@

	/* MS SEARCH LOG Upgrade */

	CREATE PROCEDURE @env:lm_schema_name@.WLF_MS_SRCHLOG_UPGRADE
	AS
	BEGIN

      BEGIN TRY
         DECLARE
            @SRCH_LOG_DATE varchar(8),
            @EXEC_STR varchar(1000)

	SET NOCOUNT ON;

	BEGIN
		DECLARE SRCH_LOG_CURSOR CURSOR LOCAL FOR
		select  distinct
		substring(CONVERT(VARCHAR(8), DATEADD(MM,1,JOB_TIMESTAMP), 112),1,6)+'01'
		from @env:lm_schema_name@.WLF_MS_SRCH_LOG_BKP;

	OPEN SRCH_LOG_CURSOR
	FETCH NEXT FROM SRCH_LOG_CURSOR
	INTO @SRCH_LOG_DATE


	WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @EXEC_STR =
                        'alter partition function srch_log_ms_partfunc()
						SPLIT RANGE (''' + @SRCH_LOG_DATE + ''');'

                     EXECUTE (@EXEC_STR)

                     ALTER PARTITION SCHEME srch_log_ms_partscheme NEXT USED [PRIMARY];

			FETCH NEXT FROM SRCH_LOG_CURSOR
			INTO @SRCH_LOG_DATE

		END

	CLOSE SRCH_LOG_CURSOR;
	DEALLOCATE SRCH_LOG_CURSOR;
	END

      END TRY

      BEGIN CATCH

         SELECT
		 ERROR_NUMBER() AS ErrorNumber
		,ERROR_SEVERITY() AS ErrorSeverity
		,ERROR_STATE() AS ErrorState
		,ERROR_PROCEDURE() AS ErrorProcedure
		,ERROR_LINE() AS ErrorLine
		,ERROR_MESSAGE() AS ErrorMessage;
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;

		RETURN 1;

      END CATCH

	END
	@go@


	execute @env:lm_schema_name@.WLF_MS_SRCHLOG_UPGRADE
	@go@

	drop procedure @env:lm_schema_name@.WLF_MS_SRCHLOG_UPGRADE
	@go@


	insert into @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG(JOB_ID,JOB_NAME,JOB_TIMESTAMP,MESSAGE_KEY,MESSAGE_INSTANCE_NUMBER,MESSAGE_NAMES,
	MESSAGE_IDS,MESSAGE_COUNTRIES,MESSAGE_TEXT,NUMBER_OF_HITS,IS_ALERT,ACT_ALERT_SCORE) select JOB_ID,JOB_NAME,JOB_TIMESTAMP,MESSAGE_KEY,MESSAGE_INSTANCE_NUMBER,MESSAGE_NAMES,
	MESSAGE_IDS,MESSAGE_COUNTRIES,MESSAGE_TEXT,NUMBER_OF_HITS,IS_ALERT,ACT_ALERT_SCORE from @env:lm_schema_name@.WLF_MS_SRCH_LOG_BKP
	@go@

	if (select COUNT(*) from @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG) =  (select COUNT(*) from @env:lm_schema_name@.WLF_MS_SRCH_LOG_BKP)
	drop table @env:lm_schema_name@.WLF_MS_SRCH_LOG_BKP
	else
	RAISERROR ('WLF_MS_SRCH_LOG_BKP table record count doesn''t match WLF_MESSAGE_SEARCH_LOG table', 20, 1) WITH LOG
	@go@
]

[oracle

	CREATE TABLE @env:lm_schema_name@.WLF_MS_SRCH_LOG_NEW
	PARTITION BY RANGE (JOB_TIMESTAMP)
	INTERVAL (NUMTOYMINTERVAL(1,'MONTH'))
	(
	PARTITION part_01 values LESS THAN (TO_DATE('01-JAN-1980','DD-MON-YYYY'))
	)
		tablespace @env:tablespace_default@
				pctfree     10
				initrans    8
				storage   (buffer_pool default)
		AS SELECT * FROM @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG where 1=0
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_MESSAGE_SEARCH_LOG','WLF_MS_SRCH_LOG_NEW')

	BEGIN
		DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_MESSAGE_SEARCH_LOG', 'WLF_MS_SRCH_LOG_NEW');
	END;
	/

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_MESSAGE_SEARCH_LOG','WLF_MS_SRCH_LOG_NEW')

	drop table @env:lm_schema_name@.WLF_MS_SRCH_LOG_NEW cascade constraints purge
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG ADD
	CONSTRAINT PK_MESSAGE_SRCH_LOG PRIMARY KEY
	(
		ID, JOB_ID, JOB_TIMESTAMP
	)
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_MESSAGE_SEARCH_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG_SEQ .nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@

]
	/*	*****************************************/
	/*  ADD AGE and AGE_AS_OF_DATE fields 		*/
	/*	***************************************/


	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
			AGE 	@int@   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
			AGE_AS_OF_DATE 		@datetime@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES ADD
			AGE 	@int@   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES ADD
			AGE_AS_OF_DATE 		@datetime@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
			AGE 	@int@   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
			AGE_AS_OF_DATE 		@datetime@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT ADD
			AGE 	@int@   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT ADD
			AGE_AS_OF_DATE 		@datetime@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
			AGE 	@int@   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
			AGE_AS_OF_DATE 		@datetime@  NULL
	@go@

[mssql

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES ADD
			AGE 	@int@   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES ADD
			AGE_AS_OF_DATE 		@datetime@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_TEMP ADD
			AGE 	@int@   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_TEMP ADD
			AGE_AS_OF_DATE 		@datetime@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP ADD
			AGE 	@int@   NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP ADD
			AGE_AS_OF_DATE 		@datetime@  NULL
	@go@
]

	/*	*****************************************************************************/
	/*  ADD INCLUDE_LOW_QUALITY_ALIASES field to WLF_TUNING_METADATA			*/
	/*	***************************************************************************/

	ALTER TABLE @env:lm_schema_name@.WLF_TUNING_METADATA ADD
			INCLUDE_LOW_QUALITY_ALIASES		@tinyint@ NULL
	@go@

[mssql

	CREATE PROCEDURE @env:lm_schema_name@.WLF_UPGRADE_TUNING_SF
	AS
	BEGIN
		BEGIN TRY
			DECLARE
				@TUNING_ID varchar(255),
				@EXEC_STR1 varchar(1000),
				@EXEC_STR2 varchar(1000),
				@EXEC_STR3 varchar(1000),
				@EXEC_STR4 varchar(1000),
				@EXEC_STR5 varchar(1000),
				@EXEC_STR6 varchar(1000)

		SET NOCOUNT ON;

		BEGIN
			DECLARE TUNING_ID_CURSOR CURSOR LOCAL FOR
			SELECT DISTINCT TUNING_ID
			FROM @env:lm_schema_name@.WLF_TUNING_METADATA;

		OPEN TUNING_ID_CURSOR
		FETCH NEXT FROM TUNING_ID_CURSOR
		INTO @TUNING_ID


		WHILE @@FETCH_STATUS = 0
			BEGIN

				SET @EXEC_STR1 = 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SCORE_FACTORS (TUNING_ID, SCORE_FACTOR_ID, SF_USAGE, SF_TYPE, IS_CUSTOM, IS_ACTIVE, SF_NAME) VALUES (N''' + @TUNING_ID + ''',''AML_WLF_CF_SF_lowQualityAliases'', ''CF'',''FIXED_VALUE'',0,1, ''Low Quality Aliases'');'
				EXECUTE (@EXEC_STR1)


				SET @EXEC_STR2 = 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SCORE_FACTORS (TUNING_ID, SCORE_FACTOR_ID, SF_USAGE, SF_TYPE, IS_CUSTOM, IS_ACTIVE, SF_NAME) VALUES (N''' + @TUNING_ID + ''',''AML_WLF_MS_SF_lowQualityAliases'', ''MS'',''FIXED_VALUE'',0,1, ''Low Quality Aliases'');'
				EXECUTE (@EXEC_STR2)


				SET @EXEC_STR3 = 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID, SF_USAGE, SCORE_FACTOR_ID, FIXED_VALUE_ID, SCORE) VALUES (N''' + @TUNING_ID + ''',''CF'', ''AML_WLF_CF_SF_lowQualityAliases'',''YES'',-10);'
				EXECUTE (@EXEC_STR3)


				SET @EXEC_STR4 = 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID, SF_USAGE, SCORE_FACTOR_ID, FIXED_VALUE_ID, SCORE) VALUES (N''' + @TUNING_ID + ''',''MS'', ''AML_WLF_MS_SF_lowQualityAliases'',''YES'',-10);'
				EXECUTE (@EXEC_STR4)

				SET @EXEC_STR5 = 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID, SF_USAGE, SCORE_FACTOR_ID, FIXED_VALUE_ID, SCORE) VALUES (N''' + @TUNING_ID + ''',''CF'', ''AML_WLF_CF_SF_lowQualityAliases'',''NO'',0);'
				EXECUTE (@EXEC_STR5)

				SET @EXEC_STR6 = 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID, SF_USAGE, SCORE_FACTOR_ID, FIXED_VALUE_ID, SCORE) VALUES (N''' + @TUNING_ID + ''',''MS'', ''AML_WLF_MS_SF_lowQualityAliases'',''NO'',0);'
				EXECUTE (@EXEC_STR6)

				FETCH NEXT FROM TUNING_ID_CURSOR
				INTO @TUNING_ID

			END

		CLOSE TUNING_ID_CURSOR;
		DEALLOCATE TUNING_ID_CURSOR;

		END
		END TRY
		BEGIN CATCH

			SELECT
		ERROR_NUMBER() AS ErrorNumber
		,ERROR_SEVERITY() AS ErrorSeverity
		,ERROR_STATE() AS ErrorState
		,ERROR_PROCEDURE() AS ErrorProcedure
		,ERROR_LINE() AS ErrorLine
		,ERROR_MESSAGE() AS ErrorMessage;
		IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;

		RETURN 1;
		END CATCH
	END;
	@go@

	/*-------------------------------------------------------------------------------------*/
	/* call the procedure WLF_UPGRADE_TUNING_SF to UPGRADE TUNING SF AND DROP IT		 */
	/*----------------------------------------------------------------------------------*/

	execute @env:lm_schema_name@.WLF_UPGRADE_TUNING_SF

	drop procedure @env:lm_schema_name@.WLF_UPGRADE_TUNING_SF
	@go@

]

[oracle
	create or replace
	PROCEDURE            @env:lm_schema_name@.WLF_UPGRADE_TUNING_SF
	AS


	CURSOR	TUNING_ID_SET IS
	SELECT	DISTINCT TUNING_ID
	FROM	@env:lm_schema_name@.WLF_TUNING_METADATA;

	EXISTING_TUNING_ID	TUNING_ID_SET%ROWTYPE;

	TUNING_IDS		VARCHAR2(255);
	EXEC_STR1		VARCHAR2(1000);
	EXEC_STR2		VARCHAR2(1000);
	EXEC_STR3		VARCHAR2(1000);
	EXEC_STR4		VARCHAR2(1000);
	EXEC_STR5		VARCHAR2(1000);
	EXEC_STR6		VARCHAR2(1000);

	BEGIN

				OPEN TUNING_ID_SET;

		LOOP

			FETCH TUNING_ID_SET INTO EXISTING_TUNING_ID;
			EXIT WHEN TUNING_ID_SET%NOTFOUND;

			TUNING_IDS := EXISTING_TUNING_ID.TUNING_ID;


				EXEC_STR1 := 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SCORE_FACTORS (TUNING_ID, SCORE_FACTOR_ID, SF_USAGE, SF_TYPE, IS_CUSTOM, IS_ACTIVE, SF_NAME) VALUES (''' || TUNING_IDS || ''',''AML_WLF_CF_SF_lowQualityAliases'', ''CF'',''FIXED_VALUE'',0,1, ''Low Quality Aliases'')';
				EXECUTE IMMEDIATE (EXEC_STR1);

				EXEC_STR2 := 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SCORE_FACTORS (TUNING_ID, SCORE_FACTOR_ID, SF_USAGE, SF_TYPE, IS_CUSTOM, IS_ACTIVE, SF_NAME) VALUES (''' || TUNING_IDS || ''',''AML_WLF_MS_SF_lowQualityAliases'', ''MS'',''FIXED_VALUE'',0,1, ''Low Quality Aliases'')';
				EXECUTE IMMEDIATE (EXEC_STR2);

				EXEC_STR3 := 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID, SF_USAGE, SCORE_FACTOR_ID, FIXED_VALUE_ID, SCORE) VALUES (''' || TUNING_IDS || ''',''CF'', ''AML_WLF_CF_SF_lowQualityAliases'',''YES'',-10)';
				EXECUTE IMMEDIATE (EXEC_STR3);

				EXEC_STR4 := 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID, SF_USAGE, SCORE_FACTOR_ID, FIXED_VALUE_ID, SCORE) VALUES (''' || TUNING_IDS || ''',''MS'', ''AML_WLF_MS_SF_lowQualityAliases'',''YES'',-10)';
				EXECUTE IMMEDIATE (EXEC_STR4);

				EXEC_STR5 := 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID, SF_USAGE, SCORE_FACTOR_ID, FIXED_VALUE_ID, SCORE) VALUES (''' || TUNING_IDS || ''',''CF'', ''AML_WLF_CF_SF_lowQualityAliases'',''NO'',0)';
				EXECUTE IMMEDIATE (EXEC_STR5);

				EXEC_STR6 := 'INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID, SF_USAGE, SCORE_FACTOR_ID, FIXED_VALUE_ID, SCORE) VALUES (''' || TUNING_IDS || ''',''MS'', ''AML_WLF_MS_SF_lowQualityAliases'',''NO'',0)';
				EXECUTE IMMEDIATE (EXEC_STR6);


		END LOOP;

		CLOSE TUNING_ID_SET;


		EXCEPTION
			WHEN OTHERS THEN
				RAISE;
	END;
	@go@

	/*-------------------------------------------------------------------------------------*/
	/* call the procedure WLF_UPGRADE_TUNING_SF to UPGRADE TUNING SF AND DROP IT		 */
	/*----------------------------------------------------------------------------------*/

	EXEC @env:lm_schema_name@.WLF_UPGRADE_TUNING_SF

	drop procedure @env:lm_schema_name@.WLF_UPGRADE_TUNING_SF
	@go@
]


	  UPDATE @env:lm_schema_name@.WLF_TUNING_METADATA SET INCLUDE_LOW_QUALITY_ALIASES = 1;

	/*	*****************************************************************************/
	/*  ADD UPDATE_CATEGORY and CRITICAL_UPDATE_DATE field to WLF_TUNING_METADATA	*/
	/*	***************************************************************************/


	CREATE TABLE @env:lm_schema_name@.WLF_APP_THRESHOLDS(
		THRESH_ID @ustring@(50) NOT NULL,
		THRESH_DESC @ustring@(255) NOT NULL,
		THRESH_VALUE @int@ NOT NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_APP_THRESHOLDS ADD
		CONSTRAINT PK_APP_THRESHOLDS PRIMARY KEY @nonclustered@
		(
		THRESH_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@


	Insert into @env:lm_schema_name@.WLF_APP_THRESHOLDS (THRESH_ID,THRESH_DESC,THRESH_VALUE) values('wlfCriticalUpdateThreshold', 'Minimum Critical Update Category Value',0)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
			UPDATE_CATEGORY 		@int@  NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD
			CRITICAL_UPDATE_DATE 	@datetime@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES ADD
			UPDATE_CATEGORY 		@int@  NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES ADD
			CRITICAL_UPDATE_DATE 	@datetime@  NULL
	@go@

[mssql

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES ADD
			UPDATE_CATEGORY 		@int@  NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES ADD
			CRITICAL_UPDATE_DATE 	@datetime@  NULL
	@go@
]

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
			UPDATE_CATEGORY 		@int@  NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD
			CRITICAL_UPDATE_DATE 	@datetime@  NULL
	@go@


	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		UPDATE_CATEGORY 	@int@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD
		CRITICAL_UPDATE_DATE 	@datetime@  NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_HITS ADD
		PARTY_MATCH_HASH 	@ustring@(255)  NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_HITS ADD
		HIT_MATCH_HASH 		@ustring@(255)  NULL
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_HITS ADD
			HIT_CRIT_UPDATE_DATE 	@datetime@  NULL
	@go@

	create index WLF_HITS_IX1 on @env:lm_schema_name@.WLF_HITS(HIT_HASH_KEY,PARTY_MATCH_HASH,HIT_MATCH_HASH,HIT_CRIT_UPDATE_DATE,LIST_ID,LIST_ENTRY_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

[oracle

	create index WLF_LATEST_LIST_CUD on @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES(LIST_ID,CRITICAL_UPDATE_DATE) LOCAL
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_LIST_ENTRIES_CUD on @env:lm_schema_name@.WLF_LIST_ENTRIES(CRITICAL_UPDATE_DATE,VERSION) LOCAL
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_TMP_ENTRIES_CUD on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(CRITICAL_UPDATE_DATE,VERSION)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

]

[mssql

	create index WLF_LATEST_LIST_CUD on @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES(LIST_ID,CRITICAL_UPDATE_DATE)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_LIST_ENTRIES_CUD on @env:lm_schema_name@.WLF_LIST_ENTRIES(CRITICAL_UPDATE_DATE,VERSION)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	create index WLF_TMP_ENTRIES_CUD on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(CRITICAL_UPDATE_DATE,VERSION) INCLUDE( LIST_VERSION_IDENTIFIER )
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

]

	create index WLF_ARC_ENTRIES_CUD on @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES(CRITICAL_UPDATE_DATE,VERSION)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@



	ALTER TABLE @env:lm_schema_name@.WLF_CONF_XML_HISTORY ADD
			INSTANCE_ID 	@ustring@(30) default '-1'
	@go@

[oracle

	ALTER TABLE @env:lm_schema_name@.WLF_CONF_XML_HISTORY DROP PRIMARY KEY DROP INDEX
	@go@
]

[mssql

	UPDATE @env:lm_schema_name@.WLF_CONF_XML_HISTORY SET INSTANCE_ID = '-1'
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_CONF_XML_HISTORY DROP CONSTRAINT PK_CONF_XML_HISTORY
	@go@

	ALTER TABLE  @env:lm_schema_name@.WLF_CONF_XML_HISTORY ALTER COLUMN [INSTANCE_ID] [nvarchar](30) not null
	@go@
]

	ALTER TABLE @env:lm_schema_name@.WLF_CONF_XML_HISTORY ADD
		CONSTRAINT PK_CONF_XML_HISTORY PRIMARY KEY @nonclustered@
		(
			CONF_ID, CONF_TYPE, CONF_TIMESTAMP,INSTANCE_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

[oracle

	CREATE OR REPLACE PROCEDURE @env:lm_schema_name@.WLF_CHECK_TOTAL_PART(TABL_NAME IN VARCHAR2, TOT_CNT OUT NUMBER)
	AS
	BEGIN
		SELECT COUNT(*) INTO TOT_CNT FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = TABL_NAME;
	END;
	@go@

	CREATE OR REPLACE PROCEDURE @env:lm_schema_name@.WLF_REBUILD_INDEXES(TABL_NAME VARCHAR2)
		AS
		BEGIN

			FOR INDX IN ( SELECT INDEX_NAME,PARTITIONED,STATUS FROM USER_INDEXES WHERE TABLE_NAME = TABL_NAME AND STATUS NOT IN ('VALID') )
			LOOP
				IF (INDX.PARTITIONED = 'YES')
				THEN
					FOR INDX_PART IN (SELECT INDEX_NAME,STATUS,PARTITION_NAME FROM USER_IND_PARTITIONS WHERE INDEX_NAME = INDX.INDEX_NAME AND STATUS NOT IN ('USABLE') )
					LOOP
						EXECUTE IMMEDIATE (' ALTER INDEX ' || INDX.INDEX_NAME || ' REBUILD PARTITION ' || INDX_PART.PARTITION_NAME);
					END LOOP;

				ELSE
					EXECUTE IMMEDIATE (' ALTER INDEX ' || INDX.INDEX_NAME || ' REBUILD ');
				END IF;
			END LOOP;
		END;
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI MODIFY CONSTRAINT FK_WLF_RL_MSG_INTERMEDIATE_FI ENABLE NOVALIDATE
	@go@

	CREATE OR REPLACE PROCEDURE @env:lm_schema_name@.WLF_CHECK_TOTAL_PART(TABL_NAME IN VARCHAR2, TOT_CNT OUT NUMBER)
	AS

	BEGIN
		SELECT COUNT(*) INTO TOT_CNT FROM USER_TAB_PARTITIONS WHERE TABLE_NAME = TABL_NAME;
	END;
	@go@

	CREATE OR REPLACE PROCEDURE @env:lm_schema_name@.WLF_LM_DROP_PARTITION ( P_LIST_VER_IDENTIFIER NUMBER )
	AS

			CURSOR	PARTITIONED_TABLES_SET IS
			SELECT	DISTINCT TABLE_NAME
			FROM	USER_TAB_PARTITIONS WHERE TABLE_NAME LIKE 'WLF%' AND TABLE_NAME != 'WLF_LATEST_LIST_ENTRIES'
			ORDER BY TABLE_NAME;
			PARTITIONED_TABLE	PARTITIONED_TABLES_SET%ROWTYPE;

			CURSOR C1_PREVIOUS_PARTITIONS (INPUT_TAB_NAME VARCHAR2, CRT_DATE DATE) IS
			SELECT OBJECT_NAME,SUBOBJECT_NAME,CREATED FROM USER_OBJECTS WHERE OBJECT_NAME = INPUT_TAB_NAME AND OBJECT_TYPE ='TABLE PARTITION' AND CREATED < CRT_DATE ORDER BY 2;
			PREV_PART C1_PREVIOUS_PARTITIONS%ROWTYPE;

			CURSOR C2_CURRENT_PARTITION (CUR_TAB_NAME VARCHAR2, CUR_PART_NAME VARCHAR2) IS
			SELECT CREATED FROM USER_OBJECTS WHERE OBJECT_NAME = CUR_TAB_NAME AND OBJECT_TYPE = 'TABLE PARTITION' AND SUBOBJECT_NAME = CUR_PART_NAME;
			CURR_PART C2_CURRENT_PARTITION%ROWTYPE;


			P_TABLE_NAME		VARCHAR2(30);
			P_PART_NAME		VARCHAR2(30);
			P_COUNTER		NUMBER;
			EXEC_STR		VARCHAR2(1000);
			TOT_PART_COUNT NUMBER := 0;
			TOT_PREV_PART_COUNT NUMBER := 0;
			REC_CNT_STMT VARCHAR2(4000);
			REC_CNT NUMBER := 0;


			BEGIN
				/* Generated the partition name */
				P_PART_NAME := 'P' || to_char(P_LIST_VER_IDENTIFIER);

				OPEN PARTITIONED_TABLES_SET;
				LOOP
					FETCH PARTITIONED_TABLES_SET INTO PARTITIONED_TABLE;
					EXIT WHEN PARTITIONED_TABLES_SET%NOTFOUND;
					P_TABLE_NAME := PARTITIONED_TABLE.TABLE_NAME;
					--DBMS_OUTPUT.put_line ('Table Name: ' || to_char(P_TABLE_NAME));

					OPEN C2_CURRENT_PARTITION(P_TABLE_NAME,P_PART_NAME);
					LOOP
						FETCH C2_CURRENT_PARTITION INTO CURR_PART;
						EXIT WHEN C2_CURRENT_PARTITION%NOTFOUND;

						OPEN C1_PREVIOUS_PARTITIONS(P_TABLE_NAME,CURR_PART.CREATED);
						LOOP
							FETCH C1_PREVIOUS_PARTITIONS INTO PREV_PART;
							EXIT WHEN C1_PREVIOUS_PARTITIONS%NOTFOUND;

							REC_CNT_STMT := ' SELECT COUNT(*) FROM ' || P_TABLE_NAME || ' PARTITION ('||PREV_PART.SUBOBJECT_NAME||')';
							EXECUTE IMMEDIATE (REC_CNT_STMT) INTO REC_CNT;

							WLF_CHECK_TOTAL_PART(P_TABLE_NAME,TOT_PREV_PART_COUNT);
							--DBMS_OUTPUT.PUT_LINE('REC_CNT: ' || REC_CNT || ' TOT PREV_PART CNT: ' || TOT_PREV_PART_COUNT);
							IF((TOT_PREV_PART_COUNT > 1) AND (REC_CNT = 0 ) AND (PREV_PART.SUBOBJECT_NAME != P_PART_NAME))
							THEN
								EXEC_STR := 'ALTER TABLE ' || P_TABLE_NAME || ' DROP PARTITION ' || PREV_PART.SUBOBJECT_NAME;
								--DBMS_OUTPUT.PUT_LINE('PREV PART STMT: ' || EXEC_STR);
								EXECUTE IMMEDIATE (EXEC_STR);
							END IF;
						END LOOP;
						CLOSE C1_PREVIOUS_PARTITIONS;

						WLF_CHECK_TOTAL_PART(P_TABLE_NAME,TOT_PART_COUNT);

						IF(TOT_PART_COUNT > 1)
							THEN
								EXEC_STR := 'alter table ' || P_TABLE_NAME || ' drop partition ' || P_PART_NAME;
								--DBMS_OUTPUT.PUT_LINE ('CURRENT PART STMT: ' || EXEC_STR);
								EXECUTE IMMEDIATE (EXEC_STR);
							ELSE
								EXEC_STR := 'ALTER TABLE ' || P_TABLE_NAME || ' TRUNCATE PARTITION ' || P_PART_NAME;
								--DBMS_OUTPUT.PUT_LINE ('CURRENT PART STMT: ' || EXEC_STR);
						END IF;
					END LOOP;
					CLOSE C2_CURRENT_PARTITION;

				END LOOP;
				CLOSE PARTITIONED_TABLES_SET;

				EXCEPTION
					WHEN OTHERS THEN
						RAISE;
		END;
	@go@

	/************  Commented creating subpartitions that are removed in 3.5.1 ***************************/
	/*
	DECLARE
	CREATE_TABLE_STMT CLOB := TO_CLOB('');
	SUBPART_FILLER CLOB := TO_CLOB(' ');
	PARTITION_FILLER CLOB := TO_CLOB(' ');
	CNTR NUMBER := 0;
	P_PART_NAME VARCHAR2(30);
	ROW_CNT NUMBER;
	BEGIN
	SELECT COUNT(*) INTO ROW_CNT FROM WLF_SRCH_LOG;
	IF (ROW_CNT >0)
	THEN
	CREATE_TABLE_STMT := TO_CLOB(' CREATE TABLE WLF_SRCH_LOG_NEW
									PARTITION BY RANGE (JOB_TIMESTAMP) INTERVAL (NUMTOYMINTERVAL(1,''MONTH''))
									SUBPARTITION BY LIST (JOB_ID)
									SUBPARTITION TEMPLATE (');

		FOR C1 IN ( SELECT DISTINCT JOB_ID FROM WLF_SRCH_LOG)
		LOOP
			P_PART_NAME := 'P' || rtrim(substr(C1.JOB_ID,1,2)) || '_' || rtrim(substr(C1.JOB_ID,4,10));
			SUBPART_FILLER := ' SUBPARTITION '|| P_PART_NAME || ' VALUES (''' || C1.JOB_ID || '''),';
			CREATE_TABLE_STMT := CREATE_TABLE_STMT || TO_CLOB(SUBPART_FILLER);
			CNTR := CNTR + 1;

		END LOOP;

		CREATE_TABLE_STMT := TRIM( TRAILING ',' FROM CREATE_TABLE_STMT);
		CREATE_TABLE_STMT := CREATE_TABLE_STMT || TO_CLOB(') (');

		CNTR := 0;

		FOR C2 IN ( SELECT to_char(last_day(MIN(job_timestamp))+1,'DD/MM/YYYY')  AS DATE_VAL from WLF_SRCH_LOG )
		LOOP
			PARTITION_FILLER := 'PARTITION PER' || CNTR || ' VALUES LESS THAN (TO_DATE(''' || C2.DATE_VAL || ''',''DD/MM/YYYY'')),';
			CREATE_TABLE_STMT := CREATE_TABLE_STMT || TO_CLOB(PARTITION_FILLER);
			CNTR := CNTR +1;
		END LOOP;
		CREATE_TABLE_STMT := TRIM( TRAILING ',' FROM CREATE_TABLE_STMT);
		CREATE_TABLE_STMT := CREATE_TABLE_STMT || TO_CLOB(')');

		CREATE_TABLE_STMT := CREATE_TABLE_STMT || ' AS SELECT * FROM WLF_SRCH_LOG ';

		--DBMS_OUTPUT.PUT_LINE('STMT: ' || CREATE_TABLE_STMT);

		EXECUTE IMMEDIATE (CREATE_TABLE_STMT);
	ELSE
		CREATE_TABLE_STMT := TO_CLOB(' CREATE TABLE WLF_SRCH_LOG_NEW PARTITION BY RANGE ( JOB_TIMESTAMP )
							INTERVAL (NUMTOYMINTERVAL(1,''MONTH''))
							SUBPARTITION BY LIST (JOB_ID)
							SUBPARTITION TEMPLATE ( SUBPARTITION P01_000 VALUES (''00-000'') )
							(PARTITION PER0 VALUES LESS THAN (TO_DATE(''01-01-1980'',''DD-MM-YYYY''))) storage (initial @env:initial_extent@) AS SELECT * FROM WLF_SRCH_LOG' );
		EXECUTE IMMEDIATE(CREATE_TABLE_STMT);
	END IF;

	EXECUTE IMMEDIATE ('DROP TABLE  WLF_SRCH_LOG CASCADE CONSTRAINTS');
	EXECUTE IMMEDIATE ('RENAME WLF_SRCH_LOG_NEW TO WLF_SRCH_LOG');
	EXECUTE IMMEDIATE (' ALTER TABLE WLF_SRCH_LOG ADD CONSTRAINT pk_srch_log PRIMARY KEY (ID,JOB_ID,JOB_TIMESTAMP) using index local');
	EXECUTE IMMEDIATE (' ALTER TABLE WLF_SRCH_LOG MODIFY JOB_TIMESTAMP NOT NULL');

	END;
	@go@


	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_SRCH_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_SRCH_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_SRCH_LOG_SEQ.nextval INTO :new.id FROM dual;
       	END IF;
  	END;
	@go@
	*/

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG MODIFY JOB_TIMESTAMP NOT NULL
	/
]

}
version 3.3.3 ADD {


	CREATE TABLE @env:lm_schema_name@.WLF_CF_HASH_CONFIG (
		VERSION  @int@ NOT NULL,
		DESCRIPTION @ustring@ (255),
		PRIORITY @int@ NOT NULL,
	    PARTY_ATTRIBUTES @ustring@ (4000),
	    ENTRY_ATT_PARTY @ustring@ (4000),
	    ENTRY_ATT_CNTRY @ustring@ (4000),
	    ENTRY_ATT_ID @ustring@ (4000),
	    HIT_ATTRIBUTES @ustring@ (4000),
	    STATUS @ustring@ (20)
	  )
    @storage_params_insert_only @env:tablespace_default@ default@
	@go@

	create unique index UQ_WLF_CF_HASH on @env:lm_schema_name@.WLF_CF_HASH_CONFIG(PRIORITY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_CF_HASH_CONFIG add
		CONSTRAINT PK_WLF_CF_CONFIG PRIMARY KEY
		(
			VERSION
		)
	@storage_primary_insert_only @env:tablespace_index@ default@
	@go@

	Insert into @env:lm_schema_name@.WLF_CF_HASH_CONFIG (VERSION,DESCRIPTION,PRIORITY,PARTY_ATTRIBUTES,ENTRY_ATT_PARTY,ENTRY_ATT_CNTRY,ENTRY_ATT_ID,HIT_ATTRIBUTES,STATUS) values (2,'3.3.2+',3,'partyType,partyKey,partyAliases,partyAliasesIds,partyBirthCountry,partyNationalityCountries,partyAddresses,listId,entryId,hit.aliases,hit.addresses,hit.ids,hit.nationalityCountries,hit.placesOfBirth,hit.matchedName,',null,null,null,'partyType,partyKey,partyAliases,partyAliasesIds,partyBirthCountry,partyNationalityCountries,partyAddresses,listId,entryId,hit.aliases,hit.addresses,hit.ids,hit.nationalityCountries,hit.placesOfBirth,hit.matchedName,','1')
	@go@
	Insert into @env:lm_schema_name@.WLF_CF_HASH_CONFIG (VERSION,DESCRIPTION,PRIORITY,PARTY_ATTRIBUTES,ENTRY_ATT_PARTY,ENTRY_ATT_CNTRY,ENTRY_ATT_ID,HIT_ATTRIBUTES,STATUS) values (3,'3.X',2,null,null,null,null,'partyType,partyKey,partyAliases,partyAliasesIds,partyBirthCountry,partyNationalityCountries,partyAddresses,listId,entryId,hit.aliases,hit.addresses,hit.ids,hit.nationalityCountries,hit.placesOfBirth,hit.matchedName,','1')
	@go@
	Insert into @env:lm_schema_name@.WLF_CF_HASH_CONFIG (VERSION,DESCRIPTION,PRIORITY,PARTY_ATTRIBUTES,ENTRY_ATT_PARTY,ENTRY_ATT_CNTRY,ENTRY_ATT_ID,HIT_ATTRIBUTES,STATUS) values (4,'2.4.X',1,null,'listId,entryId,entryUpdateDate,partyFullName,matchedName,additionalInfo,isPerson,partyKey,customerIds,partyFirstName,partyMiddleName,partyLastName,partyMaidenName,buildingNum,street,city,zipCode,stateProvince,countryCd,dateOfBirth,birthCountryCd,','listId,entryId,entryUpdateDate,partyFullName,matchedName,additionalInfo,isPerson,partyKey,customerIds,partyFirstName,partyMiddleName,partyLastName,partyMaidenName,buildingNum,street,city,zipCode,stateProvince,countryCd,dateOfBirth,birthCountryCd,','listId,entryId,entryUpdateDate,partyFullName,matchedName,additionalInfo,isPerson,partyKey,customerIds,partyFirstName,partyMiddleName,partyLastName,partyMaidenName,buildingNum,street,city,zipCode,stateProvince,countryCd,dateOfBirth,birthCountryCd,',null,'1')
	@go@




}

version 3.3.3.1 ADD {


}


version 3.3.3.2 ADD {


}


version 3.4.0.1 ADD {

 ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES ADD ALIAS_NATIVE_LANGUAGE @ustring@(50)  NULL
	@go@
 ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES ADD ALIAS_NATIVE_LANGUAGE @ustring@(50)  NULL
	@go@
 ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES ADD ALIAS_NATIVE_LANGUAGE @ustring@(50)  NULL
	@go@
}

version 3.4.0.2 ADD {


}

version 3.4.0.3 ADD {
[oracle
  BEGIN
      FOR sf_fixed_values_rec IN
      (SELECT * FROM @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES WHERE FIXED_VALUE_ID = 'SINGLE_MULTI_ON_LIST')
      LOOP
         INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (tuning_id,score_factor_id,sf_usage,FIXED_VALUE_ID,SCORE)
                                                             VALUES (sf_fixed_values_rec.tuning_id,sf_fixed_values_rec.score_factor_id,sf_fixed_values_rec.sf_usage,'ENTRY_SINGLE_MULTI',0);
         INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (tuning_id,score_factor_id,sf_usage,FIXED_VALUE_ID,SCORE)
                                                             VALUES (sf_fixed_values_rec.tuning_id,sf_fixed_values_rec.score_factor_id,sf_fixed_values_rec.sf_usage,'ENTRY_SINGLE_MULTI_LOW_RISK',0);
      END LOOP;
  END;
]

[mssql
	DECLARE @tuning_id VARCHAR(50)
	DECLARE @score_factor_id VARCHAR(100)
	DECLARE @sf_usage VARCHAR(20)

	DECLARE sf_cursor CURSOR LOCAL FOR
	SELECT TUNING_ID,SCORE_FACTOR_ID,SF_USAGE FROM @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES WHERE FIXED_VALUE_ID = 'SINGLE_MULTI_ON_LIST'

	OPEN sf_cursor
	FETCH NEXT FROM sf_cursor INTO @tuning_id, @score_factor_id, @sf_usage

	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID,SCORE_FACTOR_ID,SF_USAGE,FIXED_VALUE_ID,SCORE)
		                                             VALUES(@tuning_id,@score_factor_id,@sf_usage,'ENTRY_SINGLE_MULTI',0)
		INSERT INTO @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES (TUNING_ID,SCORE_FACTOR_ID,SF_USAGE,FIXED_VALUE_ID,SCORE)
		                                             VALUES(@tuning_id,@score_factor_id,@sf_usage,'ENTRY_SINGLE_MULTI_LOW_RISK',0)
		FETCH NEXT FROM sf_cursor INTO @tuning_id, @score_factor_id, @sf_usage
	END

	CLOSE sf_cursor
	DEALLOCATE sf_cursor
]

	@go@
   UPDATE @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES SET FIXED_VALUE_ID = 'SINGLE_SINGLE_LOW_RISK' WHERE FIXED_VALUE_ID = 'SINGLE_SINGLE_ON_LIST'
	@go@
   UPDATE @env:lm_schema_name@.WLF_TUNING_SF_FIXED_VALUES SET FIXED_VALUE_ID = 'SINGLE_MULTI_LOW_RISK' WHERE FIXED_VALUE_ID = 'SINGLE_MULTI_ON_LIST'
	@go@
}

version 3.4.0.4 ADD {

}

version 3.4.0.5 ADD {

}

version 3.4.0.6 ADD {

}

version 3.4.0.7 ADD {
[mssql
     IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name='WLF_HITS_IX2_TEST' AND object_id = OBJECT_ID('@env:lm_schema_name@.WLF_HITS'))
	 	CREATE INDEX WLF_HITS_IX2_TEST ON @env:lm_schema_name@.WLF_HITS (PARTY_MATCH_HASH, LIST_ID, LIST_ENTRY_ID)
]
[oracle
	DECLARE
		cnt INTEGER;
	BEGIN
		SELECT COUNT(*) INTO cnt FROM user_indexes WHERE index_name = 'WLF_HITS_IX2_TEST';
		IF cnt = 0 THEN
			EXECUTE IMMEDIATE 'CREATE INDEX WLF_HITS_IX2_TEST ON @env:lm_schema_name@.WLF_HITS (PARTY_MATCH_HASH, LIST_ID, LIST_ENTRY_ID)';
		END IF;
	END;
]
	@go@
}

version 3.4.0.8 ADD {
}

version 3.4.1.1 ADD {
}

version 3.4.1.2 ADD {
[oracle
	alter table @env:lm_schema_name@.WLF_SELF_SERVICE_OUTPUT_FILES modify ( FILE_SIZE NUMBER(15) )
	@go@
]
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_IDS SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_BIRTHDATES SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_BIRTHPLACES SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDINFO SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_KEYWORDS SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_KEYWORDS_DATA SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_CATEGORIES SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_CATEGORIES_DATA SET (LOCK_ESCALATION = AUTO);
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_NATIONALITY_CTRY SET (LOCK_ESCALATION = AUTO);
	@go@
]
}

version 3.4.1.3 ADD {
}

version 3.4.1.4 ADD {
	/* ----------------------------------------------------------------------- */
	/*                 Used to hold the Dow-Jones References                   */
	/* ----------------------------------------------------------------------- */
[oracle
	CREATE TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS (
		CODE 					@ustring@(5) NOT NULL,
		DESCRIPTION2ID 			@ustring@(5) NOT NULL,
		LISTDESCRIPTION         clob,
		LISTTYPE1 	 			@ustring@(50),
		LISTPROVIDERCODE 		@ustring@(50),
		LISTPROVIDERNAME        clob,
		REFERENCEGROUPCODE      @ustring@(50),
		LISTSOURCE1				@ustring@(255),
		REGION					@ustring@(50),
		STATUS 					@ustring@(50),
		ACTION					@ustring@(50),
		LISTDATE				@datetime@,
		REFERENCENAME			@ustring@(255)
	)
	@go@

	CREATE OR REPLACE VIEW @env:lm_schema_name@.V_WLF_SANCTION_LISTS
	AS
	SELECT
		CODE,
		DESCRIPTION2ID,
		LISTDESCRIPTION,
		LISTTYPE1,
		LISTPROVIDERCODE,
		LISTPROVIDERNAME,
		REFERENCEGROUPCODE,
		LISTSOURCE1,
		REGION,
		STATUS,
		ACTION,
		LISTDATE,
		REFERENCENAME
	FROM
		@env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS
	WHERE
		DESCRIPTION2ID IN ('1','3') AND Status = 'Current'
	@go@

	CREATE OR REPLACE VIEW @env:lm_schema_name@.V_WLF_OTHER_OFFICIAL_LISTS
	AS
	SELECT
		CODE,
		DESCRIPTION2ID,
		LISTDESCRIPTION,
		LISTTYPE1,
		LISTPROVIDERCODE,
		LISTPROVIDERNAME,
		REFERENCEGROUPCODE,
		LISTSOURCE1,
		REGION,
		STATUS,
		ACTION,
		LISTDATE,
		REFERENCENAME
	FROM
		@env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS
	WHERE
		DESCRIPTION2ID IN ('2','4') AND Status = 'Current'
	@go@
]
[mssql
	CREATE TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS (
		CODE 					@ustring@(5) NOT NULL,
		DESCRIPTION2ID 			@ustring@(5) NOT NULL,
		LISTDESCRIPTION         @ustring@(4000),
		LISTTYPE1 	 			@ustring@(50),
		LISTPROVIDERCODE 		@ustring@(50),
		LISTPROVIDERNAME        @ustring@(4000),
		REFERENCEGROUPCODE      @ustring@(50),
		LISTSOURCE1				@ustring@(255),
		REGION					@ustring@(50),
		STATUS 					@ustring@(50),
		ACTION					@ustring@(50),
		LISTDATE				@datetime@,
		REFERENCENAME			@ustring@(255)
	)
	@go@

	IF EXISTS(SELECT v.name FROM sys.views v WHERE v.name = 'V_WLF_SANCTION_LISTS')
	BEGIN
		EXEC('DROP VIEW @env:lm_schema_name@.V_WLF_SANCTION_LISTS');
	END;
	@go@

	IF EXISTS(SELECT v.name FROM sys.views v WHERE v.name = 'WLF_V_OTHER_OFFICIAL_LISTS')
	BEGIN
		EXEC('DROP VIEW @env:lm_schema_name@.V_WLF_OTHER_OFFICIAL_LISTS');
	END;
	@go@

	CREATE VIEW @env:lm_schema_name@.V_WLF_SANCTION_LISTS
	AS
	SELECT
		CODE,
		DESCRIPTION2ID,
		LISTDESCRIPTION,
		LISTTYPE1,
		LISTPROVIDERCODE,
		LISTPROVIDERNAME,
		REFERENCEGROUPCODE,
		LISTSOURCE1,
		REGION,
		STATUS,
		ACTION,
		LISTDATE,
		REFERENCENAME
	FROM
		@env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS
	WHERE
		DESCRIPTION2ID IN ('1','3') AND STATUS = 'Current'
	@go@

	CREATE VIEW @env:lm_schema_name@.V_WLF_OTHER_OFFICIAL_LISTS
	AS
	SELECT
		CODE,
		DESCRIPTION2ID,
		LISTDESCRIPTION,
		LISTTYPE1,
		LISTPROVIDERCODE,
		LISTPROVIDERNAME,
		REFERENCEGROUPCODE,
		LISTSOURCE1,
		REGION,
		STATUS,
		ACTION,
		LISTDATE,
		REFERENCENAME
	FROM
		@env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS
	WHERE
		DESCRIPTION2ID IN ('2','4') AND STATUS = 'Current'
	@go@
]

}

version 3.4.1.5 ADD {
[mssql
	IF NOT EXISTS(select * from @env:lm_schema_name@.WLF_LIST_DEFINITIONS where LIST_ID = 'FACTIVA_SAN')
		insert into @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED ) values ( 'FACTIVA_SAN', 'Dow Jones Sanctions', 'External', 'Dow Jones Watch List',  @now@, 'System',0)
	@go@
	IF NOT EXISTS(select * from @env:lm_schema_name@.WLF_LIST_DEFINITIONS where LIST_ID = 'FACTIVA_PEP')
		insert into @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED ) values ( 'FACTIVA_PEP', 'Dow Jones Politically Exposed Person', 'External', 'Dow Jones Watch List',  @now@, 'System',0)
	@go@
	IF NOT EXISTS(select * from @env:lm_schema_name@.WLF_LIST_DEFINITIONS where LIST_ID = 'FACTIVA_SAN_COUNTRIES')
		insert into @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED ) values ( 'FACTIVA_SAN_COUNTRIES', 'Dow Jones Countries', 'External', 'Dow Jones Watch List',  @now@, 'System',0)
	@go@
	IF NOT EXISTS(select * from @env:lm_schema_name@.WLF_LIST_DEFINITIONS where LIST_ID = 'FACTIVA_RCA')
		insert into @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED ) values ( 'FACTIVA_RCA', 'Dow Jones Relative or Close Associate', 'External', 'Dow Jones Watch List',  @now@, 'System',0)
	@go@
]
[oracle
	DECLARE
		cnt INTEGER;
	BEGIN
		SELECT COUNT(*) INTO cnt FROM @env:lm_schema_name@.WLF_LIST_DEFINITIONS WHERE list_id = 'FACTIVA_SAN';
		IF cnt = 0 THEN
			EXECUTE IMMEDIATE 'INSERT INTO @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED )
			values ( ''FACTIVA_SAN'', ''Dow Jones Sanctions'', ''External'', ''Dow Jones Watch List'',  @now@, ''System'',0)';
		END IF;
	END;
	@go@
	DECLARE
		cnt INTEGER;
	BEGIN
		SELECT COUNT(*) INTO cnt FROM @env:lm_schema_name@.WLF_LIST_DEFINITIONS WHERE list_id = 'FACTIVA_PEP';
		IF cnt = 0 THEN
			EXECUTE IMMEDIATE 'INSERT INTO @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED )
			values ( ''FACTIVA_PEP'', ''Dow Jones Politically Exposed Person'', ''External'', ''Dow Jones Watch List'',  @now@, ''System'',0)';
		END IF;
	END;
	@go@
	DECLARE
		cnt INTEGER;
	BEGIN
		SELECT COUNT(*) INTO cnt FROM @env:lm_schema_name@.WLF_LIST_DEFINITIONS WHERE list_id = 'FACTIVA_SAN_COUNTRIES';
		IF cnt = 0 THEN
			EXECUTE IMMEDIATE 'INSERT INTO @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED )
			values ( ''FACTIVA_SAN_COUNTRIES'', ''Dow Jones Countries'', ''External'', ''Dow Jones Watch List'',  @now@, ''System'',0)';
		END IF;
	END;
	@go@
	DECLARE
		cnt INTEGER;
	BEGIN
		SELECT COUNT(*) INTO cnt FROM @env:lm_schema_name@.WLF_LIST_DEFINITIONS WHERE list_id = 'FACTIVA_RCA';
		IF cnt = 0 THEN
			EXECUTE IMMEDIATE 'INSERT INTO @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED )
			values ( ''FACTIVA_RCA'', ''Dow Jones Relative or Close Associate'', ''External'', ''Dow Jones Watch List'',  @now@, ''System'',0)';
		END IF;
	END;
	@go@
]
}

version 3.4.1.10 ADD {

}

version 3.4.1.11 ADD {
	UPDATE  @env:lm_schema_name@.WLF_NAME_TRANSFORMS SET NT_IMPACT = 2 WHERE NAME_TRANSFORM_ID = 'AML_WLF_NT_removeSpacesAndPunctuation';
	@go@
	UPDATE  @env:lm_schema_name@.WLF_NAME_TRANSFORMS SET NT_IMPACT = 2 WHERE NAME_TRANSFORM_ID = 'AML_WLF_NT_removeTAQsSpacesAndPunctuation';
	@go@

[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_SELF_SERVICE_OUTPUT_FILES
	ALTER COLUMN FILE_SIZE numeric(15,0)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
	ALTER COLUMN PARTY_IDS VARCHAR(500)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
	ALTER COLUMN PARTY_COUNTRIES NVARCHAR(1000)
	@go@
]

[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
	MODIFY PARTY_IDS VARCHAR2(500)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
	MODIFY PARTY_COUNTRIES VARCHAR2(1000)
	@go@
]


}

version 3.4.1.12 ADD {

}

version 3.4.1.13 ADD {
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_ETL_DETAILS DROP CONSTRAINT PK_WLF_JOB_ETL_DETAILS
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_ETL_DETAILS ADD PRIMARY KEY (JOB_ID,LIST_ID)
	@go@
]

[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_ETL_DETAILS DROP CONSTRAINT PK_WLF_JOB_ETL_DETAILS DROP INDEX
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_JOB_ETL_DETAILS ADD CONSTRAINT PK_WLF_JOB_ETL_DETAILS PRIMARY KEY (JOB_ID,LIST_ID)
	@go@
]
}

version 3.4.1.14 ADD {
}

version 3.4.1.15 ADD {
}

version 3.4.1.16 ADD {
	/* ------------------------------------------------------------ */
	/*  3.3.3 patch 27 delivered the index with this name - WLF_MESSAGE_HITS_IX1.  We are changing its name to WLF_MESSAGE_HITS_HASH_KEY_IDX, so we need to remove the old index.  No need to be concerned if an 'already exists' error is generated.	*/
	/* ------------------------------------------------------------ */
[oracle
	begin
	execute immediate ('DROP INDEX WLF_MESSAGE_HITS_IX1');
	exception
	when others then
	null;
	end;
	@go@
]
[oracle
	DECLARE
		cnt INTEGER;
	BEGIN
		SELECT COUNT(*) INTO cnt FROM user_indexes WHERE index_name = 'WLF_MESSAGE_HITS_HASH_KEY_IDX';
		IF cnt = 0 THEN
			EXECUTE IMMEDIATE 'CREATE INDEX WLF_MESSAGE_HITS_HASH_KEY_IDX ON @env:lm_schema_name@.WLF_MESSAGE_HITS (MESSAGE_HASH_KEY)';
		END IF;
	END;
	@go@
]
}


version 3.4.1.17 ADD {
}

version 3.4.1.18 ADD {
}

version 3.4.2.1 ADD {
}

version 3.4.2.2 ADD {
}

version 3.4.2.3 ADD {
}

version 3.4.2.4 ADD {
}

version 3.4.2.5 ADD {
}

version 3.4.2.6 ADD {
}

version 3.4.2.7 ADD {
}

version 3.4.2.8 ADD {
}

version 3.4.2.9 ADD {
}

version 3.4.2.10 ADD {
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP
	ALTER COLUMN PARTY_IDS VARCHAR(500)
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP
	ALTER COLUMN PARTY_COUNTRIES NVARCHAR(1000)
	@go@
]
}

version 3.4.2.11 ADD {
}

version 3.4.2.14 ADD {
}

version 3.4.2.17 ADD {
}

version 3.4.2.18 ADD {
}

version 3.4.2.19 ADD {
}

version 3.4.2.20 ADD {
}

version 3.4.2.21 ADD {
}

version 3.4.2.22 ADD {
}

version 3.4.2.23 ADD {
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE
		ADD CUSTOM_STRING_21 @ustring@(500),
		 CUSTOM_STRING_22 @ustring@(500),
		 CUSTOM_STRING_23 @ustring@(500),
	 	 CUSTOM_STRING_24 @ustring@(500),
		 CUSTOM_STRING_25 @ustring@(500),
		 CUSTOM_STRING_26 @ustring@(500),
		 CUSTOM_STRING_27 @ustring@(500),
		 CUSTOM_STRING_28 @ustring@(500),
		 CUSTOM_STRING_29 @ustring@(500),
		 CUSTOM_STRING_30 @ustring@(500),
		 CUSTOM_STRING_31 @ustring@(500),
		 CUSTOM_STRING_32 @ustring@(500),
		 CUSTOM_STRING_33 @ustring@(500),
		 CUSTOM_STRING_34 @ustring@(500),
		 CUSTOM_STRING_35 @ustring@(500),
		 CUSTOM_STRING_36 @ustring@(4000),
		 CUSTOM_STRING_37 @ustring@(4000),
		 CUSTOM_STRING_38 @ustring@(4000),
		 CUSTOM_STRING_39 @ustring@(4000),
		 CUSTOM_STRING_40 @ustring@(4000),
		 CUSTOM_DATE_6 @datetime@,
		 CUSTOM_DATE_7 @datetime@,
		 CUSTOM_DATE_8 @datetime@,
		 CUSTOM_DATE_9 @datetime@,
		 CUSTOM_DATE_10 @datetime@,
		 CUSTOM_DATE_11 @datetime@,
		 CUSTOM_DATE_12 @datetime@,
		 CUSTOM_DATE_13 @datetime@,
		 CUSTOM_DATE_14 @datetime@,
		 CUSTOM_DATE_15 @datetime@,
		 CUSTOM_BOOLEAN_6 @tinyint@,
		 CUSTOM_BOOLEAN_7 @tinyint@,
		 CUSTOM_BOOLEAN_8 @tinyint@,
		 CUSTOM_BOOLEAN_9 @tinyint@,
		 CUSTOM_BOOLEAN_10 @tinyint@,
		 CUSTOM_NUMBER_1 @number@(18,3),
		 CUSTOM_NUMBER_2 @number@(18,3),
		 CUSTOM_NUMBER_3 @number@(18,3),
		 CUSTOM_NUMBER_4 @number@(18,3),
		 CUSTOM_NUMBER_5 @number@(18,3)
	@go@
]
[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE
		ADD (CUSTOM_STRING_21 @ustring@(500),
		 CUSTOM_STRING_22 @ustring@(500),
		 CUSTOM_STRING_23 @ustring@(500),
	 	 CUSTOM_STRING_24 @ustring@(500),
		 CUSTOM_STRING_25 @ustring@(500),
		 CUSTOM_STRING_26 @ustring@(500),
		 CUSTOM_STRING_27 @ustring@(500),
		 CUSTOM_STRING_28 @ustring@(500),
		 CUSTOM_STRING_29 @ustring@(500),
		 CUSTOM_STRING_30 @ustring@(500),
		 CUSTOM_STRING_31 @ustring@(500),
		 CUSTOM_STRING_32 @ustring@(500),
		 CUSTOM_STRING_33 @ustring@(500),
		 CUSTOM_STRING_34 @ustring@(500),
		 CUSTOM_STRING_35 @ustring@(500),
		 CUSTOM_STRING_36 @ustring@(4000),
		 CUSTOM_STRING_37 @ustring@(4000),
		 CUSTOM_STRING_38 @ustring@(4000),
		 CUSTOM_STRING_39 @ustring@(4000),
		 CUSTOM_STRING_40 @ustring@(4000),
		 CUSTOM_DATE_6 @datetime@,
		 CUSTOM_DATE_7 @datetime@,
		 CUSTOM_DATE_8 @datetime@,
		 CUSTOM_DATE_9 @datetime@,
		 CUSTOM_DATE_10 @datetime@,
		 CUSTOM_DATE_11 @datetime@,
		 CUSTOM_DATE_12 @datetime@,
		 CUSTOM_DATE_13 @datetime@,
		 CUSTOM_DATE_14 @datetime@,
		 CUSTOM_DATE_15 @datetime@,
		 CUSTOM_BOOLEAN_6 @tinyint@,
		 CUSTOM_BOOLEAN_7 @tinyint@,
		 CUSTOM_BOOLEAN_8 @tinyint@,
		 CUSTOM_BOOLEAN_9 @tinyint@,
		 CUSTOM_BOOLEAN_10 @tinyint@,
		 CUSTOM_NUMBER_1 @number@(18,3),
		 CUSTOM_NUMBER_2 @number@(18,3),
		 CUSTOM_NUMBER_3 @number@(18,3),
		 CUSTOM_NUMBER_4 @number@(18,3),
		 CUSTOM_NUMBER_5 @number@(18,3))
	@go@
]
}

version 3.4.2.24 ADD {
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
		ALTER COLUMN PARTY_IDS @ustring@(4000)
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
		ALTER COLUMN PARTY_COUNTRIES @ustring@(4000)
	@go@
]
[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
		MODIFY (PARTY_IDS @ustring@(4000),
			    PARTY_COUNTRIES @ustring@(4000))
	@go@
]

}

version 3.4.2.25 ADD {

[oracle
	BEGIN
		EXECUTE IMMEDIATE 'DROP TABLE @env:lm_schema_name@.ACTIMIZE_COMMON_METADATA';
		EXCEPTION
		WHEN OTHERS THEN
		IF SQLCODE != -942 THEN
		RAISE;
		END IF;
	END;
	@go@
]
[mssql
	IF OBJECT_ID('@env:lm_schema_name@.ACTIMIZE_COMMON_METADATA', 'U') IS NOT NULL
	DROP TABLE @env:lm_schema_name@.ACTIMIZE_COMMON_METADATA
	@go@
]
	CREATE TABLE @env:lm_schema_name@.ACTIMIZE_COMMON_METADATA
	(
         ENTITY @ustring@(50) NOT NULL,
         ACTIVATION_STATUS @ustring@(50) NOT NULL
     )
	@go@

	ALTER TABLE @env:lm_schema_name@.ACTIMIZE_COMMON_METADATA ADD
	CONSTRAINT pk7commondata_entity PRIMARY KEY (ENTITY)
	@go@

	INSERT INTO @env:lm_schema_name@.ACTIMIZE_COMMON_METADATA(ENTITY, ACTIVATION_STATUS) VALUES ('Tableau', 'enabled')
	@go@

}

version 3.4.2.26 ADD {
}

version 3.4.2.27 ADD {
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP
		ALTER COLUMN PARTY_IDS @ustring@(4000)
	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP
		ALTER COLUMN PARTY_COUNTRIES @ustring@(4000)
	@go@
]
}

version 3.4.2.28 ADD {
}

version 3.4.2.29 ADD {
}

version 3.5.0.1 ADD {
}

version 3.5.0.2 ADD {
	insert into @env:lm_schema_name@.WLF_LIST_DEFINITIONS ( LIST_ID, NAME, TYPE, DESCRIPTION, CREATION_DATE, CREATED_BY,IS_DELETED ) values ( 'FinCEN314a', 'FinCEN 314(a)', 'External', 'FinCEN 314(a) Watch List',  @now@, 'System',0)
	@go@
[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDINFO
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDRESSES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_BIRTHDATES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_BIRTHPLACES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_CATEGORIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_IDS
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_KEYWORDS
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_NATIONALITY_CTRY
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDINFO
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_BIRTHDATES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_BIRTHPLACES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_CATEGORIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_IDS
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_KEYWORDS
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_LIST_NATIONALITY_CTRY
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDINFO
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_BIRTHDATES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_BIRTHPLACES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_IDS
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_KEYWORDS
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL

	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_NATIONALITY_CTRY
		ALTER COLUMN LIST_ENTRY_KEY @ustring@(500) NOT NULL
	@go@
]
[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDINFO
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDRESSES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_BIRTHDATES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_BIRTHPLACES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_CATEGORIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_IDS
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_KEYWORDS
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_NATIONALITY_CTRY
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDINFO
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_BIRTHDATES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_BIRTHPLACES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_CATEGORIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	DROP INDEX entry_key_upper_idx
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	CREATE INDEX entry_key_upper_idx ON @env:lm_schema_name@.WLF_LIST_ENTRIES(upper(LIST_ENTRY_KEY))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_IDS
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_KEYWORDS
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_NATIONALITY_CTRY
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDINFO
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_BIRTHDATES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_BIRTHPLACES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	DROP INDEX tmp_key_upper_idx
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	create index tmp_key_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(upper(LIST_ENTRY_KEY))
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_IDS
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_CATEGORIES
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_KEYWORDS
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_NATIONALITY_CTRY
		MODIFY LIST_ENTRY_KEY @ustring@(500)
	@go@
]
}

version 3.5.0.3 ADD {
}

version 3.5.0.4 ADD {
}

version 3.5.0.5 ADD {
[mssql

    ALTER TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER
    DROP CONSTRAINT PK_WLF_AUDIT_COUNTER
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER
    ALTER COLUMN ID @number@(15,0) NOT NULL
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER
    ADD CONSTRAINT PK_WLF_AUDIT_COUNTER PRIMARY KEY
    (
      ID
    )
    @storage_primary_insert_only @env:tablespace_index@ default@
    @go@

]
[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER
	    MODIFY(ID @number@(15,0))
]
	@go@
}

version 3.5.0.6 ADD {
	CREATE TABLE @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT(
[mssql
			ID @int@ 		IDENTITY (1,1) NOT NULL,
]
[oracle
  			ID 				@int@	NOT NULL,
]
			JOB_ID @ustring@(255) NOT NULL,
			MESSAGE_KEY @ustring@(255) NOT NULL,
			MESSAGE_REF_NUMBER @number@(9,0),
			LIST_ID @ustring@(50),
			ENTRY_ID @ustring@(500),
			PROCESS_DATE @datetime@,
			MESSAGE_DATETIME @datetime@,
			INSTANCE_ID @ustring@(50),
			SEARCH_DEF_ID @ustring@(255),
			RULE_ID @ustring@(50) NOT NULL,
			ACTION @ustring@(50) NOT NULL
		)
	@storage_params_insert_update @env:tablespace_default@ default@
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT ADD
		CONSTRAINT PK_WLF_POLICY_RULES_AUDIT PRIMARY KEY @nonclustered@
		(
			ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
[oracle
	CREATE SEQUENCE @env:lm_schema_name@.SEQ_WLF_POLICY_RULES_AUDIT_ID INCREMENT BY 1 START WITH 1
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_POLICY_RULES_AUDIT_ID
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
  			SELECT @env:lm_schema_name@.SEQ_WLF_POLICY_RULES_AUDIT_ID.nextval INTO :new.id FROM dual;
  		END IF;
  	END;
	@go@
]

}

version 3.5.0.7 ADD {
}

version 3.5.0.8 ADD {
}

version 3.5.0.9 ADD {
}

version 3.5.0.10 ADD {
}

version 3.5.0.11 ADD {
}

version 3.5.0.12 ADD {
}

version 3.5.0.13 ADD {
}

version 3.5.0.14 ADD {
}

version 3.5.0.15 ADD {
}

version 3.5.0.16 ADD {
}

version 3.5.1.2 ADD {
    ALTER TABLE @env:lm_schema_name@.WLF_NAME_TRANSFORMS
    ADD	APPLICABLE_FOR_NAME_TYPE @ustring@(1) DEFAULT 'B' NOT NULL
    @go@

    INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORMS (NAME_TRANSFORM_ID, NT_IMPACT, IS_CUSTOM, IS_ACTIVE, NT_NAME, NT_DESCRIPTION, APPLICABLE_FOR_NAME_TYPE)
    VALUES ('AML_WLF_NT_orgRemoveTAQsSpacesAndPunctuation', 2,0,1, 'Remove Organization TAQs, Spaces and Punctuation', 'This name transformation function will remove all organization TAQs (Titles, Affixes, and Qualifiers), white space and punctuation characters from the name.  The list of punctuation characters to be removed should be specified in the Name Transformation Parameters settings.', 'O')
    @go@

    INSERT INTO @env:lm_schema_name@.WLF_NAME_TRANSFORMS (NAME_TRANSFORM_ID, NT_IMPACT, IS_CUSTOM, IS_ACTIVE, NT_NAME, NT_DESCRIPTION, APPLICABLE_FOR_NAME_TYPE)
    VALUES ('AML_WLF_NT_personRemoveTAQsSpacesAndPunctuation', 2,0,1, 'Remove Person TAQs, Spaces and Punctuation', 'This name transformation function will remove all person TAQs (Titles, Affixes, and Qualifiers), white space and punctuation characters from the name.  The list of punctuation characters to be removed should be specified in the Name Transformation Parameters settings.', 'P')
    @go@

[mssql
    IF((SELECT IS_ACTIVE FROM @env:lm_schema_name@.WLF_NAME_TRANSFORMS WHERE NAME_TRANSFORM_ID = 'AML_WLF_NT_removeTAQsSpacesAndPunctuation') = 0)
    	UPDATE @env:lm_schema_name@.WLF_NAME_TRANSFORMS
    	SET IS_ACTIVE = 0
    	WHERE NAME_TRANSFORM_ID IN ('AML_WLF_NT_orgRemoveTAQsSpacesAndPunctuation','AML_WLF_NT_personRemoveTAQsSpacesAndPunctuation')
    go
]

[oracle
    DECLARE
        v_isActive NUMBER(1);
    BEGIN
        SELECT IS_ACTIVE
        INTO v_isActive
        FROM @env:lm_schema_name@.WLF_NAME_TRANSFORMS
        WHERE NAME_TRANSFORM_ID = 'AML_WLF_NT_removeTAQsSpacesAndPunctuation';

        IF(v_isActive = 0) THEN
            UPDATE @env:lm_schema_name@.WLF_NAME_TRANSFORMS
            SET IS_ACTIVE = 0
            WHERE NAME_TRANSFORM_ID IN ('AML_WLF_NT_orgRemoveTAQsSpacesAndPunctuation','AML_WLF_NT_personRemoveTAQsSpacesAndPunctuation');
        END IF;
    END;
    /
]

    UPDATE @env:lm_schema_name@.WLF_NAME_TRANSFORMS
    SET IS_ACTIVE = 0
    WHERE NAME_TRANSFORM_ID IN ('AML_WLF_NT_removeTAQsSpacesAndPunctuation');

	INSERT INTO @env:lm_schema_name@.WLF_TUNING_NAME_TRANSFORMS (TUNING_ID, NAME_TRANSFORM_ID)
	SELECT DISTINCT(TUNING_ID) AS TUNING_ID, 'AML_WLF_NT_personRemoveTAQsSpacesAndPunctuation' AS NAME_TRANSFORM_ID FROM @env:lm_schema_name@.WLF_TUNING_METADATA
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_TUNING_NAME_TRANSFORMS (TUNING_ID, NAME_TRANSFORM_ID)
	SELECT DISTINCT(TUNING_ID) AS TUNING_ID, 'AML_WLF_NT_orgRemoveTAQsSpacesAndPunctuation' AS NAME_TRANSFORM_ID FROM @env:lm_schema_name@.WLF_TUNING_METADATA
	@go@

[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY ADD
	(
        CUSTOM_FIELD19 @ustring@(255)   NULL,
        CUSTOM_FIELD20 @ustring@(255)   NULL,
        CUSTOM_FIELD21 @ustring@(255)   NULL,
        CUSTOM_FIELD22 @ustring@(255)   NULL,
        CUSTOM_FIELD23 @ustring@(255)   NULL,
        CUSTOM_FIELD24 @ustring@(255)   NULL,
        CUSTOM_FIELD25 @ustring@(255)   NULL,
        CUSTOM_FIELD26 @ustring@(255)   NULL,
        CUSTOM_FIELD27 @ustring@(255)   NULL,
        CUSTOM_FIELD28 @ustring@(255)   NULL,
        CUSTOM_FIELD29 @ustring@(4000)   NULL,
        CUSTOM_FIELD30 @ustring@(4000)   NULL,
        CUSTOM_FIELD31 @ustring@(4000)   NULL,
        CUSTOM_FIELD32 @ustring@(4000)   NULL,
        CUSTOM_FIELD33 @ustring@(4000)   NULL
    )
    @go@
]

[mssql
    ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY ADD
    CUSTOM_FIELD19 @ustring@(255)   NULL,
    CUSTOM_FIELD20 @ustring@(255)   NULL,
    CUSTOM_FIELD21 @ustring@(255)   NULL,
    CUSTOM_FIELD22 @ustring@(255)   NULL,
    CUSTOM_FIELD23 @ustring@(255)   NULL,
    CUSTOM_FIELD24 @ustring@(255)   NULL,
    CUSTOM_FIELD25 @ustring@(255)   NULL,
    CUSTOM_FIELD26 @ustring@(255)   NULL,
    CUSTOM_FIELD27 @ustring@(255)   NULL,
    CUSTOM_FIELD28 @ustring@(255)   NULL,
    CUSTOM_FIELD29 @ustring@(4000)   NULL,
    CUSTOM_FIELD30 @ustring@(4000)   NULL,
    CUSTOM_FIELD31 @ustring@(4000)   NULL,
    CUSTOM_FIELD32 @ustring@(4000)   NULL,
    CUSTOM_FIELD33 @ustring@(4000)   NULL;
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY_TEMP ADD
    CUSTOM_FIELD19 @ustring@(255)   NULL,
    CUSTOM_FIELD20 @ustring@(255)   NULL,
    CUSTOM_FIELD21 @ustring@(255)   NULL,
    CUSTOM_FIELD22 @ustring@(255)   NULL,
    CUSTOM_FIELD23 @ustring@(255)   NULL,
    CUSTOM_FIELD24 @ustring@(255)   NULL,
    CUSTOM_FIELD25 @ustring@(255)   NULL,
    CUSTOM_FIELD26 @ustring@(255)   NULL,
    CUSTOM_FIELD27 @ustring@(255)   NULL,
    CUSTOM_FIELD28 @ustring@(255)   NULL,
    CUSTOM_FIELD29 @ustring@(4000)   NULL,
    CUSTOM_FIELD30 @ustring@(4000)   NULL,
    CUSTOM_FIELD31 @ustring@(4000)   NULL,
    CUSTOM_FIELD32 @ustring@(4000)   NULL,
    CUSTOM_FIELD33 @ustring@(4000)   NULL;
    @go@
]

[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB
		ALTER COLUMN DOB @ustring@(50)
	@go@
]
[oracle
	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB
		MODIFY DOB @ustring@(50)
	@go@
]

[mssql
    IF NOT EXISTS(SELECT 1 FROM sys.indexes WHERE name='IX_WLF_LIST_VERSIONS_DRAFT' AND object_id = OBJECT_ID('@env:lm_schema_name@.WLF_LIST_VERSIONS'))
    CREATE UNIQUE INDEX IX_WLF_LIST_VERSIONS_DRAFT ON @env:lm_schema_name@.WLF_LIST_VERSIONS(LISTID_DRAFT) WHERE LISTID_DRAFT IS NOT NULL
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER
    DROP CONSTRAINT PK_WLF_AUDIT_COUNTER
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER
    ALTER COLUMN ID @number@(15,0) NOT NULL
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_AUDIT_COUNTER
    ADD CONSTRAINT PK_WLF_AUDIT_COUNTER PRIMARY KEY
    (
      ID
    )
    @storage_primary_insert_only @env:tablespace_index@ default@
    @go@
]

[oracle

	CREATE TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP
	PARTITION BY RANGE (JOB_TIMESTAMP)
	INTERVAL (NUMTOYMINTERVAL(1,'MONTH'))
	(
		PARTITION "PER0"  VALUES LESS THAN (TO_DATE(' 1980-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
	)
	TABLESPACE @env:tablespace_default@
			PCTFREE     10
			INITRANS    8
			STORAGE   (BUFFER_POOL DEFAULT)
	AS SELECT * FROM @env:lm_schema_name@.WLF_SRCH_LOG WHERE 1=0
	@go@

	EXECUTE DBMS_REDEFINITION.START_REDEF_TABLE('@env:lm_schema_name@','WLF_SRCH_LOG','WLF_SRCH_LOG_TEMP', NULL,DBMS_REDEFINITION.CONS_USE_ROWID)

    BEGIN
        DBMS_REDEFINITION.SYNC_INTERIM_TABLE ('@env:lm_schema_name@', 'WLF_SRCH_LOG', 'WLF_SRCH_LOG_TEMP');
    END;
    /

	EXECUTE DBMS_REDEFINITION.FINISH_REDEF_TABLE ('@env:lm_schema_name@','WLF_SRCH_LOG','WLF_SRCH_LOG_TEMP')

	DROP TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP CASCADE CONSTRAINTS PURGE
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG ADD
	CONSTRAINT PK_SRCH_LOG PRIMARY KEY
	(
		ID, JOB_ID, JOB_TIMESTAMP
	) USING INDEX LOCAL
	@go@

	CREATE OR REPLACE TRIGGER @env:lm_schema_name@.TR_WLF_SRCH_LOG
  	BEFORE INSERT ON @env:lm_schema_name@.WLF_SRCH_LOG FOR EACH ROW
  	BEGIN
  		IF ( :new.id = 0 or :new.id is null ) THEN
       		SELECT @env:lm_schema_name@.WLF_SRCH_LOG_SEQ.nextval INTO :new.id FROM DUAL;
       	END IF;
  	END;
	@go@

	BEGIN

		FOR REC IN (
			SELECT UPPER(OBJECT_NAME) AS OBJECT_NAME
			FROM USER_PROCEDURES
			WHERE UPPER(OBJECT_NAME) IN ('CREATE_WLF_SUBPARTS', 'DROP_WLF_SUBPARTS', 'ALTER_WLF_SUBPARTS')
		)
		LOOP
			EXECUTE IMMEDIATE ('DROP PROCEDURE ' || REC.OBJECT_NAME);
		END LOOP;

	END;
	@go@

	CREATE INDEX WLF_SRCH_LOG_IX1
	ON @env:lm_schema_name@.WLF_SRCH_LOG(JOB_ID)
	GLOBAL
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

]

    CREATE TABLE WLF_PURGE_SETTINGS (
        SETTING_ID @ustring@(50) NOT NULL,
        NAME @ustring@(100) NULL,
        OPTIONS @int@ NOT NULL,
        SUB_SECTION @ustring@(50) NULL,
     CONSTRAINT WLF_PURGE_SETTINGS_PK PRIMARY KEY (SETTING_ID)
    )
    @storage_params_insert_update @env:tablespace_default@ default@
    @go@

    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_purgeAlerts','Purge Alerts',0,'Purge Party On-Demand')
    @go@
	INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_purgeResultLogs','Purge Party Result Logs',0,'Purge Party On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_purgeExcludeLists','Purge Party Exclude List',1,'Purge Party On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_purgeIssuedParty','Purge Party with Issued Alerts',0,'Purge Party On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_purgePriorHits','Purge Prior Hits',0,'Purge Party On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_purgePriorHitsByRetention','Purge Prior Hits',0,'Purge Party By Retention Period')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_purgeRelatedMessages','Purge Related Message',1,'Purge Party On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_purgeSearchLog','Purge Party Search Logs',1,'Purge Party On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_CF_RetentionPeriod','Party Retention Period (in months)',60,'Purge Party By Retention Period')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_MS_purgeAlerts','Purge Alerts',0,'Purge Message On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_MS_purgeIssuedMessage','Purge Message with Issued Alerts',0,'Purge Message On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_MS_purgeResultLogs','Purge Result Logs, Message RL Tables,  Policy Manager Log,  WLF_Message_Hits',0,'Purge Message On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_MS_PurgeSearchLog','Purge Message Search Log',1,'Purge Message On-Demand')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_PURGE_SETTINGS(SETTING_ID, NAME, OPTIONS, SUB_SECTION) VALUES('AML_WLF_MS_RetentionPeriod','Message  Retention Period (in months)',60,'Purge Message By Retention Period')
    @go@

[oracle
    CREATE INDEX WLF_LATEST_LIST_ENTRIES_IX
    ON @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES (LIST_ID_PART, LIST_ID, ENTRY_TYPE, ENTRY_UPDATE_DATE)
    GLOBAL
    @storage_index_insert_update @env:tablespace_index@ default@
  	@go@

  	CREATE INDEX IX2_WLF_LIST_ENTRIES
  	ON @env:lm_schema_name@.WLF_LIST_ENTRIES (LIST_VERSION_IDENTIFIER, LIST_ID, LIST_ENTRY_KEY, LIST_ENTRY_SORTER, REVIEW_STATUS)
  	GLOBAL
    @storage_index_insert_update @env:tablespace_index@ default@
  	@go@
]
[mssql
        CREATE INDEX WLF_LATEST_LIST_ENTRIES_IX
        ON @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES (LIST_ID_PART, LIST_ID, ENTRY_TYPE, ENTRY_UPDATE_DATE)
        @storage_index_insert_update @env:tablespace_index@ default@
      	@go@

      	CREATE INDEX IX2_WLF_LIST_ENTRIES
      	ON @env:lm_schema_name@.WLF_LIST_ENTRIES (LIST_VERSION_IDENTIFIER, LIST_ID, LIST_ENTRY_KEY, LIST_ENTRY_SORTER, REVIEW_STATUS)
        @storage_index_insert_update @env:tablespace_index@ default@
      	@go@
]

	CREATE TABLE @env:lm_schema_name@.WLF_PURGE_PARTY_CANDIDATES (
    PARTY_KEY      @ustring@(255)   )
	@storage_params_insert_update @env:tablespace_default@ default@
    @go@

    CREATE TABLE @env:lm_schema_name@.WLF_PURGE_PARTY_RESULT (
    PARTY_KEY      @ustring@(255)   )
    @storage_params_insert_update @env:tablespace_default@ default@
    @go@

    CREATE TABLE @env:lm_schema_name@.WLF_PURGE_MSG_CANDIDATES (
    MESSAGE_KEY      @ustring@(255) )
    @storage_params_insert_update @env:tablespace_default@ default@
    @go@

    CREATE TABLE @env:lm_schema_name@.WLF_PURGE_MSG_RESULT (
    MESSAGE_KEY      @ustring@(255) )
    @storage_params_insert_update @env:tablespace_default@ default@
    @go@

    CREATE TABLE @env:lm_schema_name@.WLF_PURGE_SRCH_CANDIDATES (
    PARTY_KEY      @ustring@(255)   )
    @storage_params_insert_update @env:tablespace_default@ default@
    @go@

    CREATE TABLE @env:lm_schema_name@.WLF_PURGE_SRCH_RESULT (
    PARTY_KEY      @ustring@(255)   )
    @storage_params_insert_update @env:tablespace_default@ default@
    @go@

    CREATE TABLE @env:lm_schema_name@.WLF_PURGE_MS_SRCH_CANDIDATES (
    MESSAGE_KEY      @ustring@(255)  )
    @storage_params_insert_update @env:tablespace_default@ default@
    @go@

    CREATE TABLE @env:lm_schema_name@.WLF_PURGE_MS_SRCH_RESULT (
    MESSAGE_KEY      @ustring@(255)  )
    @storage_params_insert_update @env:tablespace_default@ default@
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI
    DROP CONSTRAINT FK_WLF_RL_MSG_INTERMEDIATE_FI
	@go@

[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMED_TEMP
    DROP CONSTRAINT FK_WLF_RL_MSG_INTERMED_T

    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_TEMP ADD
    CUSTOM_STRING_21 @ustring@(500),
    CUSTOM_STRING_22 @ustring@(500),
    CUSTOM_STRING_23 @ustring@(500),
    CUSTOM_STRING_24 @ustring@(500),
    CUSTOM_STRING_25 @ustring@(500),
    CUSTOM_STRING_26 @ustring@(500),
    CUSTOM_STRING_27 @ustring@(500),
    CUSTOM_STRING_28 @ustring@(500),
    CUSTOM_STRING_29 @ustring@(500),
    CUSTOM_STRING_30 @ustring@(500),
    CUSTOM_STRING_31 @ustring@(500),
    CUSTOM_STRING_32 @ustring@(500),
    CUSTOM_STRING_33 @ustring@(500),
    CUSTOM_STRING_34 @ustring@(500),
    CUSTOM_STRING_35 @ustring@(500),
    CUSTOM_STRING_36 @ustring@(4000),
    CUSTOM_STRING_37 @ustring@(4000),
    CUSTOM_STRING_38 @ustring@(4000),
    CUSTOM_STRING_39 @ustring@(4000),
    CUSTOM_STRING_40 @ustring@(4000),
    CUSTOM_DATE_6 @datetime@,
    CUSTOM_DATE_7 @datetime@,
    CUSTOM_DATE_8 @datetime@,
    CUSTOM_DATE_9 @datetime@,
    CUSTOM_DATE_10 @datetime@,
    CUSTOM_DATE_11 @datetime@,
    CUSTOM_DATE_12 @datetime@,
    CUSTOM_DATE_13 @datetime@,
    CUSTOM_DATE_14 @datetime@,
    CUSTOM_DATE_15 @datetime@,
    CUSTOM_BOOLEAN_6 @tinyint@,
    CUSTOM_BOOLEAN_7 @tinyint@,
    CUSTOM_BOOLEAN_8 @tinyint@,
    CUSTOM_BOOLEAN_9 @tinyint@,
    CUSTOM_BOOLEAN_10 @tinyint@,
    CUSTOM_NUMBER_1 @number@(18,3),
    CUSTOM_NUMBER_2 @number@(18,3),
    CUSTOM_NUMBER_3 @number@(18,3),
    CUSTOM_NUMBER_4 @number@(18,3),
    CUSTOM_NUMBER_5 @number@(18,3)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP DROP COLUMN AGE
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP DROP COLUMN AGE_AS_OF_DATE
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY_TEMP
	DROP CONSTRAINT PK_RL_PARTY_T
	@go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY_TEMP
    ALTER COLUMN JOB_ID @ustring@(50) NOT NULL
    @go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY_TEMP ADD
	CONSTRAINT PK_RL_PARTY_T PRIMARY KEY @nonclustered@
	(
		ID,INSTANCE_ID,JOB_ID
	)
	@go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_DOB_TEMP
    ALTER COLUMN DOB @ustring@(50) NULL
    @go@
]

	UPDATE @env:lm_schema_name@.WLF_CF_HASH_CONFIG
	SET PARTY_ATTRIBUTES = 'partyKey,partyIds.idType,partyIds.idNumber,partyIds.idCountry,partyFullName,partyAliases.aliasFullName,partyAddresses.partyCountry,partyYearOfBirth,partyBirthCountry,gender,'
	WHERE DESCRIPTION ='3.3.3+'
	@go@

	INSERT INTO @env:lm_schema_name@.WLF_CF_HASH_CONFIG (VERSION,DESCRIPTION,PRIORITY,PARTY_ATTRIBUTES,ENTRY_ATT_PARTY,ENTRY_ATT_CNTRY,ENTRY_ATT_ID,HIT_ATTRIBUTES,STATUS)
    (select distinct (select max(VERSION) + 1 from @env:lm_schema_name@.WLF_CF_HASH_CONFIG)
    ,'3.5.1+'
    ,(select max(PRIORITY) + 1 from @env:lm_schema_name@.WLF_CF_HASH_CONFIG)
    ,'partyKey,partyIds.idType,partyIds.idNumber,partyIds.idCountry,partyFullName,partyAliases.aliasFullName,partyAddresses.partyCountry,partyYearOfBirth,partyBirthCountry,partyNationalityCountries.countryCode,gender,'
    ,null, null, null,
    'listId,entryId,fullName,aliases.aliasFullName,addresses.country,ids.idType,ids.idNumber,ids.idCountry,nationalityCountries.country,placesOfBirth.birthCountry,datesOfBirth.yearOfBirth,gender,matchType,score,'
    ,'1' from @env:lm_schema_name@.WLF_CF_HASH_CONFIG
    where not exists ( select 1 from @env:lm_schema_name@.WLF_CF_HASH_CONFIG where DESCRIPTION = '3.5.1+'))
	@go@

	UPDATE @env:lm_schema_name@.WLF_CF_HASH_CONFIG set STATUS = '0' where DESCRIPTION in ('3.3.2+','3.X','2.4.X' )
	and 0 = (select count(*) from @env:lm_schema_name@.WLF_HITS)
	@go@

	CREATE  INDEX WLF_MESSAGE_SEARCH_LOG_IDX1 ON @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG(MESSAGE_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_MESSAGE_SEARCH_LOG_IDX2 ON @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG(JOB_TIMESTAMP)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_POLICY_RULES_AUDIT_IDX1 ON @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT(MESSAGE_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_POLICY_RULES_AUDIT_IDX2 ON @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT(PROCESS_DATE)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_MESSAGE_HITS_IDX1 ON @env:lm_schema_name@.WLF_MESSAGE_HITS(MESSAGE_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_MESSAGE_HITS_IDX2 ON @env:lm_schema_name@.WLF_MESSAGE_HITS(HIT_TIMESTAMP)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_MESSAGE_IDX1 ON @env:lm_schema_name@.WLF_RL_MESSAGE(MESSAGE_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_MESSAGE_IDX2 ON @env:lm_schema_name@.WLF_RL_MESSAGE(JOB_TIMESTAMP)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_SRCH_LOG_IDX1 ON @env:lm_schema_name@.WLF_SRCH_LOG(PARTY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_SRCH_LOG_IDX2 ON @env:lm_schema_name@.WLF_SRCH_LOG(JOB_TIMESTAMP)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_HIT_EXCLUDE_ENTRIES_IDX1 ON @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES(PARTY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_HIT_EXCLUDE_ENTRIES_IDX2 ON @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES(EXPIRATION_DATE)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_ENTITY_EXCL_ENTRIES_IDX1 ON @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES(PARTY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_ENTITY_EXCL_ENTRIES_IDX2 ON @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES(EXPIRATION_DATE)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_HITS_IDX1 ON @env:lm_schema_name@.WLF_HITS(PARTY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_HITS_IDX2 ON @env:lm_schema_name@.WLF_HITS(HIT_TIMESTAMP)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_PARTY_IDX1 ON @env:lm_schema_name@.WLF_RL_PARTY(PARTY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_PARTY_IDX2 ON @env:lm_schema_name@.WLF_RL_PARTY(PROCESS_DATE)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_PURGE_PARTY_CAND_IDX1 ON @env:lm_schema_name@.WLF_PURGE_PARTY_CANDIDATES(PARTY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_PURGE_SRCH_CAND_IDX1 ON @env:lm_schema_name@.WLF_PURGE_SRCH_CANDIDATES(PARTY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_PURGE_MSG_CAND_IDX1 ON @env:lm_schema_name@.WLF_PURGE_MSG_CANDIDATES(MESSAGE_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_PURGE_MS_SRCH_CAND_IDX1 ON @env:lm_schema_name@.WLF_PURGE_MS_SRCH_CANDIDATES(MESSAGE_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

}


version 3.5.1.4 ADD {
[oracle
     ALTER TABLE @env:lm_schema_name@.WLF_PLUGIN_SETTINGS
         ADD TAB  VARCHAR2(50)
         ADD DESCRIPTION VARCHAR2(255)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_PLUGIN_SETTINGS
        RENAME COLUMN MAX_REFRESH_COUNT TO VALUE
     @go@
]

[mssql
     ALTER TABLE @env:lm_schema_name@.WLF_PLUGIN_SETTINGS
        ADD TAB NVARCHAR(50)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_PLUGIN_SETTINGS
        ADD DESCRIPTION NVARCHAR(255)
     @go@

     EXEC sp_rename '@env:lm_schema_name@.WLF_PLUGIN_SETTINGS.MAX_REFRESH_COUNT' , 'VALUE', 'COLUMN'
     @go@
]

     UPDATE  @env:lm_schema_name@.WLF_PLUGIN_SETTINGS SET DESCRIPTION = 'Maximum Refresh Count', TAB = 'Jobs Monitor' WHERE SETTING_ID = 'JOB_MONITOR'
     @go@

     INSERT INTO @env:lm_schema_name@.WLF_PLUGIN_SETTINGS (SETTING_ID, VALUE, TAB, DESCRIPTION) VALUES ('OD_GENERATE_ALERTS', '0', 'On-Demand Search', 'Generate Alerts By Default')
     @go@

[oracle

    DECLARE
        i INTEGER;
    BEGIN
        SELECT COUNT(*) INTO i FROM user_indexes WHERE index_name = 'WLF_LATEST_LIST_DELETED_IDX';
        IF i = 0 THEN
            EXECUTE IMMEDIATE 'CREATE INDEX WLF_LATEST_LIST_DELETED_IDX ON @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES(LIST_ID_PART, IS_DELETED) @storage_index_insert_update @env:tablespace_index@ default@';
        END IF;
    END;

    @go@
]

[mssql

    IF NOT EXISTS (SELECT *  FROM sys.indexes  WHERE name='WLF_LATEST_LIST_DELETED_IDX')
    begin
        CREATE INDEX WLF_LATEST_LIST_DELETED_IDX on @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES(LIST_ID_PART, IS_DELETED) @storage_index_insert_update @env:tablespace_index@ default LOCAL@;
    end;

    @go@

	CREATE  INDEX WLF_RL_HIT_ADDINFO_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_ADDINFO(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_HIT_ADDRESS_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_ADDRESS(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_HIT_ALIAS_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_ALIAS(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_HIT_CAT_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_CATEGORY(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_HIT_DOB_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_DOB(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_HIT_ID_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_ID(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_HIT_KEY_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_KEYWORD(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_HIT_NAT_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_NATIONALITY(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_HIT_POB_IDX2 ON  @env:lm_schema_name@.WLF_RL_HIT_POB(HIT_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_ADDRESS_IDX2 ON  @env:lm_schema_name@.WLF_RL_ADDRESS(PARTY_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_ALIAS_IDX2 ON  @env:lm_schema_name@.WLF_RL_ALIAS(PARTY_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_ID_IDX2 ON  @env:lm_schema_name@.WLF_RL_ID(PARTY_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_NAT_IDX2 ON  @env:lm_schema_name@.WLF_RL_NATIONALITY(PARTY_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_MESSAGE_INTERM_IDX2 ON  @env:lm_schema_name@.WLF_RL_MESSAGE_INTERMEDIATE_FI(WLF_RL_MESSAGE_ID, JOB_ID, INSTANCE_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE  INDEX WLF_RL_MESSAGE_IDX3 ON  @env:lm_schema_name@.WLF_RL_MESSAGE(PARTY_KEY)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

]

[oracle

	CREATE  INDEX WLF_RL_HIT_ADDINFO_IDX2 ON  WLF_RL_HIT_ADDINFO(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_HIT_ADDRESS_IDX2 ON  WLF_RL_HIT_ADDRESS(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_HIT_ALIAS_IDX2 ON  WLF_RL_HIT_ALIAS(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_HIT_CAT_IDX2 ON  WLF_RL_HIT_CATEGORY(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_HIT_DOB_IDX2 ON  WLF_RL_HIT_DOB(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_HIT_ID_IDX2 ON  WLF_RL_HIT_ID(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_HIT_KEY_IDX2 ON  WLF_RL_HIT_KEYWORD(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_HIT_NAT_IDX2 ON  WLF_RL_HIT_NATIONALITY(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_HIT_POB_IDX2 ON  WLF_RL_HIT_POB(HIT_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_ADDRESS_IDX2 ON  WLF_RL_ADDRESS(PARTY_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_ALIAS_IDX2 ON  WLF_RL_ALIAS(PARTY_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_ID_IDX2 ON  WLF_RL_ID(PARTY_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_NAT_IDX2 ON  WLF_RL_NATIONALITY(PARTY_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_MESSAGE_INTERM_IDX2 ON  WLF_RL_MESSAGE_INTERMEDIATE_FI(WLF_RL_MESSAGE_ID, JOB_ID, INSTANCE_ID)
	LOCAL
	/

	CREATE  INDEX WLF_RL_MESSAGE_IDX3 ON  WLF_RL_MESSAGE(PARTY_KEY)
	/

]

}


version 3.5.1.5 ADD {
[oracle
		CREATE TABLE @env:lm_schema_name@.WLF_DB_SETTINGS (
		SETTING_ID		@ustring@(255) NOT NULL,
		VALUE   @int@
		)
		@storage_params_insert_update @env:tablespace_default@ default@
		@go@

		ALTER TABLE @env:lm_schema_name@.WLF_DB_SETTINGS ADD
			CONSTRAINT PK_WLF_DB_SETTINGS PRIMARY KEY @nonclustered@
			(
				SETTING_ID
			)
		@storage_primary_insert_update @env:tablespace_index@ default@
		@go@

		insert into @env:lm_schema_name@.WLF_DB_SETTINGS (SETTING_ID,VALUE) values('DDL_LOCK_TIMEOUT',600)
		@go@

]
}

version 3.5.1.6 ADD {
}

version 3.5.1.7 ADD {
}

version 3.5.1.8 add {
}

version 3.5.1.9 add {
}

version 3.5.1.32 add {
}

version 3.5.1.33 add {
}

version 3.5.1.34 add {
[mssql
	create @nonclustered@ INDEX WLF_LATEST_LIST_ENTRIES_IX1 on @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES
	(LIST_ID ASC, LIST_ENTRY_KEY, LIST_ID_PART ASC)
	with (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
	@go@
]
}

version 3.5.1.35 add {
}

version 3.5.1.36 add {
}

version 3.5.1.37 add {
}

version 3.5.1.38 add {
}

version 3.5.1.39 add {
}

version 3.5.1.40 add {
}

version 3.5.1.41 add {
}

version 3.5.1.42 add {
}

version 3.5.1.43 add {
}

version 3.5.1.44 add {
}
version 3.5.1.47 add {
}

version 10.0.0.2 add {
}
version 10.0.0.3 add {
[oracle

	begin
    	execute immediate ('DROP INDEX IX2_WLF_LIST_ENTRIES');
    	exception
    	when others then
    	null;
    	end;
    	@go@

    	begin
    	execute immediate ('DROP INDEX WLF_LATEST_LIST_ENTRIES_IX');
    	exception
    	when others then
    	null;
    	end;
    	@go@

        begin
    	execute immediate ('IX2_WLF_TMP_LIST_ENTRIES');
    	exception
    	when others then
    	null;
    	end;
    	@go@

    	create index IX2_WLF_TMP_LIST_ENTRIES
    	on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(LIST_VERSION_IDENTIFIER, LIST_ID, LIST_ENTRY_KEY, LIST_ENTRY_SORTER, REVIEW_STATUS)
    	GLOBAL
    	@go@

    	create index IX2_WLF_LIST_ENTRIES
    	on @env:lm_schema_name@.WLF_LIST_ENTRIES(LIST_VERSION_IDENTIFIER, LIST_ID, LIST_ENTRY_KEY, LIST_ENTRY_SORTER, REVIEW_STATUS)
    	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
    	@go@


    	create index WLF_LATEST_LIST_ENTRIES_IX
    	on @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES(LIST_ID_PART, LIST_ID, ENTRY_TYPE, ENTRY_UPDATE_DATE)
    	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
    	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG
	MODIFY ( ID NUMBER (15,0) )
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG
	MODIFY ( ID NUMBER (15,0) )
	@go@
	CREATE OR REPLACE PROCEDURE WLF_CLEAR_JOB_RL_HIT(p_job_id IN varchar2, p_instance_id varchar2)
	 AS

	begin
	  for cur in (select id, job_id, instance_id from  WLF_RL_HIT where  job_id = p_job_id and instance_id = p_instance_id)
	  loop
	     delete from WLF_RL_HIT_ADDINFO
	     where hit_id = cur.id and job_id =  cur.job_id and instance_id = cur.instance_id;

	     delete from WLF_RL_HIT_ADDRESS
	     where hit_id = cur.id and job_id =  cur.job_id and instance_id = cur.instance_id;

	    delete from WLF_RL_HIT_ALIAS
	    where hit_id = cur.id and job_id =  cur.job_id and instance_id = cur.instance_id;

	    delete from WLF_RL_HIT_CATEGORY
	    where hit_id = cur.id and job_id =  cur.job_id and instance_id = cur.instance_id;

	    delete from WLF_RL_HIT_DOB
	    where hit_id = cur.id and job_id = cur.job_id and instance_id = cur.instance_id;

	    delete from WLF_RL_HIT_ID
	    where hit_id = cur.id and job_id = cur.job_id and instance_id = cur.instance_id;

	    delete from WLF_RL_HIT_KEYWORD
	    where hit_id = cur.id and job_id =  cur.job_id and instance_id = cur.instance_id;

	    delete from WLF_RL_HIT_NATIONALITY
	    where hit_id = cur.id and job_id =  cur.job_id and instance_id = cur.instance_id;

	    delete from WLF_RL_HIT_POB
	    where hit_id = cur.id and job_id =  cur.job_id and instance_id = cur.instance_id;

	       delete from WLF_RL_HIT
	       where id = cur.id and job_id = cur.job_id and instance_id = cur.instance_id;

	  end loop;

	 exception when others then
	  RAISE_APPLICATION_ERROR(-20001,'Error while clearing job from RL HIT tables, job_id:   '||p_job_id||'.'|| SQLERRM);
	end WLF_CLEAR_JOB_RL_HIT;
	@go@

	CREATE OR REPLACE PROCEDURE WLF_CLEAR_JOB_RL(p_job_id IN varchar2)
	 AS

	begin
	    for cur in (select job_id, instance_id from  WLF_RL_PARTY where job_id = p_job_id)

	    loop
	      WLF_CLEAR_JOB_RL_HIT(cur.job_id, cur.instance_id);

	    delete from WLF_RL_ADDRESS
	     where job_id = cur.job_id and instance_id = cur.instance_id;

	     delete from WLF_RL_ALIAS
	     where job_id = cur.job_id and instance_id = cur.instance_id;

	     delete from WLF_RL_ID
	     where job_id = cur.job_id and instance_id = cur.instance_id;

	     delete from WLF_RL_NATIONALITY
	     where  job_id = cur.job_id and instance_id = cur.instance_id;

	    delete from WLF_RL_PARTY
	     where job_id =  cur.job_id and instance_id =  cur.instance_id;
	   end loop;

	  exception when others then
	  RAISE_APPLICATION_ERROR(-20001,'Error while clearing job from RL tables  '||p_job_id||'.'|| SQLERRM);
	end WLF_CLEAR_JOB_RL;
	@go@

	CREATE OR REPLACE PROCEDURE WLF_CLEAR_JOB_LOG(p_job_id IN varchar2)
	 AS

	begin
	   delete from WLF_SRCH_LOG where job_id = p_job_id;
	   delete from WLF_SUMMARY_LOG  where job_id = p_job_id;

	 --  delete from WLF_SELF_SERVICE_STAGING  where unique_id = (select staging_uid from WLF_SELF_SERVICE_JOBS where job_id = p_job_id);

	   delete from WLF_SELF_SERVICE_OUTPUT_DATA  where job_id = p_job_id;
	   delete from WLF_SELF_SERVICE_OUTPUT_FILES  where job_id = p_job_id;

	   delete from WLF_JOB_CF_DETAILS  where job_id = p_job_id;
	   delete from WLF_JOB_MS_DETAILS  where job_id = p_job_id;
	   delete from WLF_JOB_ETL_DETAILS  where job_id = p_job_id;
	   delete from WLF_JOBS_LOG_DETAILS  where job_id = p_job_id;
	   delete from WLF_JOBS_LOG  where job_id = p_job_id;

	   WLF_CLEAR_JOB_RL(p_job_id);

	  commit;

	exception when others then
	  rollback;
	  RAISE_APPLICATION_ERROR(-20001,'Error while clearing job '||p_job_id||'.'|| SQLERRM);
	end WLF_CLEAR_JOB_LOG;
	@go@
]

[mssql
	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG DROP CONSTRAINT PK_MESSAGE_SEARCH_LOG
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG ALTER COLUMN ID NUMERIC (15,0)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SEARCH_LOG ADD
	CONSTRAINT PK_MESSAGE_SEARCH_LOG PRIMARY KEY nonclustered
	(
		ID, JOB_ID, JOB_TIMESTAMP
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG DROP CONSTRAINT PK_MESSAGE_SUMMARY_LOG
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG ALTER COLUMN ID NUMERIC (15,0)
	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_MESSAGE_SUMMARY_LOG ADD
		CONSTRAINT PK_MESSAGE_SUMMARY_LOG PRIMARY KEY @nonclustered@
		(
			ID,
			JOB_ID
		)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@
	if exists (select * from sysobjects where name = 'WLF_LM_REBUILD_INDEXES')
			drop procedure @env:lm_schema_name@.WLF_LM_REBUILD_INDEXES
	@go@

	CREATE PROCEDURE @env:lm_schema_name@.WLF_LM_REBUILD_INDEXES
		WITH EXECUTE AS OWNER
		AS
		BEGIN
			BEGIN TRY

			DECLARE	@EXE_STR nvarchar(400);
			DECLARE c_cursor CURSOR FOR
				SELECT 'ALTER INDEX '+i.name+' ON ' + s.name + '.' + t.name + ' REBUILD;'
					from sys.indexes i
					join sys.tables t on t.object_id = i.object_id
					Join sys.schemas s on s.schema_id = t.schema_id
					where  i.name is not null
					and ( t.name  in (select LIVE_TABLE_NAME from WLF_ARCHIVE_TABLES_INFO where LIVE_TABLE_NAME <> 'WLF_LIST_VERSIONS')
					or t.name like 'WLF_LATEST_LIST%')
				order by t.name, i.is_primary_key desc;

			OPEN c_cursor
			FETCH NEXT FROM c_cursor INTO @EXE_STR
				WHILE @@FETCH_STATUS = 0
				BEGIN
					--print @EXE_STR
					EXEC sp_executesql @EXE_STR
					FETCH NEXT FROM c_cursor  INTO @EXE_STR
				END
			CLOSE c_cursor;
			DEALLOCATE c_cursor;

			END TRY
			BEGIN CATCH
				SELECT
				ERROR_NUMBER()    AS ErrorNumber ,
				ERROR_SEVERITY()  AS ErrorSeverity ,
				ERROR_STATE()     AS ErrorState ,
				ERROR_PROCEDURE() AS ErrorProcedure ,
				ERROR_LINE()      AS ErrorLine ,
				ERROR_MESSAGE()   AS ErrorMessage;
				RETURN 1
			END CATCH
		END
	@go@
	if exists (select * from sysobjects where name = 'WLF_CLEAR_JOB_RL_HIT')
			drop procedure @env:lm_schema_name@.WLF_CLEAR_JOB_RL_HIT
	@go@

	CREATE PROCEDURE @env:lm_schema_name@.WLF_CLEAR_JOB_RL_HIT
	@P_JOB_ID @ustring@(50),
	@P_INSTANCE_ID @ustring@(255)
	AS
	BEGIN
		BEGIN TRY
			DECLARE
				@ID @int@,
				@JOB_ID @ustring@(50),
				@INSTANCE_ID @ustring@(255)

	SET NOCOUNT ON;

		BEGIN
			DECLARE CLEAR_JOB_RL_HIT_CURSOR CURSOR LOCAL FOR
				SELECT ID, JOB_ID, INSTANCE_ID from  WLF_RL_HIT where JOB_ID = @P_JOB_ID and INSTANCE_ID = @P_INSTANCE_ID;

	OPEN CLEAR_JOB_RL_HIT_CURSOR;
	FETCH NEXT FROM CLEAR_JOB_RL_HIT_CURSOR
	INTO @ID, @JOB_ID, @INSTANCE_ID
	WHILE @@FETCH_STATUS = 0
		BEGIN

			DELETE FROM WLF_RL_HIT_ADDINFO WHERE HIT_ID = @ID AND JOB_ID =  @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT_ADDRESS WHERE HIT_ID = @ID AND JOB_ID =  @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT_ALIAS WHERE HIT_ID = @ID AND JOB_ID =  @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT_CATEGORY WHERE HIT_ID = @ID AND JOB_ID =  @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT_DOB WHERE HIT_ID = @ID AND JOB_ID = @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT_ID WHERE HIT_ID = @ID AND JOB_ID = @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT_KEYWORD WHERE HIT_ID = @ID AND JOB_ID =  @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT_NATIONALITY WHERE HIT_ID = @ID AND JOB_ID =  @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT_POB WHERE HIT_ID = @ID AND JOB_ID =  @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_HIT WHERE ID = @ID AND JOB_ID = @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;

			FETCH NEXT FROM CLEAR_JOB_RL_HIT_CURSOR INTO @ID, @JOB_ID, @INSTANCE_ID;
		END
	CLOSE CLEAR_JOB_RL_HIT_CURSOR;
	DEALLOCATE CLEAR_JOB_RL_HIT_CURSOR;
		END

		IF @@TRANCOUNT > 0
			COMMIT

		END TRY
		BEGIN CATCH

			SELECT
			 ERROR_NUMBER() AS ErrorNumber
			,ERROR_SEVERITY() AS ErrorSeverity
			,ERROR_STATE() AS ErrorState
			,ERROR_PROCEDURE() AS ErrorProcedure
			,ERROR_LINE() AS ErrorLine
			,ERROR_MESSAGE() AS ErrorMessage;
		IF @@TRANCOUNT > 0
				ROLLBACK TRANSACTION;

		RETURN 1;
		END CATCH

	END
	@go@

	if exists (select * from sysobjects where name = 'WLF_CLEAR_JOB_RL')
			drop procedure @env:lm_schema_name@.WLF_CLEAR_JOB_RL
	@go@

	CREATE PROCEDURE @env:lm_schema_name@.WLF_CLEAR_JOB_RL
	@P_JOB_ID @ustring@(50)
	AS
	BEGIN
		BEGIN TRY
			DECLARE
				@JOB_ID @ustring@(50),
				@INSTANCE_ID @ustring@(255)

	SET NOCOUNT ON;

	BEGIN
		DECLARE CLEAR_JOB_CURSOR CURSOR LOCAL FOR
			select JOB_ID, INSTANCE_ID from  WLF_RL_PARTY where JOB_ID = @P_JOB_ID;

	OPEN CLEAR_JOB_CURSOR;
	FETCH NEXT FROM CLEAR_JOB_CURSOR INTO @JOB_ID, @INSTANCE_ID
	WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC WLF_CLEAR_JOB_RL_HIT @JOB_ID, @INSTANCE_ID;

			DELETE FROM WLF_RL_ADDRESS WHERE JOB_ID = @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_ALIAS WHERE JOB_ID = @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_ID WHERE JOB_ID = @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_NATIONALITY WHERE  JOB_ID = @JOB_ID AND INSTANCE_ID = @INSTANCE_ID;
			DELETE FROM WLF_RL_PARTY WHERE JOB_ID =  @JOB_ID AND INSTANCE_ID =  @INSTANCE_ID;

			FETCH NEXT FROM CLEAR_JOB_CURSOR INTO @JOB_ID, @INSTANCE_ID;
		END
	CLOSE CLEAR_JOB_CURSOR;
	DEALLOCATE CLEAR_JOB_CURSOR;
	END

	IF @@TRANCOUNT > 0
			COMMIT

	END TRY
		  BEGIN CATCH
			SELECT
			ERROR_NUMBER() AS ErrorNumber
			,ERROR_SEVERITY() AS ErrorSeverity
			,ERROR_STATE() AS ErrorState
			,ERROR_PROCEDURE() AS ErrorProcedure
			,ERROR_LINE() AS ErrorLine
			,ERROR_MESSAGE() AS ErrorMessage;

			IF @@TRANCOUNT > 0
				ROLLBACK TRANSACTION;

			RETURN 1;

		  END CATCH
	END
	@go@

	if exists (select * from sysobjects where name = 'WLF_CLEAR_JOB_LOG')
			drop procedure @env:lm_schema_name@.WLF_CLEAR_JOB_LOG
	@go@

	CREATE PROCEDURE @env:lm_schema_name@.WLF_CLEAR_JOB_LOG
	@JOB_ID @ustring@(50)
	AS
	BEGIN
		BEGIN TRY

		SET NOCOUNT ON;

		DELETE FROM WLF_SRCH_LOG WHERE JOB_ID = @JOB_ID;
		DELETE FROM WLF_SUMMARY_LOG  WHERE JOB_ID = @JOB_ID;
		--  DELETE FROM WLF_SELF_SERVICE_STAGING  WHERE UNIQUE_ID = (SELECT STAGING_UID FROM WLF_SELF_SERVICE_JOBS WHERE JOB_ID = @JOB_ID);
		DELETE FROM WLF_SELF_SERVICE_OUTPUT_DATA  WHERE JOB_ID = @JOB_ID;
		DELETE FROM WLF_SELF_SERVICE_OUTPUT_FILES  WHERE JOB_ID = @JOB_ID;
		DELETE FROM WLF_JOB_CF_DETAILS  WHERE JOB_ID = @JOB_ID;
		DELETE FROM WLF_JOB_MS_DETAILS  WHERE JOB_ID = @JOB_ID;
		DELETE FROM WLF_JOB_ETL_DETAILS  WHERE JOB_ID = @JOB_ID;
		DELETE FROM WLF_JOBS_LOG_DETAILS  WHERE JOB_ID = @JOB_ID;
		DELETE FROM WLF_JOBS_LOG  WHERE JOB_ID = @JOB_ID;

		EXEC WLF_CLEAR_JOB_RL @JOB_ID;

		IF @@TRANCOUNT > 0
			COMMIT
	END TRY

		BEGIN CATCH
			SELECT
				ERROR_NUMBER() AS ErrorNumber
				,ERROR_SEVERITY() AS ErrorSeverity
				,ERROR_STATE() AS ErrorState
				,ERROR_PROCEDURE() AS ErrorProcedure
				,ERROR_LINE() AS ErrorLine
				,ERROR_MESSAGE() AS ErrorMessage;

			IF @@TRANCOUNT > 0
				ROLLBACK TRANSACTION;

			RETURN 1;

		END CATCH
	END
	@go@
]
}
version 10.0.0.4 add {
}
version 10.0.0.5 add {
	INSERT INTO @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('rl_partyKey',0)
	@go@
}
version 10.1.0.1 add {
}
version 10.1.0.2 add {
	CREATE TABLE @env:lm_schema_name@.WLF_EI_FAILED_PARTIES (
		PARTY_KEY 			@ustring@ (50) 	NOT NULL ,
		CREATE_DATE 		@datetime@ 	NULL ,
		ALERT_ID 	@ustring@ (50) 	 NULL
	)
	@storage_params_insert_update  @env:tablespace_default@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_EI_FAILED_PARTIES add
		CONSTRAINT WLF_EI_FAILED_PARTIES_PK PRIMARY KEY
		(
			PARTY_KEY
		)
	@storage_primary_insert_update  @env:tablespace_index@ default@
	@go@
}
version 10.1.0.3 add {
[mssql
    if exists (select * from sysobjects where name = 'V_LATEST_LIST_ENTRIES')
		drop view @env:lm_schema_name@.V_LATEST_LIST_ENTRIES
	@go@

	CREATE VIEW @env:lm_schema_name@.V_LATEST_LIST_ENTRIES AS
	  SELECT B.LIST_ID,
        B.VERSION,
        B.LIST_ID_PART,
        B.LIST_ENTRY_KEY ,
        B.ENTRY_UPDATE_DATE,
        B.ENTRY_CREATED_DATE,
        B.IS_DELETED,
    	B.UPDATE_CATEGORY,
    	B.CRITICAL_UPDATE_DATE,
        B.ENTRY_TYPE,
        B.ENTRY_FIRST_NAME,
        B.ENTRY_MIDDLE_NAME,
        B.ENTRY_LAST_NAME,
        B.ENTRY_FULL_NAME,
        B.ENTRY_MAIDEN_NAME,
        B.IS_BROKEN,
        B.CITIZENSHIP,
        B.DECEASED,
        B.DECEASED_DATE,
        B.GENDER,
        B.TITLE,
        B.POSITION,
        B.ALIAS_SET,
        B.ADDRESS_SET,
        B.ID_SET,
        B.NATIONALITY_COUNTRY_SET,
    	B.AGE,
        B.AGE_AS_OF_DATE,
        B.DATE_OF_BIRTH_SET,
        B.LIST_VERSION_IDENTIFIER,
        B.PLACE_OF_BIRTH_SET,
        B.KEYWORD_SET,
        B.CATEGORY_SET,
        B.ADD_INFO_SET,
        B.CUSTOM_FIELD_1,
        B.CUSTOM_FIELD_2,
        B.CUSTOM_FIELD_3,
        B.CUSTOM_FIELD_4,
        B.CUSTOM_FIELD_5,
        B.CUSTOM_FIELD_6,
        B.CUSTOM_FIELD_7,
        B.CUSTOM_FIELD_8,
        B.CUSTOM_FIELD_9,
        B.CUSTOM_FIELD_10,
        B.CUSTOM_FIELD_11,
        B.CUSTOM_FIELD_12,
        B.CUSTOM_FIELD_13,
        B.CUSTOM_FIELD_14,
        B.CUSTOM_FIELD_15,
        B.CUSTOM_FIELD_16,
        B.CUSTOM_FIELD_17,
        B.CUSTOM_FIELD_18
      FROM WLF_LATEST_LIST_ENTRIES B
      INNER JOIN WLF_LIST_DEFINITIONS D
          ON B.LIST_ID = D.LIST_ID
          AND B.LIST_ID_PART = D.LATEST_LIST_ID_PART
    	@go@

	if exists (select * from sysobjects where name = 'V_LATEST_VERSIONS_LIST')
		drop view @env:lm_schema_name@.V_LATEST_VERSIONS_LIST
	@go@

	CREATE VIEW @env:lm_schema_name@.V_LATEST_VERSIONS_LIST AS
	SELECT  LS.LIST_ID, LS.VERSION, LS.LIST_ID_PART, LS.LIST_ENTRY_KEY , LS.ENTRY_UPDATE_DATE, LS.ENTRY_CREATED_DATE, G.ENTRY_MAX_UPDATE_DATE, LS.UPDATE_CATEGORY,
								LS.CRITICAL_UPDATE_DATE, LS.IS_DELETED, LS.ENTRY_TYPE, LS.ENTRY_FIRST_NAME, LS.ENTRY_MIDDLE_NAME,
                                LS.ENTRY_LAST_NAME, LS.ENTRY_FULL_NAME, LS.ENTRY_MAIDEN_NAME,
                                LS.IS_BROKEN, LS.CITIZENSHIP, LS.DECEASED, LS.DECEASED_DATE, LS.GENDER, LS.TITLE,
                                LS.POSITION, LS.ALIAS_SET, LS.ADDRESS_SET, LS.ID_SET,
                                LS.NATIONALITY_COUNTRY_SET, LS.AGE, LS.AGE_AS_OF_DATE, LS.DATE_OF_BIRTH_SET, LS.LIST_VERSION_IDENTIFIER,
                                LS.PLACE_OF_BIRTH_SET, LS.KEYWORD_SET, LS.CATEGORY_SET, LS.ADD_INFO_SET,
                                LS.CUSTOM_FIELD_1, LS.CUSTOM_FIELD_2, LS.CUSTOM_FIELD_3, LS.CUSTOM_FIELD_4, LS.CUSTOM_FIELD_5,
                                LS.CUSTOM_FIELD_6, LS.CUSTOM_FIELD_7, LS.CUSTOM_FIELD_8, LS.CUSTOM_FIELD_9, LS.CUSTOM_FIELD_10,
                                LS.CUSTOM_FIELD_11, LS.CUSTOM_FIELD_12, LS.CUSTOM_FIELD_13, LS.CUSTOM_FIELD_14, LS.CUSTOM_FIELD_15,
                                                                                LS.CUSTOM_FIELD_16, LS.CUSTOM_FIELD_17, LS.CUSTOM_FIELD_18
                FROM
                V_LATEST_LIST_ENTRIES LS
                Inner Join WLF_LIST_DEFINITIONS LD
                                ON LS.LIST_ID = LD.LIST_ID
  				Inner Join WLF_LIST_VERSIONS G ON LS.LIST_ID = G.LIST_ID AND LS.VERSION = G.VERSION
	WHERE COALESCE(LD.IS_DELETED,0) = 0
	@go@

]
}
version 10.1.0.4 add {
    INSERT INTO @env:lm_schema_name@.APP_SEQUENCES (SEQUENCE_ID,LATEST_VALUE) values('idb_issue_key',0)
    @go@
}
version 10.1.0.5 add {
}
version 10.1.0.6 add {
}
version 10.1.0.7 add {
}
version 10.1.0.8 add {
}
version 10.1.0.9 add {
}
version 10.1.0.10 add {
}
version 10.1.0.11 add {
}
version 10.1.0.12 add {
}
version 10.1.0.13 add {
}
version 10.1.0.14 add {
}
version 10.1.0.15 add {
}
version 10.1.0.16 add {
}
version 10.1.0.17 add {
}
version 10.1.0.18 add {
}
version 10.1.0.19 add {
}
version 10.1.0.20 add {
}
version 10.1.0.21 add {
}
version 10.1.0.22 add {
    DELETE FROM @env:lm_schema_name@.APP_SEQUENCES where SEQUENCE_ID='idb_issue_key'
    @go@
}
version 10.1.0.23 add {
}
version 10.1.0.24 add {
}
version 10.1.0.25 add {
}
version 10.1.0.26 add {
}
version 10.1.0.27 add {
[mssql
      IF NOT EXISTS (SELECT *  FROM sys.indexes  WHERE name='WLF_MESSAGE_HITS_HASH_KEY_IDX')
      begin
          create @nonclustered@ INDEX WLF_MESSAGE_HITS_HASH_KEY_IDX on @env:lm_schema_name@.WLF_MESSAGE_HITS(MESSAGE_HASH_KEY, ALERT_ID ASC);
      end;
      @go@
]
[oracle
    DECLARE
        cnt INTEGER;
    BEGIN
        SELECT COUNT(*) INTO cnt FROM user_indexes WHERE index_name = 'WLF_MESSAGE_HITS_HASH_KEY_IDX';
        IF cnt > 0 THEN
            EXECUTE IMMEDIATE 'DROP INDEX WLF_MESSAGE_HITS_HASH_KEY_IDX';
        END IF;
        EXECUTE IMMEDIATE 'CREATE INDEX WLF_MESSAGE_HITS_HASH_KEY_IDX ON @env:lm_schema_name@.WLF_MESSAGE_HITS (MESSAGE_HASH_KEY, ALERT_ID ASC)';
    END;
    @go@
]
}
version 10.1.0.28 add {
}
version 10.1.0.29 add {
}
version 10.1.0.30 add {
}
version 10.1.0.31 add {
}
version 10.1.0.32 add {
}
version 10.1.0.33 add {
}
version 10.1.0.34 add {
}
version 10.1.0.35 add {
}
version 10.1.0.36 add {
}
version 10.1.0.37 add {
}
version 10.1.0.38 add {
}
version 10.1.0.39 add {
    UPDATE @env:lm_schema_name@.WLF_LIST_ENTRIES
    SET ENTRY_CREATED_DATE = ENTRY_UPDATE_DATE
    WHERE @env:lm_schema_name@.WLF_LIST_ENTRIES.LIST_ID IN ('FACTIVA_PEP', 'FACTIVA_SAN', 'FACTIVA_RCA', 'FACTIVA_SAN_COUNTRIES')
    @go@
}
version 10.1.0.40 add {
}
version 10.1.0.41 add {
}
version 10.1.0.42 add {
}
version 10.1.0.43 add {
    UPDATE @env:lm_schema_name@.WLF_APP_THRESHOLDS set THRESH_VALUE = (4 - THRESH_VALUE + 1), THRESH_DESC = 'Maximum Critical Update Category Value' WHERE THRESH_ID = 'wlfCriticalUpdateThreshold' AND THRESH_VALUE != 0;
    @go@
}
version 10.1.0.44 add {
    UPDATE @env:lm_schema_name@.WLF_APP_THRESHOLDS set THRESH_DESC = 'Maximum Critical Update Category Value' WHERE THRESH_ID = 'wlfCriticalUpdateThreshold';
    @go@
}
version 10.1.0.45 add {
[mssql
    IF EXISTS (SELECT *  FROM sys.indexes  WHERE name='entry_id_upper_idx')
    begin
        drop index WLF_LIST_IDS.entry_id_upper_idx;
    end;
    @go@
	ALTER TABLE @env:lm_schema_name@.WLF_LIST_IDS ALTER COLUMN ID_NUMBER @ustring@(450) NULL
    @go@
    create index entry_id_upper_idx on @env:lm_schema_name@.WLF_LIST_IDS(ID_NUMBER)
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
  	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID ALTER COLUMN ID_NUMBER @ustring@(450) NULL
  	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID_TEMP ALTER COLUMN ID_NUMBER @ustring@(450) NULL
  	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_IDS ALTER COLUMN ID_NUMBER @ustring@(450) NULL
  	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID ALTER COLUMN ID_NUMBER @ustring@(450) NULL
  	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID_TEMP ALTER COLUMN ID_NUMBER @ustring@(450) NULL
  	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_IDS ALTER COLUMN ID_NUMBER @ustring@(450) NULL
  	@go@
]
[oracle
    begin
    	execute immediate ('DROP INDEX entry_id_upper_idx');
    	exception
    	when others then
    	null;
    end;
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_LIST_IDS @modify@ ID_NUMBER @ustring@(450)
    @go@
    create index entry_id_upper_idx on @env:lm_schema_name@.WLF_LIST_IDS(upper(ID_NUMBER))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@
  	ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID @modify@ ID_NUMBER @ustring@(450)
  	@go@
  	begin
        	execute immediate ('DROP INDEX tmp_id_upper_idx');
        	exception
        	when others then
        	null;
        end;
        @go@
	ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_IDS @modify@ ID_NUMBER @ustring@(450)
  	@go@
  	CREATE INDEX tmp_id_upper_idx ON @env:lm_schema_name@.WLF_TMP_LIST_IDS(upper(ID_NUMBER))
  	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_RL_ID @modify@ ID_NUMBER @ustring@(450)
  	@go@
	ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_IDS @modify@ ID_NUMBER @ustring@(450)
  	@go@
]
}
version 10.1.0.46 add {
}
version 10.1.0.47 add {
}
version 10.1.0.48 add {
    CREATE TABLE @env:lm_schema_name@.WLX_LIST_UPDATING_INSTANCE (
        INSTANCE_ID @ustring@(50) NOT NULL,
        INSTANCE_CREATION_DATE @datetime@ NULL,
        LIST_SYNC_STATUS @ustring@(20) NULL,
        SUBLIST_STATUS @ustring@(20) NULL,
        LIST_SYNC_START_TIME @datetime@ NULL,
        LIST_SYNC_END_TIME @datetime@ NULL,
        LAST_UPDATE_DATE_TIME @datetime@ NULL,
        LIST_LAST_UPDATE_DATE_TIME @datetime@ NULL
    )
    @go@

    ALTER TABLE @env:lm_schema_name@.WLX_LIST_UPDATING_INSTANCE ADD CONSTRAINT WLX_INSTANCE_ID_PK PRIMARY KEY @nonclustered@ ( INSTANCE_ID)
    @go@
}
version 10.1.0.49 add {
}
version 10.1.0.50 add {
}
version 10.1.0.51 add {
}
version 10.1.0.52 add {
}
version 10.1.0.53 add {
[mssql
    /* RL and SRCH LOG table maintenance */

	if exists (select * from sysobjects where name = 'WLF_SRCHLOG_RL_MAINT')
		drop procedure @env:lm_schema_name@.WLF_SRCHLOG_RL_MAINT
	@go@

	CREATE PROCEDURE @env:lm_schema_name@.WLF_SRCHLOG_RL_MAINT
	@SRCH_LOG_DATE varchar(8)
	AS
	BEGIN

      BEGIN TRY
         DECLARE
            @JOB_ID varchar(30),
            @SRCHLOG_DT varchar(8),
            @EXEC_STR varchar(1000),
            @var1 varchar(30),
			@var int,
			@v_count int

	SET NOCOUNT ON;

	BEGIN
		DECLARE SRCH_LOG_CURSOR CURSOR LOCAL FOR
		select  distinct JOB_ID
		from @env:lm_schema_name@.WLF_SRCH_LOG where JOB_TIMESTAMP < CAST(@SRCH_LOG_DATE as datetime) ;

		/* JOBS_LOG_CURSOR cleans up partitions older than input date in WLF_RL* tables which are not referenced by WLF_SRCH_LOG or WLF_MESSAGE_SEARCH_LOG */
        		DECLARE JOBS_LOG_CURSOR CURSOR LOCAL FOR
        		WITH q2 AS (
        					SELECT max(cast(Substring(JOB_ID, CHARINDEX('-',JOB_ID)+1,LEN(JOB_ID)-CHARINDEX('-',JOB_ID)) as numeric)) as max_val,
        						   Substring(max(JOB_ID), 1, CHARINDEX('-',max(JOB_ID))) as instance_val
        					FROM @env:lm_schema_name@.WLF_JOBS_LOG
        					WHERE JOB_TIMESTAMP < CAST(@SRCH_LOG_DATE as datetime)
        					)
        		SELECT q1.job_id
        		FROM
        			(
        			SELECT cast(Substring(cast(value as varchar), CHARINDEX('-',cast(value as varchar))+1,CHARINDEX('Z',cast(value as varchar))-CHARINDEX('-',cast(value as varchar))-1) as numeric) as val,
        			Substring(cast(value as varchar), 1, CHARINDEX('-',cast(value as varchar))) as inst_val,
        			value,
        			Substring(cast(value as varchar), 1, CHARINDEX('Z',cast(value as varchar))-1) as job_id
        			FROM sys.partition_range_values WHERE function_id=(SELECT function_id FROM sys.partition_functions WHERE name='rl_partfunc')
        			) as q1, q2
        		WHERE
        			q1.val <= q2.max_val
        		ORDER BY 1

		DECLARE SRCHLOG_DT_CURSOR CURSOR LOCAL STATIC FOR
		SELECT  CONVERT(VARCHAR(8),(sprv.value), 112) AS Value
            FROM sys.partition_functions AS spf INNER JOIN sys.partition_range_values sprv ON sprv.function_id=spf.function_id
            WHERE (spf.name=N'srch_log_partfunc') and sprv.value < DATEADD(MM,1,CAST(@SRCH_LOG_DATE AS datetime))
            order by value desc;

	OPEN SRCH_LOG_CURSOR
	FETCH NEXT FROM SRCH_LOG_CURSOR
	INTO @JOB_ID


	WHILE @@FETCH_STATUS = 0
		BEGIN

			SELECT @var1 = @JOB_ID + 'Z';

			SELECT  @var = COUNT(*)
            FROM sys.partition_functions AS spf INNER JOIN sys.partition_range_values sprv ON sprv.function_id=spf.function_id
            WHERE (spf.name=N'rl_partfunc') and sprv.value = @var1;

			if @var = 1

			BEGIN

			SET @EXEC_STR =
                        'EXECUTE @env:lm_schema_name@.WLF_RL_DROP_PARTITION N'''+@JOB_ID+''';'

                     EXECUTE (@EXEC_STR)
            END

			FETCH NEXT FROM SRCH_LOG_CURSOR
			INTO @JOB_ID

		END

	CLOSE SRCH_LOG_CURSOR;
	DEALLOCATE SRCH_LOG_CURSOR;

	OPEN JOBS_LOG_CURSOR
    	FETCH NEXT FROM JOBS_LOG_CURSOR
    	INTO @JOB_ID


    	WHILE @@FETCH_STATUS = 0
    			BEGIN

    			SELECT @v_count = (
    				(SELECT COUNT(JOB_ID) FROM WLF_SRCH_LOG WHERE JOB_ID = @JOB_ID)
    						+
    				(SELECT COUNT(JOB_ID) FROM WLF_MESSAGE_SEARCH_LOG WHERE JOB_ID = @JOB_ID)
    			)

    			if @v_count = 0
    				BEGIN

    					SELECT @var1 = @JOB_ID + 'Z';

    					SELECT  @var = COUNT(1)
    					FROM sys.partition_functions AS spf INNER JOIN sys.partition_range_values sprv ON sprv.function_id=spf.function_id
    					WHERE (spf.name=N'rl_partfunc') and sprv.value = @var1;

    					if @var = 1

    					BEGIN

    					SET @EXEC_STR =
    								'EXECUTE @env:lm_schema_name@.WLF_RL_DROP_PARTITION N'''+@JOB_ID+''';'

    							EXECUTE (@EXEC_STR)
    					END

    				END

    				FETCH NEXT FROM JOBS_LOG_CURSOR
    				INTO @JOB_ID

    			END

    	CLOSE JOBS_LOG_CURSOR;
    	DEALLOCATE JOBS_LOG_CURSOR;

    OPEN SRCHLOG_DT_CURSOR
	FETCH NEXT FROM SRCHLOG_DT_CURSOR
	INTO @SRCHLOG_DT


	WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @SRCHLOG_DT <>'19800101'
			BEGIN
				SET @EXEC_STR = 'EXECUTE @env:lm_schema_name@.WLF_SRCHLOG_DROP_PARTITION N'''+@SRCHLOG_DT+''';'

				EXECUTE (@EXEC_STR)
			END

			FETCH NEXT FROM SRCHLOG_DT_CURSOR
			INTO @SRCHLOG_DT

		END

	CLOSE SRCHLOG_DT_CURSOR;
	DEALLOCATE SRCHLOG_DT_CURSOR;
	END

      END TRY

      BEGIN CATCH

         SELECT
		 ERROR_NUMBER() AS ErrorNumber
		,ERROR_SEVERITY() AS ErrorSeverity
		,ERROR_STATE() AS ErrorState
		,ERROR_PROCEDURE() AS ErrorProcedure
		,ERROR_LINE() AS ErrorLine
		,ERROR_MESSAGE() AS ErrorMessage;
		THROW
      END CATCH

	END
	@go@
]
}
version 10.1.0.54 add {
}
version 10.1.0.55 add {
}
version 10.1.0.56 add {
}
version 10.1.0.57 add {
}
version 10.1.0.58 add {
}
version 10.1.0.59 add {
}
version 10.1.0.60 add {
}
version 10.1.0.61 add {
}
version 10.1.0.62 add {
}
version 10.1.0.63 add {
}
version 10.1.0.64 add{
    INSERT INTO @env:lm_schema_name@.WLF_PLUGIN_SETTINGS (SETTING_ID,VALUE,TAB,DESCRIPTION) VALUES
	 ('SSB_GENERATE_OUTPUT_FILE',0,'Self Service Batch','Generate Output file By Default')
	  @go@

	INSERT INTO @env:lm_schema_name@.WLF_PLUGIN_SETTINGS (SETTING_ID,VALUE,TAB,DESCRIPTION) VALUES
	 ('SSB_GENERATE_ALERTS',0,'Self Service Batch','Generate Alerts By Default')
      @go@

}
version 10.1.0.65 add {
}
version 10.1.0.66 add {
    ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES ADD IS_INACTIVE @tinyint@
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ADD IS_INACTIVE @tinyint@
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ADD IS_INACTIVE @tinyint@
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES ADD IS_INACTIVE @tinyint@
    @go@
[mssql
    ALTER TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES ADD IS_INACTIVE @tinyint@
    @go@
]
}
version 10.1.0.67 add {
[oracle

    DECLARE
        i INTEGER;
    BEGIN
        SELECT COUNT(*) INTO i FROM user_indexes WHERE index_name = 'WLF_LATEST_LIST_DELETED_IDX';
        IF i > 0 THEN
            EXECUTE IMMEDIATE 'DROP INDEX WLF_LATEST_LIST_DELETED_IDX';
        END IF;
        EXECUTE IMMEDIATE 'CREATE INDEX WLF_LATEST_LIST_DELETED_IDX ON @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES(LIST_ID_PART, IS_DELETED) @storage_index_insert_update @env:tablespace_index@ default@ LOCAL';
    END;

    @go@
]
}
version 10.1.0.68 add {
[mssql
    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE
	ALTER COLUMN MESSAGE_REF_NUMBER @ustring@(255) NULL
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_TEMP
    ALTER COLUMN MESSAGE_REF_NUMBER @ustring@(255) NULL
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT
    ALTER COLUMN MESSAGE_REF_NUMBER @ustring@(255) NULL
    @go@
]
}
version 10.1.0.69 add {
}
version 10.1.0.70 add {
}
version 10.1.0.71 add {

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME='WLX_SKIPPED_PREDICTIVE_SCORE';
        if n = 0 THEN
        EXECUTE IMMEDIATE'
]
[mssql
        if not exists (select * from dbo.sysobjects where id = object_id('WLX_SKIPPED_PREDICTIVE_SCORE') and type='U')
        begin
        exec ('
]
    CREATE TABLE @env:lm_schema_name@.WLX_SKIPPED_PREDICTIVE_SCORE (
       ALERT_ID             @ustring@(50)   NOT NULL,
       JOB_ID               @ustring@(50)   NOT NULL,
       JOB_TYPE             @ustring@(100)  NOT NULL,
       ALERT_TYPE           @ustring@(100)  NOT NULL,
       QUEUE_ITEM_CONTEXT   @clob@	        NOT NULL,
       SKIPPED_REASON       @ustring@(1000) NOT NULL,
       CREATED_DATE_TIME    @datetime@ 	    NOT NULL,
       RETRY_COUNT          @int@           NOT NULL,
       RETRY_DATE_TIME      @datetime@ 	    NULL
    )
     @storage_params_insert_only @env:tablespace_default@ default@
[oracle
        ';
        END IF;
        END;
]
[mssql
        ')
        end
]
    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO j FROM USER_CONSTRAINTS WHERE
        TABLE_NAME = 'WLX_SKIPPED_PREDICTIVE_SCORE' AND CONSTRAINT_NAME = 'PK_WLX_SKIPPED_PREDICTIVE_SCORE' ;
        IF j = 0 THEN
        EXECUTE IMMEDIATE '
]
[mssql
       if not exists (select * from sysconstraints c, sysobjects o1, sysobjects o2
       where c.id = o1.id and c.constid = o2.id and
       o1.name = 'WLX_SKIPPED_PREDICTIVE_SCORE' and
       o2.name = 'PK_WLX_SKIPPED_PREDICTIVE_SCORE')
       begin
       EXEC ('
]
    ALTER TABLE @env:lm_schema_name@.WLX_SKIPPED_PREDICTIVE_SCORE add
    		CONSTRAINT PK_WLX_SKIPPED_PREDICTIVE_SCORE PRIMARY KEY
    		(
    			ALERT_ID
    		)

    @storage_primary_insert_only @env:tablespace_index@ default@
[oracle
        ';
         END IF;
          END;
]
[mssql
        ')
        end
]

    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME='WLX_PS_SKIPPED_QUEUE_AUDIT';
        if n = 0 THEN
        EXECUTE IMMEDIATE'
]
[mssql
        if not exists (select * from dbo.sysobjects where id = object_id('WLX_PS_SKIPPED_QUEUE_AUDIT') and type='U')
        begin
        exec ('
]
    CREATE TABLE @env:lm_schema_name@.WLX_PS_SKIPPED_QUEUE_AUDIT (
        AUDIT_ID                @ustring@(50)   NOT NULL,
        ALERT_ID                @ustring@(50)   NOT NULL,
        HIT_ID                  @ustring@(100)  NOT NULL,
        JOB_ID                  @ustring@(50)   NOT NULL,
        JOB_TYPE                @ustring@(100)  NOT NULL,
        ALERT_TYPE              @ustring@(100)  NOT NULL,
        ORIGINAL_CREATED_TIME   @datetime@ 	    NOT NULL,
        SKIPPED_REASON          @clob@	        NOT NULL,
        RETRY_COUNT             @tinyint@	    NOT NULL,
        STATUS                  @ustring@(25)   NOT NULL,
        CREATED_DATE_TIME       @datetime@ 	    NOT NULL,
        UPDATED_DATE_TIME       @datetime@ 	    NOT NULL,
        BATCH_JOB_ID            @ustring@(50)   NOT NULL
    )
    @storage_params_insert_only @env:tablespace_default@ default@
[oracle
        ';
        END IF;
        END;
]
[mssql
        ')
        end
]


    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO j FROM USER_CONSTRAINTS WHERE
        TABLE_NAME = 'WLX_PS_SKIPPED_QUEUE_AUDIT' AND CONSTRAINT_NAME = 'PK_WLX_PS_SKIPPED_QUEUE_AUDIT' ;
        IF j = 0 THEN
        EXECUTE IMMEDIATE '
]
[mssql
       if not exists (select * from sysconstraints c, sysobjects o1, sysobjects o2
       where c.id = o1.id and c.constid = o2.id and
       o1.name = 'WLX_PS_SKIPPED_QUEUE_AUDIT' and
       o2.name = 'PK_WLX_PS_SKIPPED_QUEUE_AUDIT')
       begin
       EXEC ('
]
    ALTER TABLE @env:lm_schema_name@.WLX_PS_SKIPPED_QUEUE_AUDIT add
        		CONSTRAINT PK_WLX_PS_SKIPPED_QUEUE_AUDIT PRIMARY KEY
        		(
        			AUDIT_ID
        		)

    @storage_primary_insert_only @env:tablespace_index@ default@
[oracle
        ';
         END IF;
          END;
]
[mssql
        ')
        end
]
	@go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME='WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE';
        if n = 0 THEN
        EXECUTE IMMEDIATE'
]
[mssql
        if not exists (select * from dbo.sysobjects where id = object_id('WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE') and type='U')
        begin
        exec ('
]
    CREATE TABLE @env:lm_schema_name@.WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE (
        ALERT_ID                @ustring@(50)   NOT NULL,
        JOB_ID                  @ustring@(50)   NOT NULL,
        JOB_TYPE                @ustring@(100)  NOT NULL,
        ALERT_TYPE              @ustring@(100)  NOT NULL,
        QUEUE_ITEM_CONTEXT      @clob@	        NOT NULL,
        SKIPPED_REASON          @clob@	        NOT NULL,
        CREATED_DATE_TIME       @datetime@ 	    NOT NULL,
        RETRY_COUNT             @tinyint@	    NOT NULL,
        RETRY_DATE_TIME      @datetime@ 	    NOT NULL
    )
    @storage_params_insert_only @env:tablespace_default@ default@
[oracle
         ';
         END IF;
         END;
]
[mssql
         ')
         end
]
    @go@

[oracle
         DECLARE
         n NUMBER(2);
         j NUMBER(2);
         BEGIN
         SELECT COUNT(*) INTO j FROM USER_CONSTRAINTS WHERE
         TABLE_NAME = 'WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE' AND CONSTRAINT_NAME = 'PK_WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE' ;
         IF j = 0 THEN
         EXECUTE IMMEDIATE '
]
[mssql
        if not exists (select * from sysconstraints c, sysobjects o1, sysobjects o2
        where c.id = o1.id and c.constid = o2.id and
        o1.name = 'WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE' and
        o2.name = 'PK_WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE')
        begin
        EXEC ('
]
    ALTER TABLE @env:lm_schema_name@.WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE add
            		CONSTRAINT PK_WLX_SKIPPED_PREDICTIVE_SCORE_ARCHIVE PRIMARY KEY
            		(
            			ALERT_ID
            		)

    @storage_primary_insert_only @env:tablespace_index@ default@
[oracle
         ';
          END IF;
           END;
]
[mssql
         ')
         end
]
    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME='WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES';
        if n = 0 THEN
        EXECUTE IMMEDIATE'
]
[mssql
        if not exists (select * from dbo.sysobjects where id = object_id('WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES') and type='U')
        begin
        exec ('
]
    CREATE TABLE @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES (
        LIST_ID @ustring@(50) NOT NULL,
    	ENTITY_KEY @ustring@(250),
    	EVIDENCE_LOWER_VALUE @number@(4, 2),
        EVIDENCE_UPPER_VALUE @number@(4, 2),
    	EXPIRATION_DATE @datetime@,
    	COMMENTS @ustring@(4000),
    	VALUE @ustring@(150)
    )
    @storage_params_insert_only @env:tablespace_default@ default@
[oracle
        ';
        END IF;
        END;
]
[mssql
        ')
        end
]
    @go@

    insert into @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES (LIST_ID, ENTITY_KEY, EVIDENCE_LOWER_VALUE,EVIDENCE_UPPER_VALUE,EXPIRATION_DATE, COMMENTS, VALUE) SELECT N'PSE_SUPPORTING_DISPLAY_VALUES', N'1',0.00,3.00, NULL, N'+', N'N/A'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES WHERE LIST_ID = 'PSE_SUPPORTING_DISPLAY_VALUES' AND ENTITY_KEY = '1')
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES (LIST_ID, ENTITY_KEY, EVIDENCE_LOWER_VALUE,EVIDENCE_UPPER_VALUE,EXPIRATION_DATE, COMMENTS, VALUE) SELECT N'PSE_SUPPORTING_DISPLAY_VALUES', N'2', 3.01,6.00,NULL, N'++', N'N/A'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES WHERE LIST_ID = 'PSE_SUPPORTING_DISPLAY_VALUES' AND ENTITY_KEY = '2');
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES (LIST_ID, ENTITY_KEY, EVIDENCE_LOWER_VALUE,EVIDENCE_UPPER_VALUE,EXPIRATION_DATE, COMMENTS, VALUE) SELECT N'PSE_SUPPORTING_DISPLAY_VALUES', N'3',6.01,10.00 , NULL, N'+++', N'N/A'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES WHERE LIST_ID = 'PSE_SUPPORTING_DISPLAY_VALUES' AND ENTITY_KEY = '3');
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES (LIST_ID, ENTITY_KEY, EVIDENCE_LOWER_VALUE,EVIDENCE_UPPER_VALUE,EXPIRATION_DATE, COMMENTS, VALUE) SELECT N'PSE_CONTRADICTING_DISPLAY_VALUES', N'1',0.00,-3.00 , NULL, N'-', N'N/A'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES WHERE LIST_ID = 'PSE_CONTRADICTING_DISPLAY_VALUES' AND ENTITY_KEY = '1');
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES (LIST_ID, ENTITY_KEY, EVIDENCE_LOWER_VALUE,EVIDENCE_UPPER_VALUE,EXPIRATION_DATE, COMMENTS, VALUE) SELECT N'PSE_CONTRADICTING_DISPLAY_VALUES', N'2',-3.01,-6.00,NULL, N'--', N'N/A'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES WHERE LIST_ID = 'PSE_CONTRADICTING_DISPLAY_VALUES' AND ENTITY_KEY = '2');
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES (LIST_ID, ENTITY_KEY, EVIDENCE_LOWER_VALUE,EVIDENCE_UPPER_VALUE,EXPIRATION_DATE, COMMENTS, VALUE) SELECT N'PSE_CONTRADICTING_DISPLAY_VALUES', N'3', -6.01,-10.00,NULL, N'---', N'N/A'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_EVIDENCE_DISPLAY_VALUES WHERE LIST_ID = 'PSE_CONTRADICTING_DISPLAY_VALUES' AND ENTITY_KEY = '3');
    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME='WLX_PRED_SCORE_CONFIG';
        if n = 0 THEN
        EXECUTE IMMEDIATE'
]
[mssql
        if not exists (select * from dbo.sysobjects where id = object_id('WLX_PRED_SCORE_CONFIG') and type='U')
        begin
        exec ('
]
    CREATE TABLE @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG (
        SETTING_NAME @ustring@(50) NOT NULL,
        SETTING_VALUE @ustring@(50) NOT NULL
    )
    @storage_params_insert_only @env:tablespace_default@ default@
[oracle
        ';
        END IF;
        END;
]
[mssql
        ')
        end
]

    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG (SETTING_NAME, SETTING_VALUE) SELECT 'Predictive Scoring', '0'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG WHERE SETTING_NAME = 'Predictive Scoring')
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG (SETTING_NAME, SETTING_VALUE) SELECT 'Hibernation threshold for predictive scoring', '30'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG WHERE SETTING_NAME = 'Hibernation threshold for predictive scoring')
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG (SETTING_NAME, SETTING_VALUE) SELECT 'Escalation threshold for predictive scoring', '60'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG WHERE SETTING_NAME = 'Escalation threshold for predictive scoring')
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG (SETTING_NAME, SETTING_VALUE) SELECT 'Maximum Number of Explanations to Display', '4'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG WHERE SETTING_NAME = 'Maximum Number of Explanations to Display')
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG (SETTING_NAME, SETTING_VALUE) SELECT 'Fail the Process when Predictive Score calc fail', '0'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG WHERE SETTING_NAME = 'Fail the Process when Predictive Score calc fail')
    @go@
    insert into @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG (SETTING_NAME, SETTING_VALUE) SELECT 'Max allowed errors', '3'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLX_PRED_SCORE_CONFIG WHERE SETTING_NAME = 'Max allowed errors')
    @go@
[mssql
    IF EXISTS(SELECT v.name FROM sys.views v WHERE v.name = 'V_WLX_PRED_SCORE_CONFIG')
    BEGIN
        EXEC('DROP VIEW @env:lm_schema_name@.V_WLX_PRED_SCORE_CONFIG');
    END;
    @go@
    CREATE VIEW @env:lm_schema_name@.V_WLX_PRED_SCORE_CONFIG AS
    SELECT
     1 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_predictiveScoringEnabled&'
       + 'task=runSQL'
       + '">Enable/ Disable Predictive Scoring</a>'  AS SETTING_LINK
    UNION
    SELECT
     2 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_predictiveScoringThresholds&'
       + 'task=runSQL'
       + '">Predictive Scoring Thresholds</a>'  AS SETTING_LINK
    UNION
    SELECT
     3 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_PS_Supporting_Evidence_Display_Values&'
       + 'task=runSQL'
       + '">Predictive Scoring Supporting Evidence Display Values</a>'  AS SETTING_LINK
    UNION
    SELECT
     4 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_PS_Contradicting_Evidence_Display_Values&'
       + 'task=runSQL'
       + '">Predictive Scoring Contradicting Evidence Display Values</a>'  AS SETTING_LINK
    UNION
    SELECT
     5 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_maxNumberOfExplanations&'
        + 'task=runSQL'
        + '">Maximum Number of Explanations to Display</a>'  AS SETTING_LINK
    UNION
    SELECT
     6 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_failBatchProcessOnPredictiveScoreFailure&'
        + 'task=runSQL'
        + '">Fail the Batch Process On Predictive Score Failure</a>'  AS SETTING_LINK
    UNION
    SELECT
     7 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_predictiveScoreFailureThreshold&'
        + 'task=runSQL'
        + '">Maximum Number of Failures Allowed On Predictive Score</a>'  AS SETTING_LINK
    @go@
]
[oracle
    CREATE OR REPLACE VIEW @env:lm_schema_name@.V_WLX_PRED_SCORE_CONFIG AS
    SELECT
     1 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_predictiveScoringEnabled&'
       || 'task=runSQL'
       || '">Enable/ Disable Predictive Scoring</a>'  AS SETTING_LINK
    FROM DUAL
    UNION
    SELECT
     2 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_predictiveScoringThresholds&'
       || 'task=runSQL'
       || '">Predictive Scoring Thresholds</a>'  AS SETTING_LINK
    FROM DUAL
    UNION
    SELECT
     3 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_PS_Supporting_Evidence_Display_Values&'
       || 'task=runSQL'
       || '">Predictive Scoring Supporting Evidence Display Values</a>'  AS SETTING_LINK
    FROM DUAL
    UNION
    SELECT
     4 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_PS_Contradicting_Evidence_Display_Values&'
       || 'task=runSQL'
       || '">Predictive Scoring Contradicting Evidence Display Values</a>'  AS SETTING_LINK
    FROM DUAL
    UNION
    SELECT
     5 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_maxNumberOfExplanations&'
        || 'task=runSQL'
        || '">Maximum Number of Explanations to Display</a>'  AS SETTING_LINK
    FROM DUAL
    UNION
    SELECT
     6 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_failBatchProcessOnPredictiveScoreFailure&'
        || 'task=runSQL'
        || '">Fail the Batch Process On Predictive Score Failure</a>'  AS SETTING_LINK
    FROM DUAL
    UNION
    SELECT
     7 AS SORT_ORDER,
     '<a href="display.settings.act.go?thresholdId=AML_WLX_predictiveScoreFailureThreshold&'
        || 'task=runSQL'
        || '">Maximum Number of Failures Allowed On Predictive Score</a>'  AS SETTING_LINK
    FROM DUAL
    @go@
]

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME='WLF_RISK_CATEGORY_CONFIG';
        if n = 0 THEN
        EXECUTE IMMEDIATE'
]
[mssql
        if not exists (select * from dbo.sysobjects where id = object_id('WLF_RISK_CATEGORY_CONFIG') and type='U')
        begin
        exec ('
]
    CREATE TABLE @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG(
	CATEGORY_CODE @ustring@(50) NOT NULL,
	CATEGORY_NAME @ustring@(255)  NULL,
	IS_CUSTOM @tinyint@ 	DEFAULT 1 NOT NULL)
[oracle
        ';
        END IF;
        END;
]
[mssql
        ')
        end
]
    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO j FROM USER_CONSTRAINTS WHERE
        TABLE_NAME = 'WLF_RISK_CATEGORY_CONFIG' AND CONSTRAINT_NAME = 'PK_WLF_RISK_CATEGORY_CONFIG' ;
        IF j = 0 THEN
        EXECUTE IMMEDIATE '
]
[mssql
       if not exists (select * from sysconstraints c, sysobjects o1, sysobjects o2
       where c.id = o1.id and c.constid = o2.id and
       o1.name = 'WLF_RISK_CATEGORY_CONFIG' and
       o2.name = 'PK_WLF_RISK_CATEGORY_CONFIG')
       begin
       EXEC ('
]
    ALTER TABLE @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG
	ADD	CONSTRAINT PK_WLF_RISK_CATEGORY_CONFIG PRIMARY KEY
    (
	    CATEGORY_CODE
    )
[oracle
        ';
         END IF;
          END;
]
[mssql
        ')
        end
]
    @go@

    INSERT INTO @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG(CATEGORY_CODE,CATEGORY_NAME,IS_CUSTOM) SELECT 'PEP','PEP','0'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG WHERE CATEGORY_CODE = 'PEP' AND CATEGORY_NAME = 'PEP')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG(CATEGORY_CODE,CATEGORY_NAME,IS_CUSTOM) SELECT 'SANC','SANCTIONS','0'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG WHERE CATEGORY_CODE = 'SANC' AND CATEGORY_NAME = 'SANCTIONS')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG(CATEGORY_CODE,CATEGORY_NAME,IS_CUSTOM) SELECT 'RCA','RCA','0'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG WHERE CATEGORY_CODE = 'RCA' AND CATEGORY_NAME = 'RCA')
    @go@
    INSERT INTO @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG(CATEGORY_CODE,CATEGORY_NAME,IS_CUSTOM) SELECT 'ANM','Adverse News Media','0'
[oracle
    FROM DUAL
]
    WHERE NOT EXISTS ( SELECT 1 FROM @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG WHERE CATEGORY_CODE = 'ANM' AND CATEGORY_NAME = 'Adverse News Media')
    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME='WLF_SRCHDEF_RISK_CATEGORIES';
        if n = 0 THEN
        EXECUTE IMMEDIATE'
]
[mssql
        if not exists (select * from dbo.sysobjects where id = object_id('WLF_SRCHDEF_RISK_CATEGORIES') and type='U')
        begin
        exec ('
]
    CREATE TABLE @env:lm_schema_name@.WLF_SRCHDEF_RISK_CATEGORIES (
    	SRCHDEF_ID 			@ustring@(255) 			NOT NULL,
    	CATEGORY_CODE 		@ustring@(50) 			NOT NULL
    )
[oracle
        ';
        END IF;
        END;
]
[mssql
        ')
        end
]
    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        SELECT COUNT(*) INTO j FROM USER_CONSTRAINTS WHERE
        TABLE_NAME = 'WLF_SRCHDEF_RISK_CATEGORIES' AND CONSTRAINT_NAME = 'PK_WLF_SRCHDEF_CATEGORIES' ;
        IF j = 0 THEN
        EXECUTE IMMEDIATE '
]
[mssql
       if not exists (select * from sysconstraints c, sysobjects o1, sysobjects o2
       where c.id = o1.id and c.constid = o2.id and
       o1.name = 'WLF_SRCHDEF_RISK_CATEGORIES' and
       o2.name = 'PK_WLF_SRCHDEF_CATEGORIES')
       begin
       EXEC ('
]
    ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_RISK_CATEGORIES add
    CONSTRAINT PK_WLF_SRCHDEF_CATEGORIES PRIMARY KEY
    (
    		SRCHDEF_ID,
    		CATEGORY_CODE
    )
[oracle
        ';
         END IF;
          END;
]
[mssql
        ')
        end
]
    @go@

[oracle
        DECLARE
        n NUMBER(2);
        j NUMBER(2);
        BEGIN
        select count(*) into j from USER_TAB_COLUMNS where TABLE_NAME='WLF_SUMMARY_LOG' and COLUMN_NAME='RISK_CATEGORY_IDS' ;
        IF j = 0 THEN
        EXECUTE IMMEDIATE '
]
[mssql
        IF NOT EXISTS (SELECT * FROM syscolumns WHERE id=object_id('WLF_SUMMARY_LOG') AND name = 'RISK_CATEGORY_IDS')
        BEGIN
        EXEC ('
]
    ALTER TABLE @env:lm_schema_name@.WLF_SUMMARY_LOG  ADD RISK_CATEGORY_IDS @ustring@(4000)
[oracle
        ';
        END IF;
        END;
]
[mssql
        ')
          END
]
    @go@
[mssql
        if not exists (select * from dbo.sysobjects where id = object_id('WLF_RISK_CATEGORY_CONFIG_DELETE') and type='TR')
                begin
                exec ('
]
        CREATE
[oracle
        OR REPLACE
]
        		 TRIGGER @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG_DELETE
[mssql
        ON
]
[oracle
        BEFORE DELETE ON
]
    @env:lm_schema_name@.WLF_RISK_CATEGORY_CONFIG
[mssql
        AFTER DELETE
        AS
]
[oracle
        FOR EACH ROW
]
        BEGIN
        DELETE FROM @env:lm_schema_name@.WLF_SRCHDEF_RISK_CATEGORIES WHERE
[mssql
          CATEGORY_CODE  IN (SELECT CATEGORY_CODE FROM DELETED)
        END
        ')
        END
]
[oracle
        CATEGORY_CODE=:OLD.CATEGORY_CODE;
        END;
]

 @go@

}
version 10.1.0.72 add {
[mssql

    if exists (select * from sysobjects where name = 'WLF_RL_MS_CREATE_PARTITION')
        drop procedure @env:lm_schema_name@.WLF_RL_MS_CREATE_PARTITION
    @go@

    CREATE PROCEDURE @env:lm_schema_name@.WLF_RL_MS_CREATE_PARTITION
    @JOB_ID @ustring@(50)
    AS
    BEGIN
        BEGIN TRY
            DECLARE
                @var1 int,
                @P_PART_NAME varchar(30),
                @EXEC_STR varchar(1000)

            SET @P_PART_NAME = @JOB_ID + 'Z';
            BEGIN

                SELECT  @var1 = COUNT(*)
                FROM sys.partition_functions AS spf INNER JOIN sys.partition_range_values sprv ON sprv.function_id=spf.function_id
                WHERE (spf.name=N'rl_ms_partfunc') and  sprv.value = @P_PART_NAME;

                IF @var1 <> 1
                BEGIN
                    ALTER PARTITION SCHEME rl_ms_partscheme NEXT USED [PRIMARY];

                    SET @EXEC_STR =
                        'alter partition function rl_ms_partfunc()
                        SPLIT RANGE (''' + @P_PART_NAME + ''');'
                    BEGIN TRY
                        EXECUTE (@EXEC_STR)
                    END TRY

                    BEGIN CATCH
                        ALTER PARTITION SCHEME rl_ms_partscheme NEXT USED [PRIMARY];
                        EXECUTE (@EXEC_STR)
                    END CATCH
                END
            END
        END TRY

        BEGIN CATCH

            SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_SEVERITY() AS ErrorSeverity,
            ERROR_STATE() AS ErrorState,
            ERROR_PROCEDURE() AS ErrorProcedure,
            ERROR_LINE() AS ErrorLine,
            ERROR_MESSAGE() AS ErrorMessage;
            IF @@TRANCOUNT > 0
                ROLLBACK TRANSACTION;
            RETURN 1;

        END CATCH
    END
    @go@

    if exists (select * from sysobjects where name = 'WLF_RL_CREATE_PARTITION')
        drop procedure @env:lm_schema_name@.WLF_RL_CREATE_PARTITION
    @go@

    CREATE PROCEDURE @env:lm_schema_name@.WLF_RL_CREATE_PARTITION
    @JOB_ID @ustring@(50)
    AS
    BEGIN

        BEGIN TRY

            DECLARE
    		    @var1 int,
                @P_PART_NAME varchar(30),
    			@EXEC_STR varchar(1000)

    		SET @P_PART_NAME = @JOB_ID + 'Z';
            BEGIN

    			SELECT  @var1 = COUNT(*)
                FROM sys.partition_functions AS spf INNER JOIN sys.partition_range_values sprv ON sprv.function_id=spf.function_id
                WHERE (spf.name=N'rl_partfunc') and  sprv.value = @P_PART_NAME;

    			IF @var1 <> 1
    			BEGIN
    				ALTER PARTITION SCHEME rl_partscheme NEXT USED [PRIMARY];
    				SET @EXEC_STR =
    				    'alter partition function rl_partfunc()
    					SPLIT RANGE (''' + @P_PART_NAME + ''');'

                    BEGIN TRY
                        EXECUTE (@EXEC_STR)
                    END TRY
                    BEGIN CATCH
                        ALTER PARTITION SCHEME rl_partscheme NEXT USED [PRIMARY];
                        EXECUTE (@EXEC_STR)
                    END CATCH
    			END
            END
        END TRY

        BEGIN CATCH

            SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_SEVERITY() AS ErrorSeverity,
            ERROR_STATE() AS ErrorState,
            ERROR_PROCEDURE() AS ErrorProcedure,
            ERROR_LINE() AS ErrorLine,
            ERROR_MESSAGE() AS ErrorMessage;
            IF @@TRANCOUNT > 0
                ROLLBACK TRANSACTION;
            RETURN 1;

        END CATCH
    END
    @go@
]
}
version 10.1.0.73 add {
[oracle
    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE ADD MESSAGE_REF_NUMBER_1 varchar2(255)
    @go@
    UPDATE @env:lm_schema_name@.WLF_RL_MESSAGE SET MESSAGE_REF_NUMBER_1 = MESSAGE_REF_NUMBER
    @go@
    ALTER table @env:lm_schema_name@.WLF_RL_MESSAGE DROP COLUMN MESSAGE_REF_NUMBER
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE RENAME COLUMN MESSAGE_REF_NUMBER_1 TO MESSAGE_REF_NUMBER
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE @modify@ (
    MESSAGE_SOURCE_TYPE INVISIBLE,
    MESSAGE_TYPE_CD INVISIBLE,
    MESSAGE_DATE_TIME INVISIBLE,
    AMOUNT INVISIBLE,
    CURRENCY_CD INVISIBLE,
    PRODUCT_KEY INVISIBLE,
    MESSAGE_DIRECTION INVISIBLE,
    MESSAGE_INSTRUCTIONS INVISIBLE,
    ADDITIONAL_MESSAGE_TEXT INVISIBLE,
    MESSAGE_TEXT INVISIBLE,
    ORIGINATOR_NAME INVISIBLE,
    ORIGINATOR_PARTY_IDS INVISIBLE,
    ORIGINATOR_ADDRESS_LINE_1 INVISIBLE,
    ORIGINATOR_ADDRESS_LINE_2 INVISIBLE,
    ORIGINATOR_ADDRESS_LINE_3 INVISIBLE,
    ORIGINATOR_CITY INVISIBLE,
    ORIGINATOR_COUNTRY_CD INVISIBLE,
    ORIGINATOR_PARTY_TYPE_CD INVISIBLE,
    ORIGINATOR_PO_BOX INVISIBLE,
    ORIGINATOR_STATE_PROVINCE INVISIBLE,
    ORIGINATOR_ZIP_CD INVISIBLE,
    ORIGINATOR_ADDITIONAL_INFO INVISIBLE,
    ORIGINATING_FI_CD INVISIBLE,
    ORIGINATING_FI_COUNTRY_CD INVISIBLE,
    ORIGINATING_FI_ORG_NAME INVISIBLE,
    BENEFICIARY_PRIMARY_NAME INVISIBLE,
    BENEFICIARY_PARTY_IDS INVISIBLE,
    BENEFICIARY_ADDRESS_LINE_1 INVISIBLE,
    BENEFICIARY_ADDRESS_LINE_2 INVISIBLE,
    BENEFICIARY_ADDRESS_LINE_3 INVISIBLE,
    BENEFICIARY_PO_BOX INVISIBLE,
    BENEFICIARY_CITY INVISIBLE,
    BENEFICIARY_STATE_PROVINCE INVISIBLE,
    BENEFICIARY_ZIP_CD INVISIBLE,
    BENEFICIARY_COUNTRY_CD INVISIBLE,
    BENEFICIARY_ADDITIONAL_INFO INVISIBLE,
    BENEFICIARY_FI_ORG_NAME INVISIBLE,
    BENEFICIARY_FI_CD INVISIBLE,
    BENEFICIARY_FI_PARTY_TYPE_CD INVISIBLE,
    BENEFICIARY_FI_COUNTRY_CD INVISIBLE,
    RECEIVING_FI_ADDITIONAL_INFO INVISIBLE,
    RECEIVING_FI_CD INVISIBLE,
    RECEIVING_FI_COUNTRY_CD INVISIBLE,
    RECEIVING_FI_ORGANIZATION_NAME INVISIBLE,
    SENDING_FI_ADDITIONAL_INFO INVISIBLE,
    SENDING_FI_CD INVISIBLE,
    SENDING_FI_COUNTRY_CD INVISIBLE,
    SENDING_FI_ORGANIZATION_NAME INVISIBLE,
    FI_TO_FI_INFO INVISIBLE,
    CUSTOM_FIELD1 INVISIBLE,
    CUSTOM_FIELD2 INVISIBLE,
    CUSTOM_FIELD3 INVISIBLE,
    CUSTOM_FIELD4 INVISIBLE,
    CUSTOM_FIELD5 INVISIBLE,
    CUSTOM_FIELD6 INVISIBLE,
    CUSTOM_FIELD7 INVISIBLE,
    CUSTOM_FIELD8 INVISIBLE,
    CUSTOM_FIELD9 INVISIBLE,
    CUSTOM_FIELD10 INVISIBLE,
    CUSTOM_FIELD11 INVISIBLE,
    CUSTOM_FIELD12 INVISIBLE,
    CUSTOM_FIELD13 INVISIBLE,
    CUSTOM_FIELD14 INVISIBLE,
    CUSTOM_FIELD15 INVISIBLE,
    CUSTOM_FIELD16 INVISIBLE,
    CUSTOM_FIELD17 INVISIBLE,
    CUSTOM_FIELD18 INVISIBLE,
    CUSTOM_FIELD19 INVISIBLE,
    CUSTOM_FIELD20 INVISIBLE,
    CUSTOM_STRING_21 INVISIBLE,
    CUSTOM_STRING_22 INVISIBLE,
    CUSTOM_STRING_23 INVISIBLE,
    CUSTOM_STRING_24 INVISIBLE,
    CUSTOM_STRING_25 INVISIBLE,
    CUSTOM_STRING_26 INVISIBLE,
    CUSTOM_STRING_27 INVISIBLE,
    CUSTOM_STRING_28 INVISIBLE,
    CUSTOM_STRING_29 INVISIBLE,
    CUSTOM_STRING_30 INVISIBLE,
    CUSTOM_STRING_31 INVISIBLE,
    CUSTOM_STRING_32 INVISIBLE,
    CUSTOM_STRING_33 INVISIBLE,
    CUSTOM_STRING_34 INVISIBLE,
    CUSTOM_STRING_35 INVISIBLE,
    CUSTOM_STRING_36 INVISIBLE,
    CUSTOM_STRING_37 INVISIBLE,
    CUSTOM_STRING_38 INVISIBLE,
    CUSTOM_STRING_39 INVISIBLE,
    CUSTOM_STRING_40 INVISIBLE,
    CUSTOM_DATE_6 INVISIBLE,
    CUSTOM_DATE_7 INVISIBLE,
    CUSTOM_DATE_8 INVISIBLE,
    CUSTOM_DATE_9 INVISIBLE,
    CUSTOM_DATE_10 INVISIBLE,
    CUSTOM_DATE_11 INVISIBLE,
    CUSTOM_DATE_12 INVISIBLE,
    CUSTOM_DATE_13 INVISIBLE,
    CUSTOM_DATE_14 INVISIBLE,
    CUSTOM_DATE_15 INVISIBLE,
    CUSTOM_BOOLEAN_6 INVISIBLE,
    CUSTOM_BOOLEAN_7 INVISIBLE,
    CUSTOM_BOOLEAN_8 INVISIBLE,
    CUSTOM_BOOLEAN_9 INVISIBLE,
    CUSTOM_BOOLEAN_10 INVISIBLE,
    CUSTOM_NUMBER_1 INVISIBLE,
    CUSTOM_NUMBER_2 INVISIBLE,
    CUSTOM_NUMBER_3 INVISIBLE,
    CUSTOM_NUMBER_4 INVISIBLE,
    CUSTOM_NUMBER_5 INVISIBLE
    )
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE @modify@ (
    MESSAGE_SOURCE_TYPE VISIBLE,
    MESSAGE_TYPE_CD VISIBLE,
    MESSAGE_DATE_TIME VISIBLE,
    AMOUNT VISIBLE,
    CURRENCY_CD VISIBLE,
    PRODUCT_KEY VISIBLE,
    MESSAGE_DIRECTION VISIBLE,
    MESSAGE_INSTRUCTIONS VISIBLE,
    ADDITIONAL_MESSAGE_TEXT VISIBLE,
    MESSAGE_TEXT VISIBLE,
    ORIGINATOR_NAME VISIBLE,
    ORIGINATOR_PARTY_IDS VISIBLE,
    ORIGINATOR_ADDRESS_LINE_1 VISIBLE,
    ORIGINATOR_ADDRESS_LINE_2 VISIBLE,
    ORIGINATOR_ADDRESS_LINE_3 VISIBLE,
    ORIGINATOR_CITY VISIBLE,
    ORIGINATOR_COUNTRY_CD VISIBLE,
    ORIGINATOR_PARTY_TYPE_CD VISIBLE,
    ORIGINATOR_PO_BOX VISIBLE,
    ORIGINATOR_STATE_PROVINCE VISIBLE,
    ORIGINATOR_ZIP_CD VISIBLE,
    ORIGINATOR_ADDITIONAL_INFO VISIBLE,
    ORIGINATING_FI_CD VISIBLE,
    ORIGINATING_FI_COUNTRY_CD VISIBLE,
    ORIGINATING_FI_ORG_NAME VISIBLE,
    BENEFICIARY_PRIMARY_NAME VISIBLE,
    BENEFICIARY_PARTY_IDS VISIBLE,
    BENEFICIARY_ADDRESS_LINE_1 VISIBLE,
    BENEFICIARY_ADDRESS_LINE_2 VISIBLE,
    BENEFICIARY_ADDRESS_LINE_3 VISIBLE,
    BENEFICIARY_PO_BOX VISIBLE,
    BENEFICIARY_CITY VISIBLE,
    BENEFICIARY_STATE_PROVINCE VISIBLE,
    BENEFICIARY_ZIP_CD VISIBLE,
    BENEFICIARY_COUNTRY_CD VISIBLE,
    BENEFICIARY_ADDITIONAL_INFO VISIBLE,
    BENEFICIARY_FI_ORG_NAME VISIBLE,
    BENEFICIARY_FI_CD VISIBLE,
    BENEFICIARY_FI_PARTY_TYPE_CD VISIBLE,
    BENEFICIARY_FI_COUNTRY_CD VISIBLE,
    RECEIVING_FI_ADDITIONAL_INFO VISIBLE,
    RECEIVING_FI_CD VISIBLE,
    RECEIVING_FI_COUNTRY_CD VISIBLE,
    RECEIVING_FI_ORGANIZATION_NAME VISIBLE,
    SENDING_FI_ADDITIONAL_INFO VISIBLE,
    SENDING_FI_CD VISIBLE,
    SENDING_FI_COUNTRY_CD VISIBLE,
    SENDING_FI_ORGANIZATION_NAME VISIBLE,
    FI_TO_FI_INFO VISIBLE,
    CUSTOM_FIELD1 VISIBLE,
    CUSTOM_FIELD2 VISIBLE,
    CUSTOM_FIELD3 VISIBLE,
    CUSTOM_FIELD4 VISIBLE,
    CUSTOM_FIELD5 VISIBLE,
    CUSTOM_FIELD6 VISIBLE,
    CUSTOM_FIELD7 VISIBLE,
    CUSTOM_FIELD8 VISIBLE,
    CUSTOM_FIELD9 VISIBLE,
    CUSTOM_FIELD10 VISIBLE,
    CUSTOM_FIELD11 VISIBLE,
    CUSTOM_FIELD12 VISIBLE,
    CUSTOM_FIELD13 VISIBLE,
    CUSTOM_FIELD14 VISIBLE,
    CUSTOM_FIELD15 VISIBLE,
    CUSTOM_FIELD16 VISIBLE,
    CUSTOM_FIELD17 VISIBLE,
    CUSTOM_FIELD18 VISIBLE,
    CUSTOM_FIELD19 VISIBLE,
    CUSTOM_FIELD20 VISIBLE,
    CUSTOM_STRING_21 VISIBLE,
    CUSTOM_STRING_22 VISIBLE,
    CUSTOM_STRING_23 VISIBLE,
    CUSTOM_STRING_24 VISIBLE,
    CUSTOM_STRING_25 VISIBLE,
    CUSTOM_STRING_26 VISIBLE,
    CUSTOM_STRING_27 VISIBLE,
    CUSTOM_STRING_28 VISIBLE,
    CUSTOM_STRING_29 VISIBLE,
    CUSTOM_STRING_30 VISIBLE,
    CUSTOM_STRING_31 VISIBLE,
    CUSTOM_STRING_32 VISIBLE,
    CUSTOM_STRING_33 VISIBLE,
    CUSTOM_STRING_34 VISIBLE,
    CUSTOM_STRING_35 VISIBLE,
    CUSTOM_STRING_36 VISIBLE,
    CUSTOM_STRING_37 VISIBLE,
    CUSTOM_STRING_38 VISIBLE,
    CUSTOM_STRING_39 VISIBLE,
    CUSTOM_STRING_40 VISIBLE,
    CUSTOM_DATE_6 VISIBLE,
    CUSTOM_DATE_7 VISIBLE,
    CUSTOM_DATE_8 VISIBLE,
    CUSTOM_DATE_9 VISIBLE,
    CUSTOM_DATE_10 VISIBLE,
    CUSTOM_DATE_11 VISIBLE,
    CUSTOM_DATE_12 VISIBLE,
    CUSTOM_DATE_13 VISIBLE,
    CUSTOM_DATE_14 VISIBLE,
    CUSTOM_DATE_15 VISIBLE,
    CUSTOM_BOOLEAN_6 VISIBLE,
    CUSTOM_BOOLEAN_7 VISIBLE,
    CUSTOM_BOOLEAN_8 VISIBLE,
    CUSTOM_BOOLEAN_9 VISIBLE,
    CUSTOM_BOOLEAN_10 VISIBLE,
    CUSTOM_NUMBER_1 VISIBLE,
    CUSTOM_NUMBER_2 VISIBLE,
    CUSTOM_NUMBER_3 VISIBLE,
    CUSTOM_NUMBER_4 VISIBLE,
    CUSTOM_NUMBER_5 VISIBLE
    )
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT ADD MESSAGE_REF_NUMBER_1 varchar2(255)
    @go@
    UPDATE @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT SET MESSAGE_REF_NUMBER_1 = MESSAGE_REF_NUMBER
    @go@
    ALTER table @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT DROP COLUMN MESSAGE_REF_NUMBER
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_POLICY_RULES_AUDIT RENAME COLUMN MESSAGE_REF_NUMBER_1 TO MESSAGE_REF_NUMBER
    @go@
]
}
version 10.1.0.74 add {
}
version 10.1.0.75 add {
[mssql
    ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS ALTER COLUMN ADDRESS1 @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS ALTER COLUMN ADDRESS2 @ustring@(1000);

    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS ALTER COLUMN ADDRESS1 @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS ALTER COLUMN ADDRESS2 @ustring@(1000);

]

[oracle
    ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS MODIFY ADDRESS1 @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS MODIFY ADDRESS2 @ustring@(1000);

    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS MODIFY ADDRESS1 @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS MODIFY ADDRESS2 @ustring@(1000);

]



    UPDATE @env:lm_schema_name@.WLF_APP_THRESHOLDS set THRESH_VALUE = 6 WHERE THRESH_ID = 'wlfCriticalUpdateThreshold' AND THRESH_VALUE = 0;
    @go@
}
version 10.1.0.76 add {
[mssql
    BEGIN
        DECLARE @currValue INT;
    	DECLARE @startValue INT;
        DECLARE @seqName NVARCHAR(50);
        DECLARE @sql NVARCHAR(MAX);

        /*alertId*/
        SET @seqName = 'alertId';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'alertId';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_ALERT_ID') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_ALERT_ID START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

    	/*jobId*/
        SET @seqName = 'jobId';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'jobId';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_JOB_ID') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_JOB_ID START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

    	/*list_id_part*/
        SET @seqName = 'list_id_part';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'list_id_part';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_LIST_ID_PART') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_LIST_ID_PART START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

        /*LIST_VERSION_IDENTIFIER*/
        SET @seqName = 'LIST_VERSION_IDENTIFIER';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'LIST_VERSION_IDENTIFIER';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_LIST_VERSION_ID') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_LIST_VERSION_ID START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

        /*rl_hitID*/
        SET @seqName = 'rl_hitID';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'rl_hitID';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_RL_HITID') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_RL_HITID START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

        /*rl_messageHitId*/
        SET @seqName = 'rl_messageHitId';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'rl_messageHitId';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_MESSAGE_HIT_ID') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_MESSAGE_HIT_ID START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

        /*rl_messageId*/
        SET @seqName = 'rl_messageId';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'rl_messageId';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_MESSAGE_ID') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_MESSAGE_ID START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

        /*rl_messageId*/
        SET @seqName = 'rl_partyID';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'rl_partyID';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_PARTY_ID') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_PARTY_ID START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

        /*rl_partyKey*/
        SET @seqName = 'rl_partyKey';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'rl_partyKey';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_PARTY_KEY') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_PARTY_KEY START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

        /*ssbId*/
        SET @seqName = 'ssbId';
        SELECT @currValue = LATEST_VALUE FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = 'ssbId';
        SET @startValue = @currValue + 100;
        IF(OBJECT_ID('@env:lm_schema_name@.SEQ_SSB_ID') IS NULL)
    	BEGIN
    	    SET @sql = 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_SSB_ID START WITH ' + CAST(@startValue AS NVARCHAR(MAX)) + 'INCREMENT BY 1 CACHE 50';
        	EXEC sp_executesql @sql;
        END

    END;

	ALTER TABLE @env:lm_schema_name@.WLF_MS_SRCH_LOG_TEMP DROP CONSTRAINT PK_MS_SRCH_LOG_TEMP;
	ALTER TABLE @env:lm_schema_name@.WLF_MS_SRCH_LOG_TEMP ALTER COLUMN ID NUMERIC (15,0);
	ALTER TABLE @env:lm_schema_name@.WLF_MS_SRCH_LOG_TEMP ADD
	CONSTRAINT PK_MS_SRCH_LOG_TEMP PRIMARY KEY nonclustered
	(
		ID, JOB_ID, JOB_TIMESTAMP
	)
	@storage_primary_insert_update @env:tablespace_index@ default@
	@go@

	ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS_TEMP ALTER COLUMN ADDRESS1 @ustring@(1000)
	@go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_ADDRESS_TEMP ALTER COLUMN ADDRESS2 @ustring@(1000)
    @go@
]
[oracle
    DECLARE
        currValue NUMBER;
        startValue NUMBER;
        seqName VARCHAR2(50);
        sqlStmt VARCHAR2(4000);
        cnt NUMBER;
    BEGIN
        /*alertId*/
        seqName := 'alertId';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_ALERT_ID';
        IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_ALERT_ID START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*jobId*/
        seqName := 'jobId';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_JOB_ID';
        IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_JOB_ID START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*list_id_part*/
        seqName := 'list_id_part';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_LIST_ID_PART';
        IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_LIST_ID_PART START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*LIST_VERSION_IDENTIFIER*/
        seqName := 'LIST_VERSION_IDENTIFIER';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_LIST_VERSION_ID';
        IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_LIST_VERSION_ID START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*rl_hitID*/
        seqName := 'rl_hitID';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_RL_HITID';
        IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_RL_HITID START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*rl_messageHitId*/
        seqName := 'rl_messageHitId';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_MESSAGE_HIT_ID';
        IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_MESSAGE_HIT_ID START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*rl_messageId*/
        seqName := 'rl_messageId';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_MESSAGE_ID';
		IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_MESSAGE_ID START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*rl_partyID*/
        seqName := 'rl_partyID';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_PARTY_ID';
        IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_PARTY_ID START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*rl_partyKey*/
        seqName := 'rl_partyKey';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_PARTY_KEY';
		IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_PARTY_KEY START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;

        /*ssbId*/
        seqName := 'ssbId';
        SELECT LATEST_VALUE INTO currValue FROM @env:lm_schema_name@.APP_SEQUENCES WHERE SEQUENCE_ID = seqName;
        startValue := currValue + 100;

        SELECT COUNT(*) INTO cnt FROM ALL_SEQUENCES WHERE SEQUENCE_NAME = 'SEQ_SSB_ID';
        IF cnt = 0 THEN
            sqlStmt := 'CREATE SEQUENCE @env:lm_schema_name@.SEQ_SSB_ID START WITH ' || startValue || ' INCREMENT BY 1 CACHE 50';
            EXECUTE IMMEDIATE sqlStmt;
        END IF;
    END;
    @go@
]
}
version 10.1.0.77 add {
}
version 10.1.0.78 add {
}
version 10.1.0.79 add {
[oracle
         DECLARE
         n NUMBER(2);
         j NUMBER(2);
         sqlStmt VARCHAR2(4000);

         BEGIN
             SELECT COUNT(*) INTO j FROM USER_CONSTRAINTS WHERE
             TABLE_NAME = 'WLF_SRCHDEF_METADATA' AND CONSTRAINT_NAME = 'WLF_SRCHDEF_METADATA_NO_SPL_CHARS' ;
             IF j = 0 THEN

                 sqlStmt := 'ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA  ADD CONSTRAINT WLF_SRCHDEF_METADATA_NO_SPL_CHARS CHECK (NOT REGEXP_LIKE(ID, ''[!@$=<>\{};''''"]+''))';
                 EXECUTE IMMEDIATE sqlStmt;

            END IF;
         END;

]
[mssql
        if not exists (select * from sysconstraints c, sysobjects o1, sysobjects o2
        where c.id = o1.id and c.constid = o2.id and
        o1.name = 'WLF_SRCHDEF_METADATA' and
        o2.name = 'WLF_SRCHDEF_METADATA_NO_SPL_CHARS')
        begin

            ALTER TABLE @env:lm_schema_name@.WLF_SRCHDEF_METADATA add
            CONSTRAINT WLF_SRCHDEF_METADATA_NO_SPL_CHARS CHECK
            (
                ID NOT LIKE '%[!@$%=<>\{};''"]%'
            )

        end
]
    @go@

[oracle
         DECLARE
         n NUMBER(2);
         j NUMBER(2);
         sqlStmt VARCHAR2(4000);

         BEGIN
             SELECT COUNT(*) INTO j FROM USER_CONSTRAINTS WHERE
             TABLE_NAME = 'WLF_EXCLUDE_LIST' AND CONSTRAINT_NAME = 'WLF_EXCLUDE_LIST_NO_SPL_CHARS' ;
             IF j = 0 THEN

                 sqlStmt := 'ALTER TABLE @env:lm_schema_name@.WLF_EXCLUDE_LIST  ADD CONSTRAINT WLF_EXCLUDE_LIST_NO_SPL_CHARS CHECK (NOT REGEXP_LIKE(LIST_ID, ''[!@$=<>\{};''''"]+''))';
                 EXECUTE IMMEDIATE sqlStmt;

            END IF;
         END;

]
[mssql
        if not exists (select * from sysconstraints c, sysobjects o1, sysobjects o2
        where c.id = o1.id and c.constid = o2.id and
        o1.name = 'WLF_EXCLUDE_LIST' and
        o2.name = 'WLF_EXCLUDE_LIST_NO_SPL_CHARS')
        begin

            ALTER TABLE @env:lm_schema_name@.WLF_EXCLUDE_LIST add
            CONSTRAINT WLF_EXCLUDE_LIST_NO_SPL_CHARS CHECK
            (
                LIST_ID NOT LIKE '%[!@$%=<>\{};''"]%'
            )

        end
]
    @go@
}
version 10.1.0.80 add {

[oracle

    DECLARE
    CNT NUMBER;
    BEGIN
        select COUNT(1) INTO CNT FROM @env:lm_schema_name@.WLF_PLUGIN_SETTINGS WHERE SETTING_ID = 'SSB_SUPPRESS_HITS';
        IF CNT = 0 THEN
            INSERT INTO @env:lm_schema_name@.WLF_PLUGIN_SETTINGS (SETTING_ID,VALUE,TAB,DESCRIPTION) VALUES ('SSB_SUPPRESS_HITS',0,'Self Service Batch','Suppress Hits By Default');
        END IF;
    END;
]

[mssql
    IF NOT EXISTS (SELECT 1 FROM @env:lm_schema_name@.WLF_PLUGIN_SETTINGS WHERE SETTING_ID = 'SSB_SUPPRESS_HITS')
    BEGIN
        INSERT INTO @env:lm_schema_name@.WLF_PLUGIN_SETTINGS (SETTING_ID,VALUE,TAB,DESCRIPTION) VALUES ('SSB_SUPPRESS_HITS',0,'Self Service Batch','Suppress Hits By Default');
    END;
]
    @go@
}
version 10.1.0.81 add {
[mssql
    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_TEMP ALTER COLUMN ADDRESS1 @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ADDRESS_TEMP ALTER COLUMN ADDRESS2 @ustring@(1000);

    ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES ALTER COLUMN ADDR_STREET @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES ALTER COLUMN ADDR_STREET2 @ustring@(1000);


    ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES ALTER COLUMN ADDR_STREET @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES ALTER COLUMN ADDR_STREET2 @ustring@(1000);

    ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDRESSES ALTER COLUMN ADDR_STREET @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDRESSES ALTER COLUMN ADDR_STREET2 @ustring@(1000);
]
[oracle

    DECLARE
        n NUMBER(2);
        j NUMBER(2);
    BEGIN
        SELECT COUNT(*) INTO n FROM USER_INDEXES WHERE INDEX_NAME='ENTRY_ADDR_ST1_UPPER_IDX';
        if n > 0 THEN
            EXECUTE IMMEDIATE 'drop index ENTRY_ADDR_ST1_UPPER_IDX';
        END IF;
    END;
    @go@


    ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES MODIFY ADDR_STREET @ustring@(1000);

    create index entry_addr_st1_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(upper(ADDR_STREET))
    @storage_index_insert_update @env:tablespace_index@ default LOCAL@
    @go@

    DECLARE
        n NUMBER(2);
        j NUMBER(2);
    BEGIN
        SELECT COUNT(*) INTO n FROM USER_INDEXES WHERE INDEX_NAME='ENTRY_ADDR_ST2_UPPER_IDX';
        if n > 0 THEN
            EXECUTE IMMEDIATE 'drop index ENTRY_ADDR_ST2_UPPER_IDX';
        END IF;
    END;
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_LIST_ADDRESSES MODIFY ADDR_STREET2 @ustring@(1000);

    create index entry_addr_st2_upper_idx on @env:lm_schema_name@.WLF_LIST_ADDRESSES(upper(ADDR_STREET2))
    @storage_index_insert_update @env:tablespace_index@ default LOCAL@
    @go@

    DECLARE
        n NUMBER(2);
        j NUMBER(2);
    BEGIN
        SELECT COUNT(*) INTO n FROM USER_INDEXES WHERE INDEX_NAME='TMP_ADDR_ST1_UPPER_IDX';
        if n > 0 THEN
            EXECUTE IMMEDIATE 'drop index TMP_ADDR_ST1_UPPER_IDX';
        END IF;
    END;
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES MODIFY ADDR_STREET @ustring@(1000);

    create index tmp_addr_st1_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(upper(ADDR_STREET))
    @go@

    DECLARE
        n NUMBER(2);
        j NUMBER(2);
    BEGIN
        SELECT COUNT(*) INTO n FROM USER_INDEXES WHERE INDEX_NAME='TMP_ADDR_ST2_UPPER_IDX';
        if n > 0 THEN
            EXECUTE IMMEDIATE 'drop index TMP_ADDR_ST2_UPPER_IDX';
        END IF;
    END;
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES MODIFY ADDR_STREET2 @ustring@(1000);

    create index tmp_addr_st2_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ADDRESSES(upper(ADDR_STREET2))
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDRESSES MODIFY ADDR_STREET @ustring@(1000);
    ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ADDRESSES MODIFY ADDR_STREET2 @ustring@(1000);
]
}
version 10.1.0.82 add {
[oracle
    DECLARE
    CNT NUMBER;
    BEGIN
    	select COUNT(1) INTO CNT FROM USER_CONSTRAINTS WHERE UPPER(CONSTRAINT_NAME)  = 'PK_WLF_LM_VERSIONS' AND UPPER(TABLE_NAME)  = 'WLF_LM_VERSIONS';
    	IF CNT > 0 THEN
        	EXECUTE IMMEDIATE 'ALTER TABLE @env:lm_schema_name@.WLF_LM_VERSIONS DROP CONSTRAINT PK_WLF_LM_VERSIONS';
    	    EXECUTE IMMEDIATE 'ALTER TABLE @env:lm_schema_name@.WLF_LM_VERSIONS MODIFY APP_TYPE @ustring@(255) NOT NULL';
    		EXECUTE IMMEDIATE 'ALTER TABLE @env:lm_schema_name@.WLF_LM_VERSIONS ADD CONSTRAINT PK_WLF_LM_VERSIONS PRIMARY KEY (ID,APP_TYPE)';
    	END IF;
    END;
    @go@
]
[mssql
    IF EXISTS(select name from sys.objects where UPPER(name)  = 'PK_WLF_LM_VERSIONS')
    BEGIN
    ALTER TABLE @env:lm_schema_name@.WLF_LM_VERSIONS DROP CONSTRAINT PK_WLF_LM_VERSIONS;
    ALTER TABLE @env:lm_schema_name@.WLF_LM_VERSIONS ALTER COLUMN APP_TYPE @ustring@ (255) NOT NULL;
    ALTER TABLE @env:lm_schema_name@.WLF_LM_VERSIONS ADD CONSTRAINT PK_WLF_LM_VERSIONS PRIMARY KEY (ID,APP_TYPE);
    END;
    @go@
]
}
version 10.1.0.83 add {
}
version 10.1.0.84 add {
}
version 10.1.0.85 add {
[mssql
    IF NOT EXISTS(select name from sys.objects where UPPER(name)  = 'WLF_SANCTIONREFERENCELISTS_TEMP')
    BEGIN
        SELECT *
        INTO @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS_TEMP
        FROM @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS;
    END;
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ALTER COLUMN CODE @ustring@(10) NOT NULL;
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ALTER COLUMN LISTTYPE1 @ustring@(255);
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'LISTREFERENCETYPE' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD LISTREFERENCETYPE @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'SINGLELISTREFERENCEID' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD SINGLELISTREFERENCEID @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'LISTTYPE2' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD LISTTYPE2 @ustring@(255);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'LISTCATEGORYNAME' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD LISTCATEGORYNAME @ustring@(255);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'NUMOFLISTADDITIONS' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD NUMOFLISTADDITIONS @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'NUMOFLISTUPDATES' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD NUMOFLISTUPDATES @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'NUMOFLISTDELETIONS' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD NUMOFLISTDELETIONS @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'TOTALNUMOFACTIVELISTENTRIESPERSON' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD TOTALNUMOFACTIVELISTENTRIESPERSON @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'TOTALNUMOFACTIVELISTENTRIESENTITY' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD TOTALNUMOFACTIVELISTENTRIESENTITY @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'TOTALNUMOFACTIVELISTENTRIESCOMBINED' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD TOTALNUMOFACTIVELISTENTRIESCOMBINED @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'TOTALNUMOFLISTENTRIESINCLUDINGINACTIVE' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD TOTALNUMOFLISTENTRIESINCLUDINGINACTIVE @ustring@(10);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'ACTIONPERFORMEDONLISTS' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD ACTIONPERFORMEDONLISTS @ustring@(3);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'LISTPROVIDERDESCRIPTION' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD LISTPROVIDERDESCRIPTION @ustring@(4000);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'COUNTRY' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD COUNTRY @ustring@(255);
    END;
    @go@
    IF NOT EXISTS(select name from sys.columns where name = 'REFERENCEGROUPNAME' AND Object_ID = Object_ID('WLF_SANCTIONREFERENCELISTS'))
    BEGIN
    	ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS ADD REFERENCEGROUPNAME @ustring@(255);
    END;
    @go@
    IF NOT EXISTS(select name from sys.objects where UPPER(name)  = 'WLF_SANCTIONREFERENCEPROGRAMS')
    BEGIN
        CREATE TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCEPROGRAMS (
        	CODE @ustring@(10),
        	PROGRAMNAME @ustring@(255)
        );
    END;
    @go@
]
[oracle
    DECLARE
    n NUMBER;
    BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS';
        IF n = 0 THEN
            EXECUTE IMMEDIATE 'CREATE TABLE WLF_SANCTIONREFERENCELISTS_TEMP AS SELECT * FROM WLF_SANCTIONREFERENCELISTS';
        END IF;
    END;
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS MODIFY CODE @ustring@(10)
    @go@
    ALTER TABLE @env:lm_schema_name@.WLF_SANCTIONREFERENCELISTS MODIFY LISTTYPE1 @ustring@(255)
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'LISTREFERENCETYPE';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD LISTREFERENCETYPE VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'SINGLELISTREFERENCEID';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD SINGLELISTREFERENCEID VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'LISTTYPE2';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD LISTTYPE2 VARCHAR2(255)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'LISTCATEGORYNAME';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD LISTCATEGORYNAME VARCHAR2(255)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'NUMOFLISTADDITIONS';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD NUMOFLISTADDITIONS VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'NUMOFLISTUPDATES';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD NUMOFLISTUPDATES VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'NUMOFLISTDELETIONS';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD NUMOFLISTDELETIONS VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'TOTALNUMOFACTIVELISTENTRIESPERSON';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD TOTALNUMOFACTIVELISTENTRIESPERSON VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'TOTALNUMOFACTIVELISTENTRIESENTITY';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD TOTALNUMOFACTIVELISTENTRIESENTITY VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'TOTALNUMOFACTIVELISTENTRIESCOMBINED';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD TOTALNUMOFACTIVELISTENTRIESCOMBINED VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'TOTALNUMOFLISTENTRIESINCLUDINGINACTIVE';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD TOTALNUMOFLISTENTRIESINCLUDINGINACTIVE VARCHAR2(10)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'ACTIONPERFORMEDONLISTS';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD ACTIONPERFORMEDONLISTS VARCHAR2(3)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'LISTPROVIDERDESCRIPTION';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD LISTPROVIDERDESCRIPTION VARCHAR2(4000)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'COUNTRY';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD COUNTRY VARCHAR2(255)';
    	END IF;
    END;
    @go@
    DECLARE
        n NUMBER;
      BEGIN
    	SELECT COUNT(*) INTO n FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCELISTS' AND COLUMN_NAME  = 'REFERENCEGROUPNAME';
    	IF n = 0 THEN
    		EXECUTE IMMEDIATE 'ALTER TABLE WLF_SANCTIONREFERENCELISTS ADD REFERENCEGROUPNAME VARCHAR2(255)';
    	END IF;
    END;
    @go@
    DECLARE
    n NUMBER;
    BEGIN
        SELECT COUNT(*) INTO n FROM USER_TABLES WHERE TABLE_NAME = 'WLF_SANCTIONREFERENCEPROGRAMS';
        IF n = 0 THEN
            EXECUTE IMMEDIATE 'CREATE TABLE WLF_SANCTIONREFERENCEPROGRAMS (
            CODE VARCHAR2(10),
            PROGRAMNAME VARCHAR2(255))';
        END IF;
    END;
    @go@
]
}
version 10.1.0.86 add {
}
version 10.1.0.87 add {
}
version 10.1.0.88 add {
}
version 10.1.0.89 add {
[mssql
    IF EXISTS (SELECT *  FROM sys.indexes  WHERE name='entry_id_upper_idx')
         begin
             drop index WLF_LIST_IDS.entry_id_upper_idx;
         end;
    @go@
 	ALTER TABLE @env:lm_schema_name@.WLF_LIST_IDS ALTER COLUMN ID_NUMBER @ustring@(512)
    @go@

     create index entry_id_upper_idx on @env:lm_schema_name@.WLF_LIST_IDS(ID_NUMBER)
 	 @storage_index_insert_update @env:tablespace_index@ default LOCAL@
 	 @go@

 	 ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_IDS  ALTER COLUMN ID_NUMBER @ustring@(512);

     ALTER TABLE @env:lm_schema_name@.WLF_RL_ID_TEMP  ALTER COLUMN ID_NUMBER @ustring@(512);
     ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID_TEMP  ALTER COLUMN ID_NUMBER @ustring@(512);
     ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_IDS  ALTER COLUMN ID_NUMBER @ustring@(512);
     ALTER TABLE @env:lm_schema_name@.WLF_RL_ID  ALTER COLUMN ID_NUMBER @ustring@(512);
     ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID  ALTER COLUMN ID_NUMBER @ustring@(512);
     @go@

     IF EXISTS (SELECT *  FROM sys.indexes  WHERE name='entry_alias_upper_idx')
         begin
             drop index WLF_LIST_ALIASES.entry_alias_upper_idx;
         end;
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES ALTER COLUMN ALIAS_FULL_NAME @ustring@(470)
     @go@

     create index entry_alias_upper_idx on @env:lm_schema_name@.WLF_LIST_ALIASES(ALIAS_FULL_NAME)
     @storage_index_insert_update @env:tablespace_index@ default LOCAL@
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES ALTER COLUMN ALIAS_FULL_NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
     ALTER COLUMN ALIAS_FULL_NAME	@ustring@(470)
     @go@

     IF EXISTS (SELECT *  FROM sys.indexes  WHERE name='entry_fn_upper_idx')
         begin
              drop index WLF_LIST_ENTRIES.entry_fn_upper_idx;
         end;
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES ALTER COLUMN ENTRY_FULL_NAME @ustring@(470)
     @go@

     create index entry_fn_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(ENTRY_FULL_NAME)
     @storage_index_insert_update @env:tablespace_index@ default LOCAL@
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES ALTER COLUMN ENTRY_FULL_NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES
     ALTER COLUMN ENTRY_FULL_NAME @ustring@(470)
     @go@

]
[oracle
    begin
    	execute immediate ('DROP INDEX entry_id_upper_idx');
    	exception
    	when others then
    	null;
    end;
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_LIST_IDS @modify@ ID_NUMBER @ustring@(512)
    @go@

    create index entry_id_upper_idx on @env:lm_schema_name@.WLF_LIST_IDS(upper(ID_NUMBER))
	@storage_index_insert_update @env:tablespace_index@ default LOCAL@
	@go@

    begin
        	execute immediate ('DROP INDEX tmp_id_upper_idx');
        	exception
        	when others then
        	null;
    end;
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_IDS
    @modify@   ID_NUMBER @ustring@(512)
    @go@

    create index tmp_id_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_IDS(upper(ID_NUMBER))
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_IDS
    @modify@   ID_NUMBER @ustring@(512)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_ID
    @modify@   ID_NUMBER @ustring@(512)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_ID
    @modify@   ID_NUMBER @ustring@(512)
    @go@

    begin
        execute immediate ('DROP INDEX entry_alias_upper_idx');
        exception
        when others then
        null;
    end;
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_LIST_ALIASES
    @modify@   ALIAS_FULL_NAME @ustring@(470)
    @go@

     create index entry_alias_upper_idx on @env:lm_schema_name@.WLF_LIST_ALIASES(upper(ALIAS_FULL_NAME))
     @storage_index_insert_update @env:tablespace_index@ default LOCAL@
     @go@

     begin
             execute immediate ('DROP INDEX tmp_alias_upper_idx');
             exception
             when others then
             null;
     end;

     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ALIASES
     @modify@   ALIAS_FULL_NAME @ustring@(470)
     @go@

     create index tmp_alias_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ALIASES(upper(ALIAS_FULL_NAME))
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ALIASES
     @modify@   ALIAS_FULL_NAME @ustring@(470)
     @go@

     begin
          execute immediate ('DROP INDEX entry_fn_upper_idx');
          exception
          when others then
          null;
     end;
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_LIST_ENTRIES
     @modify@   ENTRY_FULL_NAME @ustring@(470)
     @go@

     create index entry_fn_upper_idx on @env:lm_schema_name@.WLF_LIST_ENTRIES(upper(ENTRY_FULL_NAME))
     @storage_index_insert_update @env:tablespace_index@ default LOCAL@
     @go@

     begin
             execute immediate ('DROP INDEX tmp_fn_upper_idx');
             exception
             when others then
             null;
     end;
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES
     @modify@ ENTRY_FULL_NAME @ustring@(470)
     @go@

     create index tmp_fn_upper_idx on @env:lm_schema_name@.WLF_TMP_LIST_ENTRIES(upper(ENTRY_FULL_NAME))
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_ARC_LIST_ENTRIES
     @modify@ ENTRY_FULL_NAME @ustring@(470)
     @go@

]
}
version 10.1.0.90 add {
[mssql

     ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES
     ALTER COLUMN ENTRY_FULL_NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_TMP_LATEST_LIST_ENTRIES
     ALTER COLUMN ENTRY_FULL_NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT
     ALTER COLUMN NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP
     ALTER COLUMN NAME @ustring@(470)
     @go@
]
[oracle
     ALTER TABLE @env:lm_schema_name@.WLF_LATEST_LIST_ENTRIES
     @modify@ ENTRY_FULL_NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT
     @modify@ NAME @ustring@(470)
     @go@

]
}

version 10.1.0.91 add {
[mssql

    ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY_TEMP @modify@ PARTY_NAME @ustring@(470)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY @modify@ PARTY_NAME @ustring@(470)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT @modify@ NAME @ustring@(470)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_TEMP @modify@ NAME @ustring@(470)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG @modify@ PARTY_FULL_NAME @ustring@(470)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG_TEMP @modify@ PARTY_FULL_NAME @ustring@(470)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES @modify@ PARTY_NAME @ustring@(470)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES @modify@ PARTY_NAME @ustring@(470)
    @go@

]
[oracle

     ALTER TABLE @env:lm_schema_name@.WLF_RL_PARTY
     @modify@ PARTY_NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT
     @modify@ NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_SRCH_LOG
     @modify@ PARTY_FULL_NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_ENTITY_EXCLUDE_ENTRIES
     @modify@ PARTY_NAME @ustring@(470)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES
     @modify@ PARTY_NAME @ustring@(470)
     @go@

]
}
version 10.1.0.92 add {
}
version 10.1.0.93 add {
[mssql
    IF EXISTS (SELECT *  FROM sys.indexes  WHERE name='WLF_HITS_IX1')
    begin
            drop index WLF_HITS.WLF_HITS_IX1;
    end;
    @go@

    IF EXISTS (SELECT *  FROM sys.indexes  WHERE name='WLF_HITS_IX2_TEST')
    begin
            drop index WLF_HITS.WLF_HITS_IX2_TEST;
    end;
     @go@

    ALTER TABLE @env:lm_schema_name@.WLF_HITS @modify@ LIST_ENTRY_ID @ustring@(500)
    @go@

    create index WLF_HITS_IX1 on @env:lm_schema_name@.WLF_HITS(HIT_HASH_KEY,PARTY_MATCH_HASH,HIT_MATCH_HASH,HIT_CRIT_UPDATE_DATE,LIST_ID,LIST_ENTRY_ID)
	@storage_index_insert_update @env:tablespace_index@ default@
	@go@

	CREATE INDEX WLF_HITS_IX2_TEST ON @env:lm_schema_name@.WLF_HITS (PARTY_MATCH_HASH, LIST_ID, LIST_ENTRY_ID)

    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT @modify@ ENTRY_ID @ustring@(500)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT_TEMP @modify@ ENTRY_ID @ustring@(500)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT @modify@ ENTRY_ID @ustring@(500)
    @go@

    ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT_TEMP @modify@ ENTRY_ID @ustring@(500)
    @go@

    IF EXISTS(select name from sys.objects where UPPER(name)  = 'WLF_HIT_EXCLUDE_ENTRIES_PK')
    BEGIN
       ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES DROP CONSTRAINT WLF_HIT_EXCLUDE_ENTRIES_PK;
       ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES ALTER COLUMN REF_LIST_ENTRY_KEY @ustring@ (500) NOT NULL;
       ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES ADD CONSTRAINT WLF_HIT_EXCLUDE_ENTRIES_PK PRIMARY KEY( LIST_ID,PARTY_KEY,REF_LIST_ID,REF_LIST_ENTRY_KEY);
    END;
    @go@

]
[oracle

     ALTER TABLE @env:lm_schema_name@.WLF_RL_HIT
     @modify@ ENTRY_ID @ustring@(500)
     @go@

     ALTER TABLE @env:lm_schema_name@.WLF_RL_MESSAGE_HIT
     @modify@ ENTRY_ID @ustring@(500)
     @go@

     DECLARE
     CNT NUMBER;
     BEGIN
           select COUNT(1) INTO CNT FROM USER_CONSTRAINTS WHERE UPPER(CONSTRAINT_NAME)  = 'WLF_HIT_EXCLUDE_ENTRIES_PK' AND UPPER(TABLE_NAME)  = 'WLF_HIT_EXCLUDE_ENTRIES';
           IF CNT > 0 THEN
                EXECUTE IMMEDIATE 'ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES DROP CONSTRAINT WLF_HIT_EXCLUDE_ENTRIES_PK';
                EXECUTE IMMEDIATE 'ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES MODIFY REF_LIST_ENTRY_KEY @ustring@(500)';
                EXECUTE IMMEDIATE 'ALTER TABLE @env:lm_schema_name@.WLF_HIT_EXCLUDE_ENTRIES ADD CONSTRAINT WLF_HIT_EXCLUDE_ENTRIES_PK PRIMARY KEY( LIST_ID,PARTY_KEY,REF_LIST_ID,REF_LIST_ENTRY_KEY)';

             END IF;
        END;
     @go@

     begin
        execute immediate ('DROP INDEX WLF_HITS_IX1');
        exception
            when others then
        null;
     end;
    @go@

      begin
         execute immediate ('DROP INDEX WLF_HITS_IX2_TEST');
              exception
                  when others then
              null;
      end;
      @go@

      ALTER TABLE @env:lm_schema_name@.WLF_HITS
      @modify@ LIST_ENTRY_ID @ustring@(500)
      @go@

      create index WLF_HITS_IX1 on @env:lm_schema_name@.WLF_HITS(HIT_HASH_KEY,PARTY_MATCH_HASH,HIT_MATCH_HASH,HIT_CRIT_UPDATE_DATE,LIST_ID,LIST_ENTRY_ID)
      @storage_index_insert_update @env:tablespace_index@ default@
      @go@

      CREATE INDEX WLF_HITS_IX2_TEST ON @env:lm_schema_name@.WLF_HITS (PARTY_MATCH_HASH, LIST_ID, LIST_ENTRY_ID)
      @go@
]
}